{
  "object": {
    "name": "swoole_redis_coro"
  },
  "comment": "redis协程客户端",
  "namespace": "",
  "consts": [],
  "properties": {
    "setting": {
      "access": "public",
      "type": "array",
      "comment": "用于初始化的配置选项",
      "isStatic": false
    },
    "host": {
      "access": "public",
      "type": "string",
      "comment": "配置的主机",
      "isStatic": false
    },
    "port": {
      "access": "public",
      "type": "int",
      "comment": "配置的端口号",
      "isStatic": false
    },
    "sock": {
      "access": "public",
      "type": "int",
      "comment": "连接句柄",
      "isStatic": false
    },
    "errCode": {
      "access": "public",
      "type": "int",
      "comment": "错误码",
      "isStatic": false
    },
    "errMsg": {
      "access": "public",
      "type": "string",
      "comment": "错误信息",
      "isStatic": false
    }
  },
  "methods": {
    "__construct": {
      "access": "public",
      "comment": "初始化函数",
      "isStatic": false,
      "return": "",
      "example": "",
      "parameters": []
    },
    "__destruct": {
      "access": "public",
      "comment": "析构函数",
      "isStatic": false,
      "return": "",
      "example": "",
      "parameters": []
    },
    "connect": {
      "access": "public",
      "comment": "连接redis服务器",
      "isStatic": false,
      "return": "",
      "example": "",
      "parameters": {
        "host": {
          "comment": "主机",
          "type": "string",
          "options": []
        },
        "port": {
          "comment": "端口",
          "type": "int",
          "options": []
        }
      }
    },
    "setDefer": {
      "access": "public",
      "comment": "设置是否延迟",
      "isStatic": false,
      "return": "",
      "example": "",
      "parameters": {
        "defer": {
          "comment": "bool值，为true时，表明该Client要延迟收包，为false时，表明该Client非延迟收包，默认值为true",
          "type": "boolean",
          "options": []
        }
      }
    },
    "getDefer": {
      "access": "public",
      "comment": "返回当前设置的defer",
      "isStatic": false,
      "return": "boolean",
      "example": "",
      "parameters": []
    },
    "recv": {
      "access": "public",
      "comment": "从服务器端接收数据",
      "isStatic": false,
      "return": "string",
      "example": "",
      "parameters": {
        "size": {
          "comment": "接收数据的缓存区最大长度，此参数不要设置过大，否则会占用较大内存",
          "type": "int",
          "options": []
        },
        "flag": {
          "comment": "是否等待所有数据到达后返回",
          "type": "boolean",
          "options": []
        }
      }
    },
    "close": {
      "access": "public",
      "comment": "关闭连接",
      "isStatic": false,
      "return": "",
      "example": "",
      "parameters": []
    },
    "set": {
      "access": "public",
      "comment": "给指定的键设置值",
      "isStatic": false,
      "return": "bool",
      "example": "直接设置：\n $redis->set('key', 'value');\n带有效期的设置:\n$redis->set('key','value', 10);\n当键不存在时，设置期有效期为10秒:\n$redis->set('key', 'value', Array('nx', 'ex'=>10));\n当键存在时，设置期有效期为1000毫秒:\n$redis->set('key', 'value', Array('xx', 'px'=>1000));\n",
      "parameters": {
        "key": {
          "comment": "设置的缓存键",
          "type": "string",
          "options": []
        },
        "value": {
          "comment": "设置的缓存值",
          "type": "string",
          "options": []
        },
        "options": {
          "comment": "附加项，可以是超时时间或者一个选项数组",
          "type": "int|array",
          "options": []
        }
      }
    },
    "setBit": {
      "access": "public",
      "comment": "修改某个键的某个位置的位值",
      "isStatic": false,
      "return": "int:",
      "example": "\n<pre>\n$redis->set('key', \"*\");     \/\/ ord(\"*\") = 42 = 0x2f = \"0010 1010\"\n$redis->setBit('key', 5, 1); \/\/ returns 0\n$redis->setBit('key', 7, 1); \/\/ returns 0\n$redis->get('key');          \/\/ chr(0x2f) = \"\/\" = b(\"0010 1111\")\n<\/pre>",
      "parameters": {
        "key": {
          "comment": "键名",
          "type": "string",
          "options": []
        },
        "offset": {
          "comment": "开始位置",
          "type": "int",
          "options": []
        },
        "value": {
          "comment": "新值",
          "type": "boolean|int",
          "options": []
        }
      }
    },
    "setEx": {
      "access": "public",
      "comment": "设置键值并设置有效期",
      "isStatic": false,
      "return": "bool",
      "example": "$redis->setex('key', 3600, 'value');",
      "parameters": {
        "key": {
          "comment": "设置的缓存键",
          "type": "string",
          "options": []
        },
        "value": {
          "comment": "设置的缓存值",
          "type": "string",
          "options": []
        },
        "ttl": {
          "comment": "有效期",
          "type": "int",
          "options": []
        }
      }
    },
    "psetEx": {
      "access": "public",
      "comment": "设置键值并设置有效期(毫秒为单位)",
      "isStatic": false,
      "return": "",
      "example": "",
      "parameters": {
        "key": {
          "comment": "设置的缓存键",
          "type": "string",
          "options": []
        },
        "value": {
          "comment": "设置的缓存值",
          "type": "string",
          "options": []
        },
        "ttl": {
          "comment": "有效期(毫秒为单位)",
          "type": "int",
          "options": []
        }
      }
    },
    "lSet": {
      "access": "public",
      "comment": "给列表指定位置设置新值",
      "isStatic": false,
      "return": "boolean",
      "example": "\n<pre>\n$redis->rPush('key1', 'A');\n$redis->rPush('key1', 'B');\n$redis->rPush('key1', 'C');  \/\/ key1 => [ 'A', 'B', 'C' ]\n$redis->lGet('key1', 0);     \/\/ 'A'\n$redis->lSet('key1', 0, 'X');\n$redis->lGet('key1', 0);     \/\/ 'X'\n<\/pre>",
      "parameters": {
        "key": {
          "comment": "键名",
          "type": "string",
          "options": []
        },
        "index": {
          "comment": "索引值",
          "type": "int",
          "options": []
        },
        "value": {
          "comment": "新值",
          "type": "string",
          "options": []
        }
      }
    },
    "get": {
      "access": "public",
      "comment": "获取指定的key的值",
      "isStatic": false,
      "return": "string|bool",
      "example": "$redis->get('key');",
      "parameters": []
    },
    "mGet": {
      "access": "public",
      "comment": "批量获取键名",
      "isStatic": false,
      "return": "",
      "example": "\n<pre>\n$redis->delete('x', 'y', 'z', 'h');\t\/\/ remove x y z\n$redis->mset(array('x' => 'a', 'y' => 'b', 'z' => 'c'));\n$redis->hset('h', 'field', 'value');\nvar_dump($redis->mget(array('x', 'y', 'z', 'h')));\n\/\/ Output:\n\/\/ array(3) {\n\/\/ [0]=>\n\/\/ string(1) \"a\"\n\/\/ [1]=>\n\/\/ string(1) \"b\"\n\/\/ [2]=>\n\/\/ string(1) \"c\"\n\/\/ [3]=>\n\/\/ bool(false)\n\/\/ }\n<\/pre>",
      "parameters": {
        "keys": {
          "comment": "键名数组",
          "type": "array",
          "options": []
        }
      }
    },
    "del": {
      "access": "public",
      "comment": "删除一个或多个键",
      "isStatic": false,
      "return": "int",
      "example": "$redis->delete('key1', 'key2'); \n$redis->delete(array('key3', 'key4'));",
      "parameters": {
        "keys": {
          "comment": "键名",
          "type": "array|string",
          "options": []
        }
      }
    },
    "hDel": {
      "access": "public",
      "comment": "删除字典的某个或某些字段",
      "isStatic": false,
      "return": "int",
      "example": "\n<pre>\n$redis->hMSet('h',\narray(\n'f1' => 'v1',\n'f2' => 'v2',\n'f3' => 'v3',\n'f4' => 'v4',\n));\nvar_dump( $redis->hDel('h', 'f1') );        \/\/ int(1)\nvar_dump( $redis->hDel('h', 'f2', 'f3') );  \/\/ int(2)\ns\nvar_dump( $redis->hGetAll('h') );\n\/\/\/\/ Output:\n\/\/  array(1) {\n\/\/    [\"f4\"]=> string(2) \"v4\"\n\/\/  }\n<\/pre>",
      "parameters": {
        "key": {
          "comment": "键名",
          "type": "string",
          "options": []
        },
        "fields": {
          "comment": "字段名",
          "type": "string|array",
          "options": []
        }
      }
    },
    "hSet": {
      "access": "public",
      "comment": "为字典的字段设置值",
      "isStatic": false,
      "return": "long",
      "example": "\n<pre>\n$redis->delete('h')\n$redis->hSet('h', 'key1', 'hello');  \/\/ 1, 'key1' => 'hello' in the hash at \"h\"\n$redis->hGet('h', 'key1');           \/\/ returns \"hello\"\n$redis->hSet('h', 'key1', 'plop');   \/\/ 0, value was replaced.\n$redis->hGet('h', 'key1');           \/\/ returns \"plop\"\n<\/pre>",
      "parameters": {
        "key": {
          "comment": "键名",
          "type": "string",
          "options": []
        },
        "field": {
          "comment": "字段名",
          "type": "string",
          "options": []
        },
        "value": {
          "comment": "字段值",
          "type": "string",
          "options": []
        }
      }
    },
    "hMSet": {
      "access": "public",
      "comment": "批量设置字典字段的值",
      "isStatic": false,
      "return": "boolean",
      "example": "\n<pre>\n$redis->delete('user:1');\n$redis->hMset('user:1', array('name' => 'Joe', 'salary' => 2000));\n$redis->hIncrBy('user:1', 'salary', 100); \/\/ Joe earns 100 more now.\n<\/pre>",
      "parameters": {
        "key": {
          "comment": "键名",
          "type": "string",
          "options": []
        },
        "fields": {
          "comment": "字段键值对",
          "type": "array",
          "options": []
        }
      }
    },
    "hSetNx": {
      "access": "public",
      "comment": "当字典的字段不存在时，为其设置值",
      "isStatic": false,
      "return": "bool",
      "example": "\n<pre>\n$redis->delete('h')\n$redis->hSetNx('h', 'key1', 'hello'); \/\/ TRUE, 'key1' => 'hello' in the hash at \"h\"\n$redis->hSetNx('h', 'key1', 'world'); \/\/ FALSE, 'key1' => 'hello' in the hash at \"h\". No change since the field\nwasn't replaced.\n<\/pre>",
      "parameters": {
        "key": {
          "comment": "键名",
          "type": "string",
          "options": []
        },
        "field": {
          "comment": "字段名",
          "type": "string",
          "options": []
        },
        "value": {
          "comment": "字段值",
          "type": "string",
          "options": []
        }
      }
    },
    "delete": {
      "access": "public",
      "comment": "删除一个或多个键",
      "isStatic": false,
      "return": "int",
      "example": "$redis->delete('key1', 'key2'); \n$redis->delete(array('key3', 'key4'));",
      "parameters": {
        "keys": {
          "comment": "键名",
          "type": "array|string",
          "options": []
        }
      }
    },
    "mSet": {
      "access": "public",
      "comment": "批量设置值",
      "isStatic": false,
      "return": "bool",
      "example": "\n<pre>\n$redis->mset(array('key0' => 'value0', 'key1' => 'value1'));\nvar_dump($redis->get('key0'));\nvar_dump($redis->get('key1'));\n\/\/ Output:\n\/\/ string(6) \"value0\"\n\/\/ string(6) \"value1\"\n<\/pre>",
      "parameters": {
        "values": {
          "comment": "要设置的键值对",
          "type": "array",
          "options": []
        }
      }
    },
    "mSetNx": {
      "access": "public",
      "comment": "批量设置值(当不存在时设置)",
      "isStatic": false,
      "return": "bool",
      "example": "\n<pre>\n$redis->mset(array('key0' => 'value0', 'key1' => 'value1'));\nvar_dump($redis->get('key0'));\nvar_dump($redis->get('key1'));\n\/\/ Output:\n\/\/ string(6) \"value0\"\n\/\/ string(6) \"value1\"\n<\/pre>",
      "parameters": {
        "values": {
          "comment": "要设置的键值对",
          "type": "array",
          "options": []
        }
      }
    },
    "getKeys": {
      "access": "public",
      "comment": "根据匹配模式获取键名(如*)",
      "isStatic": false,
      "return": "array",
      "example": "\n$allKeys = $redis->keys('*');\n$keyWithUserPrefix = $redis->keys('user*');",
      "parameters": {
        "pattern": {
          "comment": "匹配模式",
          "type": "string",
          "options": []
        }
      }
    },
    "keys": {
      "access": "public",
      "comment": "根据匹配模式获取键名(如*)",
      "isStatic": false,
      "return": "array",
      "example": "\n$allKeys = $redis->keys('*');\n$keyWithUserPrefix = $redis->keys('user*');",
      "parameters": {
        "pattern": {
          "comment": "匹配模式",
          "type": "string",
          "options": []
        }
      }
    },
    "exists": {
      "access": "public",
      "comment": "判断键是否存在",
      "isStatic": false,
      "return": "bool",
      "example": "\n<pre>\n$redis->set('key', 'value');\n$redis->exists('key');               \/\/  TRUE\n$redis->exists('NonExistingKey');    \/\/ FALSE\n<\/pre>",
      "parameters": {
        "key": {
          "comment": "键名",
          "type": "string",
          "options": []
        }
      }
    },
    "type": {
      "access": "public",
      "comment": "获取指定键的数据类型(需要根据常量匹配)",
      "isStatic": false,
      "return": "int",
      "example": "$redis->type('key');",
      "parameters": {
        "key": {
          "comment": "键名",
          "type": "string",
          "options": []
        }
      }
    },
    "strLen": {
      "access": "public",
      "comment": "获取键值的长度",
      "isStatic": false,
      "return": "int",
      "example": "\n<pre>\n$redis->set('key', 'value');\n$redis->strlen('key'); \/\/ 5\n<\/pre>",
      "parameters": {
        "key": {
          "comment": "键名",
          "type": "string",
          "options": []
        }
      }
    },
    "lPop": {
      "access": "public",
      "comment": "从列表左侧删除一个元素",
      "isStatic": false,
      "return": "string",
      "example": "\n<pre>\n$redis->rPush('key1', 'A');\n$redis->rPush('key1', 'B');\n$redis->rPush('key1', 'C');  \/\/ key1 => [ 'A', 'B', 'C' ]\n$redis->lPop('key1');        \/\/ key1 => [ 'B', 'C' ]\n<\/pre>",
      "parameters": {
        "key": {
          "comment": "键名",
          "type": "string",
          "options": []
        }
      }
    },
    "blPop": {
      "access": "public",
      "comment": "是一个阻塞lPop原语。 如果至少有一个列表包含至少一个元素，则该元素将从列表头部弹出并返回给调用者。 如果所有通过参数传递的键标识的列表都是空的，blPop将在指定的超时期间阻塞，直到元素被推送到其中一个列表。 这个元素将被弹出。",
      "isStatic": false,
      "return": "array",
      "example": "\n<pre>\n\/\/ Non blocking feature\n$redis->lPush('key1', 'A');\n$redis->delete('key2');\n$redis->blPop('key1', 'key2', 10); \/\/ array('key1', 'A')\n\/\/ OR\n$redis->blPop(array('key1', 'key2'), 10); \/\/ array('key1', 'A')\n$redis->brPop('key1', 'key2', 10); \/\/ array('key1', 'A')\n\/\/ OR\n$redis->brPop(array('key1', 'key2'), 10); \/\/ array('key1', 'A')\n\/\/ Blocking feature\n\/\/ process 1\n$redis->delete('key1');\n$redis->blPop('key1', 10);\n\/\/ blocking for 10 seconds\n\/\/ process 2\n$redis->lPush('key1', 'A');\n\/\/ process 1\n\/\/ array('key1', 'A') is returned\n<\/pre>",
      "parameters": {
        "key": {
          "comment": "键名",
          "type": "string|...|array",
          "options": []
        },
        "timeout": {
          "comment": "超时时间",
          "type": "int",
          "options": []
        }
      }
    },
    "rPop": {
      "access": "public",
      "comment": "从列表右侧删除一个元素",
      "isStatic": false,
      "return": "string",
      "example": "\n<pre>\n$redis->rPush('key1', 'A');\n$redis->rPush('key1', 'B');\n$redis->rPush('key1', 'C');  \/\/ key1 => [ 'A', 'B', 'C' ]\n$redis->rPop('key1');        \/\/ key1 => [ 'A', 'B' ]\n<\/pre>",
      "parameters": {
        "key": {
          "comment": "键名",
          "type": "string",
          "options": []
        }
      }
    },
    "brPop": {
      "access": "public",
      "comment": "是一个阻塞rPop原语。 如果至少有一个列表包含至少一个元素，则该元素将从列表尾部弹出并返回给调用者。 如果所有通过参数传递的键标识的列表都是空的，brPop将在指定的超时期间阻塞，直到元素被推送到其中一个列表。 这个元素将被弹出。",
      "isStatic": false,
      "return": "array",
      "example": "\n<pre>\n\/\/ Non blocking feature\n$redis->lPush('key1', 'A');\n$redis->delete('key2');\n$redis->blPop('key1', 'key2', 10); \/\/ array('key1', 'A')\n\/\/ OR\n$redis->blPop(array('key1', 'key2'), 10); \/\/ array('key1', 'A')\n$redis->brPop('key1', 'key2', 10); \/\/ array('key1', 'A')\n\/\/ OR\n$redis->brPop(array('key1', 'key2'), 10); \/\/ array('key1', 'A')\n\/\/ Blocking feature\n\/\/ process 1\n$redis->delete('key1');\n$redis->blPop('key1', 10);\n\/\/ blocking for 10 seconds\n\/\/ process 2\n$redis->lPush('key1', 'A');\n\/\/ process 1\n\/\/ array('key1', 'A') is returned\n<\/pre>",
      "parameters": {
        "key": {
          "comment": "键名",
          "type": "string|...|array",
          "options": []
        },
        "timeout": {
          "comment": "超时时间",
          "type": "int",
          "options": []
        }
      }
    },
    "bRPopLPush": {
      "access": "public",
      "comment": "阻塞执行rpoplpush",
      "isStatic": false,
      "return": "string",
      "example": "",
      "parameters": {
        "srcKey": {
          "comment": "要删除元素的队列键名",
          "type": "string",
          "options": []
        },
        "dstKey": {
          "comment": "要插入元素的队列的键名",
          "type": "string",
          "options": []
        }
      }
    },
    "lSize": {
      "access": "public",
      "comment": "返回列表的长度",
      "isStatic": false,
      "return": "long | bool",
      "example": "",
      "parameters": {
        "key": {
          "comment": "键名",
          "type": "string|...|array",
          "options": []
        }
      }
    },
    "lLen": {
      "access": "public",
      "comment": "返回列表的长度",
      "isStatic": false,
      "return": "long | bool",
      "example": "",
      "parameters": {
        "key": {
          "comment": "键名",
          "type": "string|...|array",
          "options": []
        }
      }
    },
    "sSize": {
      "access": "public",
      "comment": "返回集合的元素个数",
      "isStatic": false,
      "return": "long",
      "example": "",
      "parameters": {
        "key": {
          "comment": "键名",
          "type": "string",
          "options": []
        }
      }
    },
    "scard": {
      "access": "public",
      "comment": "返回集合的元素个数",
      "isStatic": false,
      "return": "long",
      "example": "",
      "parameters": {
        "key": {
          "comment": "键名",
          "type": "string",
          "options": []
        }
      }
    },
    "sPop": {
      "access": "public",
      "comment": "随机删除元素的某个或某些成员，并返回这个删除的成员.",
      "isStatic": false,
      "return": "string | bool",
      "example": "\n<pre>\n$redis->sAdd('key1' , 'set1');\n$redis->sAdd('key1' , 'set2');\n$redis->sAdd('key1' , 'set3');   \/\/ 'key1' => {'set3', 'set1', 'set2'}\n$redis->sPop('key1');            \/\/ 'set1', 'key1' => {'set3', 'set2'}\n$redis->sPop('key1');            \/\/ 'set3', 'key1' => {'set2'}\n<\/pre>",
      "parameters": {
        "key": {
          "comment": "键名",
          "type": "string",
          "options": []
        },
        "count": {
          "comment": "删除个数",
          "type": "int",
          "options": []
        }
      }
    },
    "sMembers": {
      "access": "public",
      "comment": "返回集合的所有成员",
      "isStatic": false,
      "return": "array",
      "example": "\n<pre>\n$redis->delete('s');\n$redis->sAdd('s', 'a');\n$redis->sAdd('s', 'b');\n$redis->sAdd('s', 'a');\n$redis->sAdd('s', 'c');\nvar_dump($redis->sMembers('s'));\n\/\/array(3) {\n\/\/  [0]=>\n\/\/  string(1) \"c\"\n\/\/  [1]=>\n\/\/  string(1) \"a\"\n\/\/  [2]=>\n\/\/  string(1) \"b\"\n\/\/}\n\/\/ The order is random and corresponds to redis' own internal representation of the set structure.\n<\/pre>",
      "parameters": {
        "key": {
          "comment": "键名",
          "type": "string",
          "options": []
        }
      }
    },
    "sGetMembers": {
      "access": "public",
      "comment": "返回集合的所有成员",
      "isStatic": false,
      "return": "array",
      "example": "\n<pre>\n$redis->delete('s');\n$redis->sAdd('s', 'a');\n$redis->sAdd('s', 'b');\n$redis->sAdd('s', 'a');\n$redis->sAdd('s', 'c');\nvar_dump($redis->sMembers('s'));\n\/\/array(3) {\n\/\/  [0]=>\n\/\/  string(1) \"c\"\n\/\/  [1]=>\n\/\/  string(1) \"a\"\n\/\/  [2]=>\n\/\/  string(1) \"b\"\n\/\/}\n\/\/ The order is random and corresponds to redis' own internal representation of the set structure.\n<\/pre>",
      "parameters": {
        "key": {
          "comment": "键名",
          "type": "string",
          "options": []
        }
      }
    },
    "sRandMember": {
      "access": "public",
      "comment": "随机返回一个集合的元素(不会删除它)",
      "isStatic": false,
      "return": "string | bool",
      "example": "\n<pre>\n$redis->sAdd('key1' , 'one');\n$redis->sAdd('key1' , 'two');\n$redis->sAdd('key1' , 'three');              \/\/ 'key1' => {'one', 'two', 'three'}\nvar_dump( $redis->sRandMember('key1') );     \/\/ 'key1' => {'one', 'two', 'three'}\n\/\/ string(5) \"three\"\nvar_dump( $redis->sRandMember('key1', 2) );  \/\/ 'key1' => {'one', 'two', 'three'}\n\/\/ array(2) {\n\/\/   [0]=> string(2) \"one\"\n\/\/   [1]=> string(2) \"three\"\n\/\/ }\n<\/pre>",
      "parameters": {
        "key": {
          "comment": "键名",
          "type": "string",
          "options": []
        }
      }
    },
    "persist": {
      "access": "public",
      "comment": "移除指定键的有效期，让它永久有效",
      "isStatic": false,
      "return": "bool:",
      "example": "$redis->persist('key');",
      "parameters": {
        "key": {
          "comment": "键名",
          "type": "string",
          "options": []
        }
      }
    },
    "ttl": {
      "access": "public",
      "comment": "返回指定键的有效时间(秒)",
      "isStatic": false,
      "return": "long",
      "example": "$redis->ttl('key');",
      "parameters": {
        "key": {
          "comment": "键名",
          "type": "string",
          "options": []
        }
      }
    },
    "pttl": {
      "access": "public",
      "comment": "返回指定键的有效时间(毫秒)",
      "isStatic": false,
      "return": "long",
      "example": "$redis->pttl('key');",
      "parameters": {
        "key": {
          "comment": "键名",
          "type": "string",
          "options": []
        }
      }
    },
    "zCard": {
      "access": "public",
      "comment": "获取有序集合的成员数",
      "isStatic": false,
      "return": "int",
      "example": "\n<pre>\n$redis->zAdd('key', 0, 'val0');\n$redis->zAdd('key', 2, 'val2');\n$redis->zAdd('key', 10, 'val10');\n$redis->zCard('key');            \/\/ 3\n<\/pre>",
      "parameters": {
        "key": {
          "comment": "集合键名",
          "type": "string",
          "options": []
        }
      }
    },
    "zSize": {
      "access": "public",
      "comment": "获取有序集合的成员数",
      "isStatic": false,
      "return": "int",
      "example": "\n<pre>\n$redis->zAdd('key', 0, 'val0');\n$redis->zAdd('key', 2, 'val2');\n$redis->zAdd('key', 10, 'val10');\n$redis->zCard('key');            \/\/ 3\n<\/pre>",
      "parameters": {
        "key": {
          "comment": "集合键名",
          "type": "string",
          "options": []
        }
      }
    },
    "hLen": {
      "access": "public",
      "comment": "获取字典的字段个数",
      "isStatic": false,
      "return": "int",
      "example": "\n<pre>\n$redis->delete('h')\n$redis->hSet('h', 'key1', 'hello');\n$redis->hSet('h', 'key2', 'plop');\n$redis->hLen('h'); \/\/ returns 2\n<\/pre>",
      "parameters": {
        "key": {
          "comment": "键名",
          "type": "string",
          "options": []
        }
      }
    },
    "hKeys": {
      "access": "public",
      "comment": "获取字典的字段名称列表.",
      "isStatic": false,
      "return": "array",
      "example": "\n<pre>\n$redis->delete('h');\n$redis->hSet('h', 'a', 'x');\n$redis->hSet('h', 'b', 'y');\n$redis->hSet('h', 'c', 'z');\n$redis->hSet('h', 'd', 't');\nvar_dump($redis->hKeys('h'));\n\/\/ Output:\n\/\/ array(4) {\n\/\/ [0]=>\n\/\/ string(1) \"a\"\n\/\/ [1]=>\n\/\/ string(1) \"b\"\n\/\/ [2]=>\n\/\/ string(1) \"c\"\n\/\/ [3]=>\n\/\/ string(1) \"d\"\n\/\/ }\n\/\/ The order is random and corresponds to redis' own internal representation of the set structure.\n<\/pre>",
      "parameters": {
        "key": {
          "comment": "键名",
          "type": "string",
          "options": []
        }
      }
    },
    "hVals": {
      "access": "public",
      "comment": "获取字典的字段值列表",
      "isStatic": false,
      "return": "array",
      "example": "\n<pre>\n$redis->delete('h');\n$redis->hSet('h', 'a', 'x');\n$redis->hSet('h', 'b', 'y');\n$redis->hSet('h', 'c', 'z');\n$redis->hSet('h', 'd', 't');\nvar_dump($redis->hVals('h'));\n\/\/ Output\n\/\/ array(4) {\n\/\/   [0]=>\n\/\/   string(1) \"x\"\n\/\/   [1]=>\n\/\/   string(1) \"y\"\n\/\/   [2]=>\n\/\/   string(1) \"z\"\n\/\/   [3]=>\n\/\/   string(1) \"t\"\n\/\/ }\n\/\/ The order is random and corresponds to redis' own internal representation of the set structure.\n<\/pre>",
      "parameters": {
        "key": {
          "comment": "键名",
          "type": "string",
          "options": []
        }
      }
    },
    "hGetAll": {
      "access": "public",
      "comment": "获取字典所有字段键值对",
      "isStatic": false,
      "return": "array",
      "example": "\n<pre>\n$redis->delete('h');\n$redis->hSet('h', 'a', 'x');\n$redis->hSet('h', 'b', 'y');\n$redis->hSet('h', 'c', 'z');\n$redis->hSet('h', 'd', 't');\nvar_dump($redis->hGetAll('h'));\n\/\/ Output:\n\/\/ array(4) {\n\/\/   [\"a\"]=>\n\/\/   string(1) \"x\"\n\/\/   [\"b\"]=>\n\/\/   string(1) \"y\"\n\/\/   [\"c\"]=>\n\/\/   string(1) \"z\"\n\/\/   [\"d\"]=>\n\/\/   string(1) \"t\"\n\/\/ }\n\/\/ The order is random and corresponds to redis' own internal representation of the set structure.\n<\/pre>",
      "parameters": {
        "key": {
          "comment": "键名",
          "type": "string",
          "options": []
        }
      }
    },
    "debug": {
      "access": "public",
      "comment": "调试命令(不建议使用)",
      "isStatic": false,
      "return": "",
      "example": "",
      "parameters": []
    },
    "restore": {
      "access": "public",
      "comment": "将dump导出的二进制数据恢复到可读的字符串.",
      "isStatic": false,
      "return": "",
      "example": "\n<pre>\n$redis->set('foo', 'bar');\n$val = $redis->dump('foo');\n$redis->restore('bar', 0, $val); \/\/ The key 'bar', will now be equal to the key 'foo'\n<\/pre>",
      "parameters": {
        "key": {
          "comment": "键名",
          "type": "string",
          "options": []
        },
        "ttl": {
          "comment": "有效期",
          "type": "int",
          "options": []
        },
        "value": {
          "comment": "dump导出的二进制数据",
          "type": "string",
          "options": []
        }
      }
    },
    "dump": {
      "access": "public",
      "comment": "将某个键导出为一个二进制数据.",
      "isStatic": false,
      "return": "string",
      "example": "\n<pre>\n$redis->set('foo', 'bar');\n$val = $redis->dump('foo'); \/\/ $val will be the Redis encoded key value\n<\/pre>",
      "parameters": {
        "key": {
          "comment": "键名",
          "type": "string",
          "options": []
        }
      }
    },
    "renameKey": {
      "access": "public",
      "comment": "给键重命名",
      "isStatic": false,
      "return": "boolean",
      "example": "",
      "parameters": {
        "srcKey": {
          "comment": "旧键名",
          "type": "string",
          "options": []
        },
        "dstKey": {
          "comment": "新键名",
          "type": "string",
          "options": []
        }
      }
    },
    "rename": {
      "access": "public",
      "comment": "给键重命名",
      "isStatic": false,
      "return": "boolean",
      "example": "",
      "parameters": {
        "srcKey": {
          "comment": "旧键名",
          "type": "string",
          "options": []
        },
        "dstKey": {
          "comment": "新键名",
          "type": "string",
          "options": []
        }
      }
    },
    "renameNx": {
      "access": "public",
      "comment": "当目标键名不存在时，给键重命名",
      "isStatic": false,
      "return": "boolean",
      "example": "",
      "parameters": {
        "srcKey": {
          "comment": "旧键名",
          "type": "string",
          "options": []
        },
        "dstKey": {
          "comment": "新键名",
          "type": "string",
          "options": []
        }
      }
    },
    "rpoplpush": {
      "access": "public",
      "comment": "从一个队列的队尾删除一个元素，并将该元素插入到另一个队列的头部",
      "isStatic": false,
      "return": "string",
      "example": "\n<pre>\n$redis->delete('x', 'y');\n$redis->lPush('x', 'abc');\n$redis->lPush('x', 'def');\n$redis->lPush('y', '123');\n$redis->lPush('y', '456');\n\/\/ move the last of x to the front of y.\nvar_dump($redis->rpoplpush('x', 'y'));\nvar_dump($redis->lRange('x', 0, -1));\nvar_dump($redis->lRange('y', 0, -1));\n\/\/Output:\n\/\/\n\/\/string(3) \"abc\"\n\/\/array(1) {\n\/\/  [0]=>\n\/\/  string(3) \"def\"\n\/\/}\n\/\/array(3) {\n\/\/  [0]=>\n\/\/  string(3) \"abc\"\n\/\/  [1]=>\n\/\/  string(3) \"456\"\n\/\/  [2]=>\n\/\/  string(3) \"123\"\n\/\/}\n<\/pre>",
      "parameters": {
        "srcKey": {
          "comment": "要删除元素的队列键名",
          "type": "string",
          "options": []
        },
        "dstKey": {
          "comment": "要插入元素的队列的键名",
          "type": "string",
          "options": []
        }
      }
    },
    "randomKey": {
      "access": "public",
      "comment": "返回一个随机的键",
      "isStatic": false,
      "return": "string",
      "example": "\n<pre>\n$key = $redis->randomKey();\n$surprise = $redis->get($key);  \/\/ who knows what's in there.\n<\/pre>",
      "parameters": []
    },
    "ping": {
      "access": "public",
      "comment": "检查当前redis连接状态(成功时返回PONG)",
      "isStatic": false,
      "return": "string",
      "example": "",
      "parameters": []
    },
    "auth": {
      "access": "public",
      "comment": "设置连接的认证密码",
      "isStatic": false,
      "return": "bool:",
      "example": "$redis->auth('foobared');",
      "parameters": {
        "password": {
          "comment": "认证密码",
          "type": "string",
          "options": []
        }
      }
    },
    "unwatch": {
      "access": "public",
      "comment": "取消观察某个键在其他客户端的变化情况",
      "isStatic": false,
      "return": "",
      "example": "",
      "parameters": {
        "keys": {
          "comment": "键名",
          "type": "string|array",
          "options": []
        }
      }
    },
    "watch": {
      "access": "public",
      "comment": "观察某个键在其他客户端的变化情况.",
      "isStatic": false,
      "return": "",
      "example": "\n<pre>\n$redis->watch('x');\n\/\/ long code here during the execution of which other clients could well modify `x`\n$ret = $redis->multi()\n->incr('x')\n->exec();\n\/\/ $ret = FALSE if x has been modified between the call to WATCH and the call to EXEC.\n<\/pre>",
      "parameters": {
        "keys": {
          "comment": "键名",
          "type": "string|array",
          "options": []
        }
      }
    },
    "save": {
      "access": "public",
      "comment": "将数据同步到硬盘上",
      "isStatic": false,
      "return": "boolean",
      "example": "$redis->save();",
      "parameters": []
    },
    "bgSave": {
      "access": "public",
      "comment": "将数据存入到硬盘上(异步操作)",
      "isStatic": false,
      "return": "",
      "example": "",
      "parameters": []
    },
    "lastSave": {
      "access": "public",
      "comment": "获取上次数据同步到硬盘的时间",
      "isStatic": false,
      "return": "int",
      "example": "$redis->lastSave();",
      "parameters": []
    },
    "flushDB": {
      "access": "public",
      "comment": "删除当前数据库的所有键",
      "isStatic": false,
      "return": "bool",
      "example": "$redis->flushDB();",
      "parameters": []
    },
    "flushAll": {
      "access": "public",
      "comment": "删除当前实例的所有键",
      "isStatic": false,
      "return": "bool",
      "example": "$redis->flushAll();",
      "parameters": []
    },
    "dbSize": {
      "access": "public",
      "comment": "获取当前数据库的键的个数",
      "isStatic": false,
      "return": "int",
      "example": "\n<pre>\n$count = $redis->dbSize();\necho \"Redis has $count keys\\n\";\n<\/pre>",
      "parameters": []
    },
    "bgrewriteaof": {
      "access": "public",
      "comment": "开启后台写AOF日志操作",
      "isStatic": false,
      "return": "bool",
      "example": "$redis->bgrewriteaof();",
      "parameters": []
    },
    "time": {
      "access": "public",
      "comment": "返回当前redis服务器时间.",
      "isStatic": false,
      "return": "int",
      "example": "\n<pre>\nvar_dump( $redis->time() );\n\/\/ array(2) {\n\/\/   [0] => string(10) \"1342364352\"\n\/\/   [1] => string(6) \"253002\"\n\/\/ }\n<\/pre>",
      "parameters": []
    },
    "role": {
      "access": "public",
      "comment": "返回当前连接的服务器的角色，如master、alone、slave、sentinel",
      "isStatic": false,
      "return": "string",
      "example": "",
      "parameters": []
    },
    "setRange": {
      "access": "public",
      "comment": "修改某个键的某个位置的值",
      "isStatic": false,
      "return": "string",
      "example": "\n<pre>\n$redis->set('key', 'Hello world');\n$redis->setRange('key', 6, \"redis\"); \/\/ returns 11\n$redis->get('key');                  \/\/ \"Hello redis\"\n<\/pre>",
      "parameters": {
        "key": {
          "comment": "键名",
          "type": "string",
          "options": []
        },
        "offset": {
          "comment": "开始位置",
          "type": "int",
          "options": []
        },
        "value": {
          "comment": "被替换的子串的值",
          "type": "string",
          "options": []
        }
      }
    },
    "setNx": {
      "access": "public",
      "comment": "当键不存在时设置其值",
      "isStatic": false,
      "return": "bool:",
      "example": "\n$redis->setnx('key', 'value');\n",
      "parameters": {
        "key": {
          "comment": "设置的缓存键",
          "type": "string",
          "options": []
        },
        "value": {
          "comment": "设置的缓存值",
          "type": "string",
          "options": []
        }
      }
    },
    "getSet": {
      "access": "public",
      "comment": "设置键的值，并返回它的旧的缓存值",
      "isStatic": false,
      "return": "string",
      "example": "\n<pre>\n$redis->set('x', '42');\n$exValue = $redis->getSet('x', 'lol');   \/\/ return '42', replaces x by 'lol'\n$newValue = $redis->get('x')'            \/\/ return 'lol'\n<\/pre>",
      "parameters": {
        "key": {
          "comment": "设置的缓存键",
          "type": "string",
          "options": []
        },
        "value": {
          "comment": "设置的缓存值",
          "type": "string",
          "options": []
        }
      }
    },
    "append": {
      "access": "public",
      "comment": "将字符串追加到键值后(返回值的长度)",
      "isStatic": false,
      "return": "int",
      "example": "\n<pre>\n$redis->set('key', 'value1');\n$redis->append('key', 'value2'); \/\/ 12\n$redis->get('key');              \/\/ 'value1value2'\n<\/pre>",
      "parameters": {
        "key": {
          "comment": "键名",
          "type": "string",
          "options": []
        },
        "value": {
          "comment": "追加的值",
          "type": "string",
          "options": []
        }
      }
    },
    "lPushx": {
      "access": "public",
      "comment": "如果列表存在，从左侧(头部)向列表插入元素",
      "isStatic": false,
      "return": "int",
      "example": "\n<pre>\n$redis->delete('key1');\n$redis->lPushx('key1', 'A');     \/\/ returns 0\n$redis->lPush('key1', 'A');      \/\/ returns 1\n$redis->lPushx('key1', 'B');     \/\/ returns 2\n$redis->lPushx('key1', 'C');     \/\/ returns 3\n\/\/ key1 now points to the following list: [ 'A', 'B', 'C' ]\n<\/pre>",
      "parameters": {
        "key": {
          "comment": "键名",
          "type": "string",
          "options": []
        },
        "value": {
          "comment": "元素值",
          "type": "string",
          "options": []
        }
      }
    },
    "lPush": {
      "access": "public",
      "comment": "从左侧(头部)向列表插入元素",
      "isStatic": false,
      "return": "int",
      "example": "\n<pre>\n$redis->lPush('l', 'v1', 'v2', 'v3', 'v4')   \/\/ int(4)\nvar_dump( $redis->lRange('l', 0, -1) );\n\/\/\/\/ Output:\n\/\/ array(4) {\n\/\/   [0]=> string(2) \"v4\"\n\/\/   [1]=> string(2) \"v3\"\n\/\/   [2]=> string(2) \"v2\"\n\/\/   [3]=> string(2) \"v1\"\n\/\/ }\n<\/pre>",
      "parameters": {
        "key": {
          "comment": "键名",
          "type": "string",
          "options": []
        },
        "value": {
          "comment": "元素值",
          "type": "string",
          "options": []
        }
      }
    },
    "rPush": {
      "access": "public",
      "comment": "从右侧(尾部)向列表插入元素",
      "isStatic": false,
      "return": "int",
      "example": "\n<pre>\n$redis->rPush('l', 'v1', 'v2', 'v3', 'v4');    \/\/ int(4)\nvar_dump( $redis->lRange('l', 0, -1) );\n\/\/\/\/ Output:\n\/\/ array(4) {\n\/\/   [0]=> string(2) \"v1\"\n\/\/   [1]=> string(2) \"v2\"\n\/\/   [2]=> string(2) \"v3\"\n\/\/   [3]=> string(2) \"v4\"\n\/\/ }\n<\/pre>",
      "parameters": {
        "key": {
          "comment": "键名",
          "type": "string",
          "options": []
        },
        "value": {
          "comment": "元素值",
          "type": "string",
          "options": []
        }
      }
    },
    "rPushx": {
      "access": "public",
      "comment": "如果列表存在，从右侧(尾部)向列表插入元素",
      "isStatic": false,
      "return": "int",
      "example": "\n<pre>\n$redis->delete('key1');\n$redis->rPushx('key1', 'A'); \/\/ returns 0\n$redis->rPush('key1', 'A'); \/\/ returns 1\n$redis->rPushx('key1', 'B'); \/\/ returns 2\n$redis->rPushx('key1', 'C'); \/\/ returns 3\n\/\/ key1 now points to the following list: [ 'A', 'B', 'C' ]\n<\/pre>",
      "parameters": {
        "key": {
          "comment": "键名",
          "type": "string",
          "options": []
        },
        "value": {
          "comment": "元素值",
          "type": "string",
          "options": []
        }
      }
    },
    "sContains": {
      "access": "public",
      "comment": "是否包含某个成员",
      "isStatic": false,
      "return": "boolean",
      "example": "",
      "parameters": {
        "key": {
          "comment": "键名",
          "type": "string",
          "options": []
        },
        "member": {
          "comment": "成员值",
          "type": "string",
          "options": []
        }
      }
    },
    "sismember": {
      "access": "public",
      "comment": "是否包含某个成员",
      "isStatic": false,
      "return": "boolean",
      "example": "",
      "parameters": {
        "key": {
          "comment": "键名",
          "type": "string",
          "options": []
        },
        "member": {
          "comment": "成员值",
          "type": "string",
          "options": []
        }
      }
    },
    "zScore": {
      "access": "public",
      "comment": "获取指定成员的排序值(分数)",
      "isStatic": false,
      "return": "double",
      "example": "\n<pre>\n$redis->zAdd('key', 2.5, 'val2');\n$redis->zScore('key', 'val2'); \/\/ 2.5\n<\/pre>",
      "parameters": {
        "key": {
          "comment": "集合键名",
          "type": "string",
          "options": []
        },
        "member": {
          "comment": "成员值",
          "type": "string",
          "options": []
        }
      }
    },
    "zRank": {
      "access": "public",
      "comment": "获取成员的排序值",
      "isStatic": false,
      "return": "int",
      "example": "\n<pre>\n$redis->delete('z');\n$redis->zAdd('key', 1, 'one');\n$redis->zAdd('key', 2, 'two');\n$redis->zRank('key', 'one');     \/\/ 0\n$redis->zRank('key', 'two');     \/\/ 1\n$redis->zRevRank('key', 'one');  \/\/ 1\n$redis->zRevRank('key', 'two');  \/\/ 0\n<\/pre>",
      "parameters": {
        "key": {
          "comment": "集合键名",
          "type": "string",
          "options": []
        },
        "member": {
          "comment": "成员值",
          "type": "string",
          "options": []
        }
      }
    },
    "zRevRank": {
      "access": "public",
      "comment": "获取成员的排位值(倒数)",
      "isStatic": false,
      "return": "int",
      "example": "",
      "parameters": {
        "key": {
          "comment": "集合键名",
          "type": "string",
          "options": []
        },
        "member": {
          "comment": "成员值",
          "type": "string",
          "options": []
        }
      }
    },
    "hGet": {
      "access": "public",
      "comment": "获取字典的某个字段的值",
      "isStatic": false,
      "return": "string",
      "example": "",
      "parameters": {
        "key": {
          "comment": "键名",
          "type": "string",
          "options": []
        },
        "field": {
          "comment": "字段名",
          "type": "string",
          "options": []
        }
      }
    },
    "hMGet": {
      "access": "public",
      "comment": "批量获取字典的字段值",
      "isStatic": false,
      "return": "array",
      "example": "",
      "parameters": {
        "key": {
          "comment": "键名",
          "type": "string",
          "options": []
        },
        "fields": {
          "comment": "字段名列表",
          "type": "array",
          "options": []
        }
      }
    },
    "hExists": {
      "access": "public",
      "comment": "判断字典的某个字段是否存在.",
      "isStatic": false,
      "return": "bool",
      "example": "\n<pre>\n$redis->hSet('h', 'a', 'x');\n$redis->hExists('h', 'a');               \/\/  TRUE\n$redis->hExists('h', 'NonExistingKey');  \/\/ FALSE\n<\/pre>",
      "parameters": {
        "key": {
          "comment": "键名",
          "type": "string",
          "options": []
        },
        "field": {
          "comment": "字段名",
          "type": "string",
          "options": []
        }
      }
    },
    "publish": {
      "access": "public",
      "comment": "将消息发布到消息通道(队列).",
      "isStatic": false,
      "return": "int",
      "example": "$redis->publish('chan-1', 'hello, world!'); \/\/ send message.",
      "parameters": {
        "channel": {
          "comment": "消息频道",
          "type": "string",
          "options": []
        },
        "message": {
          "comment": "消息",
          "type": "string",
          "options": []
        }
      }
    },
    "zIncrBy": {
      "access": "public",
      "comment": "给有序集合成员增加排序值",
      "isStatic": false,
      "return": "float",
      "example": "\n<pre>\n$redis->delete('key');\n$redis->zIncrBy('key', 2.5, 'member1');  \/\/ key or member1 didn't exist, so member1's score is to 0\n\/\/ before the increment and now has the value 2.5\n$redis->zIncrBy('key', 1, 'member1');    \/\/ 3.5\n<\/pre>",
      "parameters": {
        "key": {
          "comment": "目标集合键名",
          "type": "string",
          "options": []
        },
        "step": {
          "comment": "增加的步长",
          "type": "double",
          "options": []
        },
        "member": {
          "comment": "成员",
          "type": "string",
          "options": []
        }
      }
    },
    "zAdd": {
      "access": "public",
      "comment": "向有序集合插入元素",
      "isStatic": false,
      "return": "int",
      "example": "\n<pre>\n<pre>\n$redis->zAdd('z', 1, 'v2', 2, 'v2', 3, 'v3', 4, 'v4' );  \/\/ int(2)\n$redis->zRem('z', 'v2', 'v3');                           \/\/ int(2)\nvar_dump( $redis->zRange('z', 0, -1) );\n\/\/\/\/ Output:\n\/\/ array(2) {\n\/\/   [0]=> string(2) \"v1\"\n\/\/   [1]=> string(2) \"v4\"\n\/\/ }\n<\/pre>\n<\/pre>",
      "parameters": {
        "key": {
          "comment": "集合键名",
          "type": "string",
          "options": []
        },
        "score": {
          "comment": "排序值",
          "type": "double",
          "options": []
        },
        "value": {
          "comment": "元素值",
          "type": "string",
          "options": []
        }
      }
    },
    "zDeleteRangeByScore": {
      "access": "public",
      "comment": "根据排序值范围来删除成员",
      "isStatic": false,
      "return": "long",
      "example": "",
      "parameters": {
        "key": {
          "comment": "集合键名",
          "type": "string",
          "options": []
        },
        "start": {
          "comment": "开始排序值",
          "type": "double",
          "options": []
        },
        "end": {
          "comment": "结束排序值",
          "type": "double",
          "options": []
        }
      }
    },
    "zRemRangeByScore": {
      "access": "public",
      "comment": "根据排序值范围来删除成员",
      "isStatic": false,
      "return": "long",
      "example": "",
      "parameters": {
        "key": {
          "comment": "集合键名",
          "type": "string",
          "options": []
        },
        "start": {
          "comment": "开始排序值",
          "type": "double",
          "options": []
        },
        "end": {
          "comment": "结束排序值",
          "type": "double",
          "options": []
        }
      }
    },
    "zCount": {
      "access": "public",
      "comment": "获取指定排序范围的成员数.",
      "isStatic": false,
      "return": "int",
      "example": "\n<pre>\n$redis->zAdd('key', 0, 'val0');\n$redis->zAdd('key', 2, 'val2');\n$redis->zAdd('key', 10, 'val10');\n$redis->zCount('key', 0, 3); \/\/ 2, corresponding to array('val0', 'val2')\n<\/pre>",
      "parameters": {
        "key": {
          "comment": "集合键名",
          "type": "string",
          "options": []
        },
        "start": {
          "comment": "开始排序值",
          "type": "double",
          "options": []
        },
        "end": {
          "comment": "结束排序值",
          "type": "double",
          "options": []
        }
      }
    },
    "zRange": {
      "access": "public",
      "comment": "获取有序集合中指定范围的成员",
      "isStatic": false,
      "return": "array",
      "example": "\n<pre>\n$redis->zAdd('key1', 0, 'val0');\n$redis->zAdd('key1', 2, 'val2');\n$redis->zAdd('key1', 10, 'val10');\n$redis->zRange('key1', 0, -1); \/\/ array('val0', 'val2', 'val10')\n\/\/ with scores\n$redis->zRange('key1', 0, -1, true); \/\/ array('val0' => 0, 'val2' => 2, 'val10' => 10)\n<\/pre>",
      "parameters": {
        "key": {
          "comment": "集合键名",
          "type": "string",
          "options": []
        },
        "start": {
          "comment": "索引开始值",
          "type": "long",
          "options": []
        },
        "end": {
          "comment": "索引结束值",
          "type": "long",
          "options": []
        },
        "withScores": {
          "comment": "是否返回成员的排序值",
          "type": "boolean",
          "options": []
        }
      }
    },
    "zRevRange": {
      "access": "public",
      "comment": "获取有序集合中指定范围的成员(倒序排列)",
      "isStatic": false,
      "return": "array",
      "example": "\n<pre>\n$redis->zAdd('key', 0, 'val0');\n$redis->zAdd('key', 2, 'val2');\n$redis->zAdd('key', 10, 'val10');\n$redis->zRevRange('key', 0, -1); \/\/ array('val10', 'val2', 'val0')\n\/\/ with scores\n$redis->zRevRange('key', 0, -1, true); \/\/ array('val10' => 10, 'val2' => 2, 'val0' => 0)\n<\/pre>",
      "parameters": {
        "key": {
          "comment": "集合键名",
          "type": "string",
          "options": []
        },
        "start": {
          "comment": "索引开始值",
          "type": "long",
          "options": []
        },
        "end": {
          "comment": "索引结束值",
          "type": "long",
          "options": []
        },
        "withScores": {
          "comment": "是否返回成员的排序值",
          "type": "boolean",
          "options": []
        }
      }
    },
    "zRangeByScore": {
      "access": "public",
      "comment": "获取有序集合中指定范围的成员(按排序值排列)",
      "isStatic": false,
      "return": "array",
      "example": "\n<pre>\n$redis->zAdd('key', 0, 'val0');\n$redis->zAdd('key', 2, 'val2');\n$redis->zAdd('key', 10, 'val10');\n$redis->zRangeByScore('key', 0, 3);                                          \/\/ array('val0', 'val2')\n$redis->zRangeByScore('key', 0, 3, array('withscores' => TRUE);              \/\/ array('val0' => 0, 'val2' => 2)\n$redis->zRangeByScore('key', 0, 3, array('limit' => array(1, 1));                        \/\/ array('val2' => 2)\n$redis->zRangeByScore('key', 0, 3, array('limit' => array(1, 1));                        \/\/ array('val2')\n$redis->zRangeByScore('key', 0, 3, array('withscores' => TRUE, 'limit' => array(1, 1));  \/\/ array('val2' => 2)\n<\/pre>",
      "parameters": {
        "key": {
          "comment": "集合键名",
          "type": "string",
          "options": []
        },
        "start": {
          "comment": "索引开始值",
          "type": "long",
          "options": []
        },
        "end": {
          "comment": "索引结束值",
          "type": "long",
          "options": []
        },
        "options": {
          "comment": "附加选项(可以是：withscores => TRUE, and limit => array($offset, $count))",
          "type": "array",
          "options": []
        }
      }
    },
    "zRevRangeByScore": {
      "access": "public",
      "comment": "获取有序集合中指定范围的成员(按排序值倒序排列)",
      "isStatic": false,
      "return": "array",
      "example": "\n<pre>\n$redis->zAdd('key', 0, 'val0');\n$redis->zAdd('key', 2, 'val2');\n$redis->zAdd('key', 10, 'val10');\n$redis->zRangeByScore('key', 0, 3);                                          \/\/ array('val0', 'val2')\n$redis->zRangeByScore('key', 0, 3, array('withscores' => TRUE);              \/\/ array('val0' => 0, 'val2' => 2)\n$redis->zRangeByScore('key', 0, 3, array('limit' => array(1, 1));                        \/\/ array('val2' => 2)\n$redis->zRangeByScore('key', 0, 3, array('limit' => array(1, 1));                        \/\/ array('val2')\n$redis->zRangeByScore('key', 0, 3, array('withscores' => TRUE, 'limit' => array(1, 1));  \/\/ array('val2' => 2)\n<\/pre>",
      "parameters": {
        "key": {
          "comment": "集合键名",
          "type": "string",
          "options": []
        },
        "start": {
          "comment": "索引开始值",
          "type": "long",
          "options": []
        },
        "end": {
          "comment": "索引结束值",
          "type": "long",
          "options": []
        },
        "options": {
          "comment": "附加选项(可以是：withscores => TRUE, and limit => array($offset, $count))",
          "type": "array",
          "options": []
        }
      }
    },
    "zRangeByLex": {
      "access": "public",
      "comment": "按字母字典的顺序返回成员",
      "isStatic": false,
      "return": "array",
      "example": "\n<pre>\nforeach (array('a', 'b', 'c', 'd', 'e', 'f', 'g') as $char) {\n$redis->zAdd('key', $char);\n}\n$redis->zRangeByLex('key', '-', '[c'); \/\/ array('a', 'b', 'c')\n$redis->zRangeByLex('key', '-', '(c'); \/\/ array('a', 'b')\n$redis->zRangeByLex('key', '-', '[c'); \/\/ array('b', 'c')\n<\/pre>",
      "parameters": {
        "key": {
          "comment": "集合键名",
          "type": "string",
          "options": []
        },
        "min": {
          "comment": "最小的字母",
          "type": "long",
          "options": []
        },
        "max": {
          "comment": "最大的字母",
          "type": "long",
          "options": []
        },
        "offset": {
          "comment": "索引开始值",
          "type": "long",
          "options": []
        },
        "limit": {
          "comment": "成员数",
          "type": "long",
          "options": []
        }
      }
    },
    "zRevRangeByLex": {
      "access": "public",
      "comment": "按字母字典的顺序返回成员（倒序排序）",
      "isStatic": false,
      "return": "",
      "example": "",
      "parameters": {
        "key": {
          "comment": "集合键名",
          "type": "string",
          "options": []
        },
        "min": {
          "comment": "最小的字母",
          "type": "long",
          "options": []
        },
        "max": {
          "comment": "最大的字母",
          "type": "long",
          "options": []
        },
        "offset": {
          "comment": "索引开始值",
          "type": "long",
          "options": []
        },
        "limit": {
          "comment": "成员数",
          "type": "long",
          "options": []
        }
      }
    },
    "zInter": {
      "access": "public",
      "comment": "将两个有序集合的交集存入到一个指定的键中",
      "isStatic": false,
      "return": "int",
      "example": "\n<pre>\n$redis->delete('k1');\n$redis->delete('k2');\n$redis->delete('k3');\n$redis->delete('ko1');\n$redis->delete('ko2');\n$redis->delete('ko3');\n$redis->delete('ko4');\n$redis->zAdd('k1', 0, 'val0');\n$redis->zAdd('k1', 1, 'val1');\n$redis->zAdd('k1', 3, 'val3');\n$redis->zAdd('k2', 2, 'val1');\n$redis->zAdd('k2', 3, 'val3');\n$redis->zInter('ko1', array('k1', 'k2'));               \/\/ 2, 'ko1' => array('val1', 'val3')\n$redis->zInter('ko2', array('k1', 'k2'), array(1, 1));  \/\/ 2, 'ko2' => array('val1', 'val3')\n\/\/ Weighted zInter\n$redis->zInter('ko3', array('k1', 'k2'), array(1, 5), 'min'); \/\/ 2, 'ko3' => array('val1', 'val3')\n$redis->zInter('ko4', array('k1', 'k2'), array(1, 5), 'max'); \/\/ 2, 'ko4' => array('val3', 'val1')\n<\/pre>",
      "parameters": {
        "dstKey": {
          "comment": "目标集合键名",
          "type": "string",
          "options": []
        },
        "zsetKeys": {
          "comment": "集合键名",
          "type": "array",
          "options": []
        },
        "zsetKeysWeight": {
          "comment": "集合键对应的权重",
          "type": "array",
          "options": []
        },
        "aggregateFunction": {
          "comment": "合并使用的函数(SUM, MIN, 或 MAX)",
          "type": "string",
          "options": []
        }
      }
    },
    "zinterstore": {
      "access": "public",
      "comment": "将两个有序集合的交集存入到一个指定的键中",
      "isStatic": false,
      "return": "int",
      "example": "\n<pre>\n$redis->delete('k1');\n$redis->delete('k2');\n$redis->delete('k3');\n$redis->delete('ko1');\n$redis->delete('ko2');\n$redis->delete('ko3');\n$redis->delete('ko4');\n$redis->zAdd('k1', 0, 'val0');\n$redis->zAdd('k1', 1, 'val1');\n$redis->zAdd('k1', 3, 'val3');\n$redis->zAdd('k2', 2, 'val1');\n$redis->zAdd('k2', 3, 'val3');\n$redis->zInter('ko1', array('k1', 'k2'));               \/\/ 2, 'ko1' => array('val1', 'val3')\n$redis->zInter('ko2', array('k1', 'k2'), array(1, 1));  \/\/ 2, 'ko2' => array('val1', 'val3')\n\/\/ Weighted zInter\n$redis->zInter('ko3', array('k1', 'k2'), array(1, 5), 'min'); \/\/ 2, 'ko3' => array('val1', 'val3')\n$redis->zInter('ko4', array('k1', 'k2'), array(1, 5), 'max'); \/\/ 2, 'ko4' => array('val3', 'val1')\n<\/pre>",
      "parameters": {
        "dstKey": {
          "comment": "目标集合键名",
          "type": "string",
          "options": []
        },
        "zsetKeys": {
          "comment": "集合键名",
          "type": "array",
          "options": []
        },
        "zsetKeysWeight": {
          "comment": "集合键对应的权重",
          "type": "array",
          "options": []
        },
        "aggregateFunction": {
          "comment": "合并使用的函数(SUM, MIN, 或 MAX)",
          "type": "string",
          "options": []
        }
      }
    },
    "zUnion": {
      "access": "public",
      "comment": "将两个有序集合的并集存入到一个指定的键中",
      "isStatic": false,
      "return": "int",
      "example": "\n<pre>\n$redis->delete('k1');\n$redis->delete('k2');\n$redis->delete('k3');\n$redis->delete('ko1');\n$redis->delete('ko2');\n$redis->delete('ko3');\n$redis->zAdd('k1', 0, 'val0');\n$redis->zAdd('k1', 1, 'val1');\n$redis->zAdd('k2', 2, 'val2');\n$redis->zAdd('k2', 3, 'val3');\n$redis->zUnion('ko1', array('k1', 'k2')); \/\/ 4, 'ko1' => array('val0', 'val1', 'val2', 'val3')\n\/\/ Weighted zUnion\n$redis->zUnion('ko2', array('k1', 'k2'), array(1, 1)); \/\/ 4, 'ko2' => array('val0', 'val1', 'val2', 'val3')\n$redis->zUnion('ko3', array('k1', 'k2'), array(5, 1)); \/\/ 4, 'ko3' => array('val0', 'val2', 'val3', 'val1')\n<\/pre>",
      "parameters": {
        "dstKey": {
          "comment": "目标集合键名",
          "type": "string",
          "options": []
        },
        "zsetKeys": {
          "comment": "集合键名",
          "type": "array",
          "options": []
        },
        "zsetKeysWeight": {
          "comment": "集合键对应的权重",
          "type": "array",
          "options": []
        },
        "aggregateFunction": {
          "comment": "合并使用的函数(SUM, MIN, 或 MAX)",
          "type": "string",
          "options": []
        }
      }
    },
    "zunionstore": {
      "access": "public",
      "comment": "将两个有序集合的并集存入到一个指定的键中",
      "isStatic": false,
      "return": "int",
      "example": "\n<pre>\n$redis->delete('k1');\n$redis->delete('k2');\n$redis->delete('k3');\n$redis->delete('ko1');\n$redis->delete('ko2');\n$redis->delete('ko3');\n$redis->zAdd('k1', 0, 'val0');\n$redis->zAdd('k1', 1, 'val1');\n$redis->zAdd('k2', 2, 'val2');\n$redis->zAdd('k2', 3, 'val3');\n$redis->zUnion('ko1', array('k1', 'k2')); \/\/ 4, 'ko1' => array('val0', 'val1', 'val2', 'val3')\n\/\/ Weighted zUnion\n$redis->zUnion('ko2', array('k1', 'k2'), array(1, 1)); \/\/ 4, 'ko2' => array('val0', 'val1', 'val2', 'val3')\n$redis->zUnion('ko3', array('k1', 'k2'), array(5, 1)); \/\/ 4, 'ko3' => array('val0', 'val2', 'val3', 'val1')\n<\/pre>",
      "parameters": {
        "dstKey": {
          "comment": "目标集合键名",
          "type": "string",
          "options": []
        },
        "zsetKeys": {
          "comment": "集合键名",
          "type": "array",
          "options": []
        },
        "zsetKeysWeight": {
          "comment": "集合键对应的权重",
          "type": "array",
          "options": []
        },
        "aggregateFunction": {
          "comment": "合并使用的函数(SUM, MIN, 或 MAX)",
          "type": "string",
          "options": []
        }
      }
    },
    "incrBy": {
      "access": "public",
      "comment": "按指定步长自增",
      "isStatic": false,
      "return": "int",
      "example": "\n<pre>\n$redis->incr('key1');        \/\/ key1 didn't exists, set to 0 before the increment and now has the value 1\n$redis->incr('key1');        \/\/ 2\n$redis->incr('key1');        \/\/ 3\n$redis->incr('key1');        \/\/ 4\n$redis->incrBy('key1', 10);  \/\/ 14\n<\/pre>",
      "parameters": {
        "key": {
          "comment": "键名",
          "type": "string",
          "options": []
        },
        "step": {
          "comment": "自增步长",
          "type": "int",
          "options": []
        }
      }
    },
    "hIncrBy": {
      "access": "public",
      "comment": "为指定字段增加指定的值.",
      "isStatic": false,
      "return": "int",
      "example": "\n<pre>\n$redis->delete('h');\n$redis->hIncrBy('h', 'x', 2); \/\/ returns 2: h[x] = 2 now.\n$redis->hIncrBy('h', 'x', 1); \/\/ h[x] ← 2 + 1. Returns 3\n<\/pre>",
      "parameters": {
        "key": {
          "comment": "键名",
          "type": "string",
          "options": []
        },
        "field": {
          "comment": "字段名",
          "type": "string",
          "options": []
        },
        "step": {
          "comment": "自增步长",
          "type": "int",
          "options": []
        }
      }
    },
    "incr": {
      "access": "public",
      "comment": "键值自增",
      "isStatic": false,
      "return": "int",
      "example": "\n<pre>\n$redis->incr('key1'); \/\/ key1 didn't exists, set to 0 before the increment and now has the value 1\n$redis->incr('key1'); \/\/ 2\n$redis->incr('key1'); \/\/ 3\n$redis->incr('key1'); \/\/ 4\n<\/pre>",
      "parameters": {
        "key": {
          "comment": "键名",
          "type": "string",
          "options": []
        }
      }
    },
    "decrBy": {
      "access": "public",
      "comment": "按指定步长自减",
      "isStatic": false,
      "return": "int",
      "example": "\n<pre>\n$redis->decr('key1');        \/\/ key1 didn't exists, set to 0 before the increment and now has the value -1\n$redis->decr('key1');        \/\/ -2\n$redis->decr('key1');        \/\/ -3\n$redis->decrBy('key1', 10);  \/\/ -13\n<\/pre>",
      "parameters": {
        "key": {
          "comment": "键名",
          "type": "string",
          "options": []
        },
        "step": {
          "comment": "自减步长",
          "type": "float",
          "options": []
        }
      }
    },
    "decr": {
      "access": "public",
      "comment": "键值自减",
      "isStatic": false,
      "return": "int",
      "example": "\n<pre>\n$redis->decr('key1'); \/\/ key1 didn't exists, set to 0 before the increment and now has the value -1\n$redis->decr('key1'); \/\/ -2\n$redis->decr('key1'); \/\/ -3\n<\/pre>",
      "parameters": {
        "key": {
          "comment": "键名",
          "type": "string",
          "options": []
        }
      }
    },
    "getBit": {
      "access": "public",
      "comment": "获取某个键的某个位置的位值",
      "isStatic": false,
      "return": "int",
      "example": "\n<pre>\n$redis->set('key', \"\\x7f\");  \/\/ this is 0111 1111\n$redis->getBit('key', 0);    \/\/ 0\n$redis->getBit('key', 1);    \/\/ 1\n<\/pre>",
      "parameters": {
        "key": {
          "comment": "键名",
          "type": "string",
          "options": []
        },
        "offset": {
          "comment": "所在位置",
          "type": "int",
          "options": []
        }
      }
    },
    "lInsert": {
      "access": "public",
      "comment": "在列表中，在某个元素的前面或后面插入一个新值",
      "isStatic": false,
      "return": "int",
      "example": "\n<pre>\n$redis->delete('key1');\n$redis->lInsert('key1', Redis::AFTER, 'A', 'X');     \/\/ 0\n$redis->lPush('key1', 'A');\n$redis->lPush('key1', 'B');\n$redis->lPush('key1', 'C');\n$redis->lInsert('key1', Redis::BEFORE, 'C', 'X');    \/\/ 4\n$redis->lRange('key1', 0, -1);                       \/\/ array('A', 'B', 'X', 'C')\n$redis->lInsert('key1', Redis::AFTER, 'C', 'Y');     \/\/ 5\n$redis->lRange('key1', 0, -1);                       \/\/ array('A', 'B', 'X', 'C', 'Y')\n$redis->lInsert('key1', Redis::AFTER, 'W', 'value'); \/\/ -1\n<\/pre>",
      "parameters": {
        "key": {
          "comment": "键名",
          "type": "string",
          "options": []
        },
        "position": {
          "comment": "位置(前面或后面,使用Redis::BEFORE | Redis::AFTER)",
          "type": "string",
          "options": []
        },
        "element": {
          "comment": "元素",
          "type": "string",
          "options": []
        },
        "value": {
          "comment": "新值",
          "type": "string",
          "options": []
        }
      }
    },
    "lGet": {
      "access": "public",
      "comment": "获取列表中指定索引的值",
      "isStatic": false,
      "return": "string | boolean",
      "example": "",
      "parameters": {
        "key": {
          "comment": "键名",
          "type": "string",
          "options": []
        },
        "index": {
          "comment": "索引值",
          "type": "int",
          "options": []
        }
      }
    },
    "lIndex": {
      "access": "public",
      "comment": "获取列表中指定索引的值",
      "isStatic": false,
      "return": "string | boolean",
      "example": "",
      "parameters": {
        "key": {
          "comment": "键名",
          "type": "string",
          "options": []
        },
        "index": {
          "comment": "索引值",
          "type": "int",
          "options": []
        }
      }
    },
    "setTimeout": {
      "access": "public",
      "comment": "设置键的有效期",
      "isStatic": false,
      "return": "boolean",
      "example": "",
      "parameters": {
        "key": {
          "comment": "键名",
          "type": "string",
          "options": []
        },
        "ttl": {
          "comment": "有效期(秒数)",
          "type": "int",
          "options": []
        }
      }
    },
    "expire": {
      "access": "public",
      "comment": "设置键的有效期",
      "isStatic": false,
      "return": "boolean",
      "example": "",
      "parameters": {
        "key": {
          "comment": "键名",
          "type": "string",
          "options": []
        },
        "ttl": {
          "comment": "有效期(秒数)",
          "type": "int",
          "options": []
        }
      }
    },
    "pexpire": {
      "access": "public",
      "comment": "设置键的有效期(毫秒为单位)",
      "isStatic": false,
      "return": "boolean",
      "example": "",
      "parameters": {
        "key": {
          "comment": "键名",
          "type": "string",
          "options": []
        },
        "ttl": {
          "comment": "有效期(毫秒数)",
          "type": "int",
          "options": []
        }
      }
    },
    "expireAt": {
      "access": "public",
      "comment": "为某个键设置有效期为某个时间点",
      "isStatic": false,
      "return": "bool:",
      "example": "\n<pre>\n$redis->set('x', '42');\n$now = time(NULL);               \/\/ current timestamp\n$redis->expireAt('x', $now + 3); \/\/ x will disappear in 3 seconds.\nsleep(5);                        \/\/ wait 5 seconds\n$redis->get('x');                \/\/ will return `FALSE`, as 'x' has expired.\n<\/pre>",
      "parameters": {
        "key": {
          "comment": "键名",
          "type": "string",
          "options": []
        },
        "expireTime": {
          "comment": "到期时间",
          "type": "int",
          "options": []
        }
      }
    },
    "pexpireAt": {
      "access": "public",
      "comment": "为某个键设置有效期为某个时间点(精确到毫秒)",
      "isStatic": false,
      "return": "bool:",
      "example": "\n<pre>\n$redis->set('x', '42');\n$now = time(NULL);               \/\/ current timestamp\n$redis->expireAt('x', $now + 3); \/\/ x will disappear in 3 seconds.\nsleep(5);                        \/\/ wait 5 seconds\n$redis->get('x');                \/\/ will return `FALSE`, as 'x' has expired.\n<\/pre>",
      "parameters": {
        "key": {
          "comment": "键名",
          "type": "string",
          "options": []
        },
        "expireTime": {
          "comment": "到期时间",
          "type": "int",
          "options": []
        }
      }
    },
    "move": {
      "access": "public",
      "comment": "将某个键移动到其他数据库中",
      "isStatic": false,
      "return": "bool",
      "example": "\n<pre>\n$redis->select(0);       \/\/ switch to DB 0\n$redis->set('x', '42');  \/\/ write 42 to x\n$redis->move('x', 1);    \/\/ move to DB 1\n$redis->select(1);       \/\/ switch to DB 1\n$redis->get('x');        \/\/ will return 42\n<\/pre>",
      "parameters": {
        "key": {
          "comment": "键名",
          "type": "string",
          "options": []
        },
        "dbIndex": {
          "comment": "数据库编号",
          "type": "int",
          "options": []
        }
      }
    },
    "select": {
      "access": "public",
      "comment": "切换数据库",
      "isStatic": false,
      "return": "bool",
      "example": "\n<pre>\n$redis->select(0);       \/\/ switch to DB 0\n$redis->set('x', '42');  \/\/ write 42 to x\n$redis->move('x', 1);    \/\/ move to DB 1\n$redis->select(1);       \/\/ switch to DB 1\n$redis->get('x');        \/\/ will return 42\n<\/pre>",
      "parameters": {
        "dbIndex": {
          "comment": "数据库编号",
          "type": "int",
          "options": []
        }
      }
    },
    "getRange": {
      "access": "public",
      "comment": "获取一个键值的子字符串",
      "isStatic": false,
      "return": "string:",
      "example": "\n<pre>\n$redis->set('key', 'string value');\n$redis->getRange('key', 0, 5);   \/\/ 'string'\n$redis->getRange('key', -5, -1); \/\/ 'value'\n<\/pre>",
      "parameters": {
        "key": {
          "comment": "键名",
          "type": "string",
          "options": []
        },
        "start": {
          "comment": "开始位置",
          "type": "int",
          "options": []
        },
        "end": {
          "comment": "结束位置",
          "type": "int",
          "options": []
        }
      }
    },
    "listTrim": {
      "access": "public",
      "comment": "删除指定范围外的其他元素",
      "isStatic": false,
      "return": "array | boolean",
      "example": "",
      "parameters": {
        "key": {
          "comment": "键名",
          "type": "string",
          "options": []
        },
        "start": {
          "comment": "开始索引",
          "type": "int",
          "options": []
        },
        "end": {
          "comment": "结束索引",
          "type": "int",
          "options": []
        }
      }
    },
    "ltrim": {
      "access": "public",
      "comment": "删除指定范围外的其他元素",
      "isStatic": false,
      "return": "array | boolean",
      "example": "",
      "parameters": {
        "key": {
          "comment": "键名",
          "type": "string",
          "options": []
        },
        "start": {
          "comment": "开始索引",
          "type": "int",
          "options": []
        },
        "end": {
          "comment": "结束索引",
          "type": "int",
          "options": []
        }
      }
    },
    "lGetRange": {
      "access": "public",
      "comment": "获取列表指定范围的值",
      "isStatic": false,
      "return": "array",
      "example": "",
      "parameters": {
        "key": {
          "comment": "键名",
          "type": "string",
          "options": []
        },
        "start": {
          "comment": "索引开始值",
          "type": "int",
          "options": []
        },
        "end": {
          "comment": "索引结束值",
          "type": "int",
          "options": []
        }
      }
    },
    "lRange": {
      "access": "public",
      "comment": "获取列表指定范围的值",
      "isStatic": false,
      "return": "array",
      "example": "",
      "parameters": {
        "key": {
          "comment": "键名",
          "type": "string",
          "options": []
        },
        "start": {
          "comment": "索引开始值",
          "type": "int",
          "options": []
        },
        "end": {
          "comment": "索引结束值",
          "type": "int",
          "options": []
        }
      }
    },
    "lRem": {
      "access": "public",
      "comment": "从列表中删除指定值的元素。 如果count为零，则删除所有匹配的元素。 如果计数是负数，则元素从尾部移到头部。",
      "isStatic": false,
      "return": "long | bool",
      "example": "",
      "parameters": {
        "key": {
          "comment": "键名",
          "type": "string",
          "options": []
        },
        "value": {
          "comment": "元素值",
          "type": "string",
          "options": []
        },
        "count": {
          "comment": "删除的个数",
          "type": "int",
          "options": []
        }
      }
    },
    "lRemove": {
      "access": "public",
      "comment": "从列表中删除指定值的元素。 如果count为零，则删除所有匹配的元素。 如果计数是负数，则元素从尾部移到头部。",
      "isStatic": false,
      "return": "long | bool",
      "example": "",
      "parameters": {
        "key": {
          "comment": "键名",
          "type": "string",
          "options": []
        },
        "value": {
          "comment": "元素值",
          "type": "string",
          "options": []
        },
        "count": {
          "comment": "删除的个数",
          "type": "int",
          "options": []
        }
      }
    },
    "zDeleteRangeByRank": {
      "access": "public",
      "comment": "根据排序范围删除成员",
      "isStatic": false,
      "return": "int",
      "example": "\n<pre>\n$redis->zAdd('key', 1, 'one');\n$redis->zAdd('key', 2, 'two');\n$redis->zAdd('key', 3, 'three');\n$redis->zRemRangeByRank('key', 0, 1); \/\/ 2\n$redis->zRange('key', 0, -1, array('withscores' => TRUE)); \/\/ array('three' => 3)\n<\/pre>",
      "parameters": {
        "key": {
          "comment": "集合键名",
          "type": "string",
          "options": []
        },
        "start": {
          "comment": "开始排序值",
          "type": "double",
          "options": []
        },
        "end": {
          "comment": "结束排序值",
          "type": "double",
          "options": []
        }
      }
    },
    "zRemRangeByRank": {
      "access": "public",
      "comment": "根据排序范围删除成员",
      "isStatic": false,
      "return": "int",
      "example": "\n<pre>\n$redis->zAdd('key', 1, 'one');\n$redis->zAdd('key', 2, 'two');\n$redis->zAdd('key', 3, 'three');\n$redis->zRemRangeByRank('key', 0, 1); \/\/ 2\n$redis->zRange('key', 0, -1, array('withscores' => TRUE)); \/\/ array('three' => 3)\n<\/pre>",
      "parameters": {
        "key": {
          "comment": "集合键名",
          "type": "string",
          "options": []
        },
        "start": {
          "comment": "开始排序值",
          "type": "double",
          "options": []
        },
        "end": {
          "comment": "结束排序值",
          "type": "double",
          "options": []
        }
      }
    },
    "incrByFloat": {
      "access": "public",
      "comment": "按指定步长自增",
      "isStatic": false,
      "return": "float",
      "example": "\n<pre>\n$redis = new Redis();\n$redis->connect('127.0.0.1');\n$redis->set('x', 3);\nvar_dump( $redis->incrByFloat('x', 1.5) );   \/\/ float(4.5)\n\/\/ ! SIC\nvar_dump( $redis->get('x') );                \/\/ string(3) \"4.5\"\n<\/pre>",
      "parameters": {
        "key": {
          "comment": "键名",
          "type": "string",
          "options": []
        },
        "step": {
          "comment": "自增步长",
          "type": "float",
          "options": []
        }
      }
    },
    "hIncrByFloat": {
      "access": "public",
      "comment": "为指定字段增加指定的值",
      "isStatic": false,
      "return": "",
      "example": "\n<pre>\n$redis = new Redis();\n$redis->connect('127.0.0.1');\n$redis->hset('h', 'float', 3);\n$redis->hset('h', 'int',   3);\nvar_dump( $redis->hIncrByFloat('h', 'float', 1.5) ); \/\/ float(4.5)\nvar_dump( $redis->hGetAll('h') );\n\/\/ Output\narray(2) {\n[\"float\"]=>\nstring(3) \"4.5\"\n[\"int\"]=>\nstring(1) \"3\"\n}\n<\/pre>",
      "parameters": {
        "key": {
          "comment": "键名",
          "type": "string",
          "options": []
        },
        "field": {
          "comment": "字段名",
          "type": "string",
          "options": []
        },
        "step": {
          "comment": "自增步长",
          "type": "double",
          "options": []
        }
      }
    },
    "bitCount": {
      "access": "public",
      "comment": "统计字符串的位数",
      "isStatic": false,
      "return": "long",
      "example": "",
      "parameters": {
        "key": {
          "comment": "键名",
          "type": "string",
          "options": []
        }
      }
    },
    "bitOp": {
      "access": "public",
      "comment": "多个键的位操作，并将结果存入到指定的键中",
      "isStatic": false,
      "return": "long",
      "example": "",
      "parameters": {
        "operation": {
          "comment": "操作(有 AND, OR, NOT, XOR 4种可选择)",
          "type": "string",
          "options": []
        },
        "dstKey": {
          "comment": "目标键",
          "type": "string",
          "options": []
        },
        "key1": {
          "comment": "键名1",
          "type": "string",
          "options": []
        },
        "key2": {
          "comment": "键名2",
          "type": "string",
          "options": []
        },
        "keyN": {
          "comment": "键名N",
          "type": "string|...",
          "options": []
        }
      }
    },
    "sAdd": {
      "access": "public",
      "comment": "给集合添加元素",
      "isStatic": false,
      "return": "int",
      "example": "\n<pre>\n$redis->sAdd('k', 'v1');                \/\/ int(1)\n$redis->sAdd('k', 'v1', 'v2', 'v3');    \/\/ int(2)\n<\/pre>",
      "parameters": {
        "key": {
          "comment": "键名",
          "type": "string",
          "options": []
        },
        "value": {
          "comment": "元素值",
          "type": "string",
          "options": []
        }
      }
    },
    "sMove": {
      "access": "public",
      "comment": "将某个集合中的元素移动到另外一个集合中",
      "isStatic": false,
      "return": "bool",
      "example": "\n<pre>\n$redis->sAdd('key1' , 'set11');\n$redis->sAdd('key1' , 'set12');\n$redis->sAdd('key1' , 'set13');          \/\/ 'key1' => {'set11', 'set12', 'set13'}\n$redis->sAdd('key2' , 'set21');\n$redis->sAdd('key2' , 'set22');          \/\/ 'key2' => {'set21', 'set22'}\n$redis->sMove('key1', 'key2', 'set13');  \/\/ 'key1' =>  {'set11', 'set12'}\n\/\/ 'key2' =>  {'set21', 'set22', 'set13'}\n<\/pre>",
      "parameters": {
        "srcKey": {
          "comment": "原集合键名",
          "type": "string",
          "options": []
        },
        "dstKey": {
          "comment": "目标集合键名",
          "type": "string",
          "options": []
        },
        "member": {
          "comment": "成员",
          "type": "string",
          "options": []
        }
      }
    },
    "sDiff": {
      "access": "public",
      "comment": "获取多个集合的差集",
      "isStatic": false,
      "return": "array",
      "example": "\n<pre>\n$redis->delete('s0', 's1', 's2');\n$redis->sAdd('s0', '1');\n$redis->sAdd('s0', '2');\n$redis->sAdd('s0', '3');\n$redis->sAdd('s0', '4');\n$redis->sAdd('s1', '1');\n$redis->sAdd('s2', '3');\nvar_dump($redis->sDiff('s0', 's1', 's2'));\n\/\/array(2) {\n\/\/  [0]=>\n\/\/  string(1) \"4\"\n\/\/  [1]=>\n\/\/  string(1) \"2\"\n\/\/}\n<\/pre>",
      "parameters": {
        "key1": {
          "comment": "键名1",
          "type": "string",
          "options": []
        },
        "key2": {
          "comment": "键名2",
          "type": "string|...",
          "options": []
        }
      }
    },
    "sDiffStore": {
      "access": "public",
      "comment": "获取多个集合的差集，并将结果存入到一个新的集合中",
      "isStatic": false,
      "return": "int:",
      "example": "\n<pre>\n$redis->delete('s0', 's1', 's2');\n$redis->sAdd('s0', '1');\n$redis->sAdd('s0', '2');\n$redis->sAdd('s0', '3');\n$redis->sAdd('s0', '4');\n$redis->sAdd('s1', '1');\n$redis->sAdd('s2', '3');\nvar_dump($redis->sDiffStore('dst', 's0', 's1', 's2'));\nvar_dump($redis->sMembers('dst'));\n\/\/int(2)\n\/\/array(2) {\n\/\/  [0]=>\n\/\/  string(1) \"4\"\n\/\/  [1]=>\n\/\/  string(1) \"2\"\n\/\/}\n<\/pre>",
      "parameters": {
        "dstKey": {
          "comment": "目标键，存放结果的键",
          "type": "string",
          "options": []
        },
        "key1": {
          "comment": "键名1",
          "type": "string",
          "options": []
        },
        "key2": {
          "comment": "键名2",
          "type": "string",
          "options": []
        },
        "keyN": {
          "comment": "键名n",
          "type": "string|...",
          "options": []
        }
      }
    },
    "sUnion": {
      "access": "public",
      "comment": "获取集合的并集",
      "isStatic": false,
      "return": "array",
      "example": "\n<pre>\n$redis->delete('s0', 's1', 's2');\n$redis->sAdd('s0', '1');\n$redis->sAdd('s0', '2');\n$redis->sAdd('s1', '3');\n$redis->sAdd('s1', '1');\n$redis->sAdd('s2', '3');\n$redis->sAdd('s2', '4');\nvar_dump($redis->sUnion('s0', 's1', 's2'));\narray(4) {\n\/\/  [0]=>\n\/\/  string(1) \"3\"\n\/\/  [1]=>\n\/\/  string(1) \"4\"\n\/\/  [2]=>\n\/\/  string(1) \"1\"\n\/\/  [3]=>\n\/\/  string(1) \"2\"\n\/\/}\n<\/pre>",
      "parameters": {
        "key1": {
          "comment": "键名1",
          "type": "string",
          "options": []
        },
        "key2": {
          "comment": "键名2",
          "type": "string|...",
          "options": []
        }
      }
    },
    "sUnionStore": {
      "access": "public",
      "comment": "获取多个集合的并集，并将结果存入到另外一个集合中",
      "isStatic": false,
      "return": "int",
      "example": "\n<pre>\n$redis->delete('s0', 's1', 's2');\n$redis->sAdd('s0', '1');\n$redis->sAdd('s0', '2');\n$redis->sAdd('s1', '3');\n$redis->sAdd('s1', '1');\n$redis->sAdd('s2', '3');\n$redis->sAdd('s2', '4');\nvar_dump($redis->sUnionStore('dst', 's0', 's1', 's2'));\nvar_dump($redis->sMembers('dst'));\n\/\/int(4)\n\/\/array(4) {\n\/\/  [0]=>\n\/\/  string(1) \"3\"\n\/\/  [1]=>\n\/\/  string(1) \"4\"\n\/\/  [2]=>\n\/\/  string(1) \"1\"\n\/\/  [3]=>\n\/\/  string(1) \"2\"\n\/\/}\n<\/pre>",
      "parameters": {
        "dstKey": {
          "comment": "目标键，存放结果的键",
          "type": "string",
          "options": []
        },
        "key1": {
          "comment": "键名1",
          "type": "string",
          "options": []
        },
        "key2": {
          "comment": "键名2",
          "type": "string",
          "options": []
        },
        "keyN": {
          "comment": "键名n",
          "type": "string|...",
          "options": []
        }
      }
    },
    "sInter": {
      "access": "public",
      "comment": "获取两个集合的交集",
      "isStatic": false,
      "return": "array | boolean",
      "example": "\n<pre>\n$redis->sAdd('key1', 'val1');\n$redis->sAdd('key1', 'val2');\n$redis->sAdd('key1', 'val3');\n$redis->sAdd('key1', 'val4');\n$redis->sAdd('key2', 'val3');\n$redis->sAdd('key2', 'val4');\n$redis->sAdd('key3', 'val3');\n$redis->sAdd('key3', 'val4');\nvar_dump($redis->sInter('key1', 'key2', 'key3'));\n\/\/array(2) {\n\/\/  [0]=>\n\/\/  string(4) \"val4\"\n\/\/  [1]=>\n\/\/  string(4) \"val3\"\n\/\/}\n<\/pre>",
      "parameters": {
        "key1": {
          "comment": "键名1",
          "type": "string",
          "options": []
        },
        "key2": {
          "comment": "键名2",
          "type": "string",
          "options": []
        }
      }
    },
    "sInterStore": {
      "access": "public",
      "comment": "获取多个集合的交集，并将结果存入到另外一个集合中",
      "isStatic": false,
      "return": "int",
      "example": "\n<pre>\n$redis->sAdd('key1', 'val1');\n$redis->sAdd('key1', 'val2');\n$redis->sAdd('key1', 'val3');\n$redis->sAdd('key1', 'val4');\n$redis->sAdd('key2', 'val3');\n$redis->sAdd('key2', 'val4');\n$redis->sAdd('key3', 'val3');\n$redis->sAdd('key3', 'val4');\nvar_dump($redis->sInterStore('output', 'key1', 'key2', 'key3'));\nvar_dump($redis->sMembers('output'));\n\/\/int(2)\n\/\/\n\/\/array(2) {\n\/\/  [0]=>\n\/\/  string(4) \"val4\"\n\/\/  [1]=>\n\/\/  string(4) \"val3\"\n\/\/}\n<\/pre>",
      "parameters": {
        "dstKey": {
          "comment": "目标键，存放结果的键",
          "type": "string",
          "options": []
        },
        "key1": {
          "comment": "键名1",
          "type": "string",
          "options": []
        },
        "key2": {
          "comment": "键名2",
          "type": "string",
          "options": []
        },
        "keyN": {
          "comment": "键名n",
          "type": "string|...",
          "options": []
        }
      }
    },
    "sRemove": {
      "access": "public",
      "comment": "删除集合元素",
      "isStatic": false,
      "return": "long",
      "example": "",
      "parameters": {
        "key": {
          "comment": "键名",
          "type": "string",
          "options": []
        },
        "member": {
          "comment": "成员",
          "type": "string|...",
          "options": []
        }
      }
    },
    "srem": {
      "access": "public",
      "comment": "删除集合元素",
      "isStatic": false,
      "return": "long",
      "example": "",
      "parameters": {
        "key": {
          "comment": "键名",
          "type": "string",
          "options": []
        },
        "member": {
          "comment": "成员",
          "type": "string|...",
          "options": []
        }
      }
    },
    "zDelete": {
      "access": "public",
      "comment": "删除有序集合中的某个成员",
      "isStatic": false,
      "return": "int",
      "example": "",
      "parameters": {
        "key": {
          "comment": "集合键名",
          "type": "string",
          "options": []
        },
        "member": {
          "comment": "成员值",
          "type": "string",
          "options": []
        }
      }
    },
    "zRemove": {
      "access": "public",
      "comment": "删除有序集合中的某个成员",
      "isStatic": false,
      "return": "int",
      "example": "",
      "parameters": {
        "key": {
          "comment": "集合键名",
          "type": "string",
          "options": []
        },
        "member": {
          "comment": "成员值",
          "type": "string",
          "options": []
        }
      }
    },
    "zRem": {
      "access": "public",
      "comment": "删除有序集合中的某个成员",
      "isStatic": false,
      "return": "int",
      "example": "",
      "parameters": {
        "key": {
          "comment": "集合键名",
          "type": "string",
          "options": []
        },
        "member": {
          "comment": "成员值",
          "type": "string",
          "options": []
        }
      }
    },
    "pSubscribe": {
      "access": "public",
      "comment": "通过匹配模式来订阅这些匹配的消息频道",
      "isStatic": false,
      "return": "",
      "example": "\n<pre>\nfunction psubscribe($redis, $pattern, $chan, $msg) {\necho \"Pattern: $pattern\\n\";\necho \"Channel: $chan\\n\";\necho \"Payload: $msg\\n\";\n}\n<\/pre>",
      "parameters": {
        "patterns": {
          "comment": "匹配模式",
          "type": "array",
          "options": []
        },
        "callback": {
          "comment": "回调函数名称",
          "type": "string|array",
          "options": []
        },
        "value": {
          "comment": "返回值",
          "type": "mixed",
          "options": []
        }
      }
    },
    "subscribe": {
      "access": "public",
      "comment": "订阅消息",
      "isStatic": false,
      "return": "mixed",
      "example": "\n<pre>\nfunction f($redis, $chan, $msg) {\nswitch($chan) {\ncase 'chan-1':\n...\nbreak;\ncase 'chan-2':\n...\nbreak;\ncase 'chan-2':\n...\nbreak;\n}\n}\n$redis->subscribe(array('chan-1', 'chan-2', 'chan-3'), 'f'); \/\/ subscribe to 3 chans\n<\/pre>",
      "parameters": {
        "channels": {
          "comment": "订阅的消息频道",
          "type": "array",
          "options": []
        },
        "callback": {
          "comment": "回调函数名称",
          "type": "string|array",
          "options": []
        },
        "value": {
          "comment": "返回值",
          "type": "mixed",
          "options": []
        }
      }
    },
    "multi": {
      "access": "public",
      "comment": "开始一个事务.",
      "isStatic": false,
      "return": "",
      "example": "\n<pre>\n$ret = $redis->multi()\n->set('key1', 'val1')\n->get('key1')\n->set('key2', 'val2')\n->get('key2')\n->exec();\n\/\/$ret == array (\n\/\/    0 => TRUE,\n\/\/    1 => 'val1',\n\/\/    2 => TRUE,\n\/\/    3 => 'val2');\n<\/pre>",
      "parameters": []
    },
    "exec": {
      "access": "public",
      "comment": "执行事务",
      "isStatic": false,
      "return": "",
      "example": "",
      "parameters": []
    },
    "eval": {
      "access": "public",
      "comment": "执行lua脚本",
      "isStatic": false,
      "return": "mixed",
      "example": "",
      "parameters": {
        "script": {
          "comment": "脚本",
          "type": "string",
          "options": []
        },
        "args": {
          "comment": "脚本参数",
          "type": "array",
          "options": []
        },
        "num_keys": {
          "comment": "应该进入KEYS数组的参数个数",
          "type": "int",
          "options": []
        }
      }
    },
    "evalSha": {
      "access": "public",
      "comment": "从脚本的SHA1散列而不是脚本本身执行LUA脚本",
      "isStatic": false,
      "return": "",
      "example": "$script = 'return 1';\n$sha = $redis->script('load', $script);\n$redis->evalSha($sha); \/\/ Returns 1",
      "parameters": {
        "script_sha": {
          "comment": "脚本的散列值",
          "type": "string",
          "options": []
        },
        "args": {
          "comment": "脚本参数",
          "type": "array",
          "options": []
        },
        "num_keys": {
          "comment": "应该进入KEYS数组的参数个数",
          "type": "int",
          "options": []
        }
      }
    },
    "script": {
      "access": "public",
      "comment": "在脚本子系统上执行redis命令",
      "isStatic": false,
      "return": "",
      "example": "\n<pre>\n$redis->script('load', $script);\n$redis->script('flush');\n$redis->script('kill');\n$redis->script('exists', $script1, [$script2, $script3, ...]);\n<\/pre>\nSCRIPT LOAD will return the SHA1 hash of the passed script on success, and FALSE on failure.\nSCRIPT FLUSH should always return TRUE\nSCRIPT KILL will return true if a script was able to be killed and false if not\nSCRIPT EXISTS will return an array with TRUE or FALSE for each passed script",
      "parameters": {
        "command": {
          "comment": "redis命令",
          "type": "string",
          "options": []
        },
        "script": {
          "comment": "脚本",
          "type": "string|...",
          "options": []
        }
      }
    },
    "__sleep": {
      "access": "public",
      "comment": "序列化函数调用的魔术方法(在PHP进行序列化时，serialize() 检查类中是否有 __sleep() ,如果有，则该函数将在任何序列化之前运行。该函数必须返回一个需要进行序列化保存的成员属性数组，并且只序列化该函数返回的这些成员属性. 该函数有两个作用: 第一. 在序列化之前,关闭对象可能具有的任何数据库连接等. 第二. 指定对象中需要被序列化的成员属性,如果某个属性比较大而不需要储存下来,可以不把它写进__sleep要返回的数组中,这样该属性就不会被序列化)",
      "isStatic": false,
      "return": "",
      "example": "",
      "parameters": []
    },
    "__wakeup": {
      "access": "public",
      "comment": "反序列化函数调用的魔术方法(unserialize() 从字节流中创建了一个对象之后,马上检查是否具有__wakeup 的函数的存在。如果存在，__wakeup 立刻被调用。使用 __wakeup 的目的是重建在序列化中可能丢失的任何数据库连接以及处理其它重新初始化的任务)",
      "isStatic": false,
      "return": "",
      "example": "",
      "parameters": []
    }
  }
}