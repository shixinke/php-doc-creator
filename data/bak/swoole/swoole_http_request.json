{"object":{"name":"swoole_http_request"},"comment":"http请求对象，保存了Http客户端请求的相关信息，包括GET、POST、COOKIE、Header等","namespace":"","consts":[],"properties":{"fd":{"access":"public","type":"int","comment":"http连接句柄","isStatic":false,"value":0},"header":{"access":"public","type":"array","comment":"请求头（每个key都是小写）","isStatic":false},"server":{"access":"public","type":"array","comment":"请求相当的服务器信息,相当于$_SERVER","isStatic":false},"request":{"access":"public","type":"unknown","comment":false,"isStatic":false},"cookie":{"access":"public","type":"array","comment":"请求中的cookie数据","isStatic":false},"get":{"access":"public","type":"array","comment":"get请求参数","isStatic":false},"files":{"access":"public","type":"array","comment":"请求中的文件上传信息\nname 浏览器上传时传入的文件名称","isStatic":false},"post":{"access":"public","type":"array","comment":"post请求数据","isStatic":false},"tmpfiles":{"access":"public","type":"array","comment":"临时文件信息","isStatic":false}},"methods":{"rawcontent":{"access":"public","comment":"获取请求的原始数据","isStatic":false,"return":"string","example":"","parameters":[]},"__sleep":{"access":"public","comment":"序列化函数调用的魔术方法(在PHP进行序列化时，serialize() 检查类中是否有 __sleep() ,如果有，则该函数将在任何序列化之前运行。该函数必须返回一个需要进行序列化保存的成员属性数组，并且只序列化该函数返回的这些成员属性. 该函数有两个作用: 第一. 在序列化之前,关闭对象可能具有的任何数据库连接等. 第二. 指定对象中需要被序列化的成员属性,如果某个属性比较大而不需要储存下来,可以不把它写进__sleep要返回的数组中,这样该属性就不会被序列化)","isStatic":false,"return":"","example":"","parameters":[]},"__wakeup":{"access":"public","comment":"反序列化函数调用的魔术方法(unserialize() 从字节流中创建了一个对象之后,马上检查是否具有__wakeup 的函数的存在。如果存在，__wakeup 立刻被调用。使用 __wakeup 的目的是重建在序列化中可能丢失的任何数据库连接以及处理其它重新初始化的任务)","isStatic":false,"return":"","example":"","parameters":[]},"__destruct":{"access":"public","comment":"析构函数","isStatic":false,"return":"","example":"","parameters":[]}}}