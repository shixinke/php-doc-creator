{
  "version": "4.1.0RC1",
  "comment": "php操作Redis客户端",
  "constants": [],
  "ini": {
    "redis.arrays.autorehash": {
      "value": "",
      "options": [],
      "comment": "是否自动重新hash"
    },
    "redis.arrays.connecttimeout": {
      "value": "",
      "options": [],
      "comment": "redis数组连接超时时间设置(users=1)"
    },
    "redis.arrays.distributor": {
      "value": "",
      "options": [],
      "comment": "redis键分布函数名称或分布方法"
    },
    "redis.arrays.functions": {
      "value": "",
      "options": [],
      "comment": "设置每个redis数组使用的函数名称(如:users=user_hash)"
    },
    "redis.arrays.hosts": {
      "value": "",
      "options": [],
      "comment": "设置每个数组的主机名(如:users[]=localhost:6379&users[]=localhost:6380&users[]=localhost:6381&users[]=localhost:6382&friends[]=localhost)"
    },
    "redis.arrays.index": {
      "value": "",
      "options": [],
      "comment": "设置哪些redis数组使用索引(如:users=1,friends=0)"
    },
    "redis.arrays.lazyconnect": {
      "value": "",
      "options": [],
      "comment": "是否在需要操作某个Redis instance上的数据时，才建立连接"
    },
    "redis.arrays.names": {
      "value": "",
      "options": [],
      "comment": "可用的redis数组列表(多个使用,隔开,如:users,friends)"
    },
    "redis.arrays.pconnect": {
      "value": "",
      "options": [],
      "comment": "redis阵列是否启用长连接"
    },
    "redis.arrays.previous": {
      "value": "",
      "options": [],
      "comment": "旧阵列(当一个新的节点添加到一个数组，phpredis需要知道它。节点的旧列表变成“previous”数组，节点的新列表作为主环)"
    },
    "redis.arrays.readtimeout": {
      "value": "",
      "options": [],
      "comment": "阵列读数据超时时间"
    },
    "redis.arrays.retryinterval": {
      "value": "",
      "options": [],
      "comment": "指定当客户失去与服务器连接时重新连接的延迟的时间"
    },
    "redis.clusters.persistent": {
      "value": "",
      "options": [],
      "comment": "集群是否为长连接"
    },
    "redis.clusters.read_timeout": {
      "value": "",
      "options": [],
      "comment": "设置集群的读数据超时时间(如:mycluster=10)"
    },
    "redis.clusters.seeds": {
      "value": "",
      "options": [],
      "comment": "设置集群对应的主机配置(如:mycluster[]=localhost:7000&test[]=localhost:7001   ;\\n　在程序中使用:$obj_cluster = new RedisCluster('mycluster');)"
    },
    "redis.clusters.timeout": {
      "value": "",
      "options": [],
      "comment": "设置集群的连接超时时间(如:mycluster=5)"
    },
    "redis.session.locking_enabled": {
      "value": "",
      "options": [],
      "comment": "session是否启用锁"
    },
    "redis.session.lock_expire": {
      "value": "",
      "options": [],
      "comment": "设置用redis来存储session数据的锁有效时间"
    },
    "redis.session.lock_retries": {
      "value": "",
      "options": [],
      "comment": "设置用redis来存储session数据的锁重试次数"
    },
    "redis.session.lock_wait_time": {
      "value": "",
      "options": [],
      "comment": "设置用redis来存储session数据的锁等待时间"
    }
  },
  "functions": [],
  "object": {
    "name": "Redis"
  },
  "namespace": "",
  "interfaces": [],
  "consts": {
    "REDIS_NOT_FOUND": {
      "comment": "未知类型",
      "type": "int",
      "value": 0
    },
    "REDIS_STRING": {
      "comment": "字符串类型",
      "type": "int",
      "value": 1
    },
    "REDIS_SET": {
      "comment": "集合类型",
      "type": "int",
      "value": 2
    },
    "REDIS_LIST": {
      "comment": "列表类型",
      "type": "int",
      "value": 3
    },
    "REDIS_ZSET": {
      "comment": "有序集合类型",
      "type": "int",
      "value": 4
    },
    "REDIS_HASH": {
      "comment": "字典类型",
      "type": "int",
      "value": 5
    },
    "PIPELINE": {
      "comment": "管道模式",
      "type": "int",
      "value": 2
    },
    "ATOMIC": {
      "comment": "原子操作模式",
      "type": "int",
      "value": 0
    },
    "MULTI": {
      "comment": "事务模式",
      "type": "int",
      "value": 1
    },
    "OPT_SERIALIZER": {
      "comment": "序列化选项",
      "type": "int",
      "value": 1
    },
    "OPT_PREFIX": {
      "comment": "前缀选项",
      "type": "int",
      "value": 2
    },
    "OPT_READ_TIMEOUT": {
      "comment": "读操作超时选项",
      "type": "float",
      "value": 3
    },
    "OPT_TCP_KEEPALIVE": {
      "comment": "TCP长连接选项",
      "type": "int",
      "value": 6
    },
    "OPT_COMPRESSION": {
      "comment": "启用压缩选项",
      "type": "int",
      "value": 7
    },
    "SERIALIZER_NONE": {
      "comment": "不实行序列化",
      "type": "int",
      "value": 0
    },
    "SERIALIZER_PHP": {
      "comment": "PHP序列化",
      "type": "int",
      "value": 1
    },
    "COMPRESSION_NONE": {
      "comment": "",
      "type": "int",
      "value": 0
    },
    "OPT_SCAN": {
      "comment": "扫描选项",
      "type": "int",
      "value": 4
    },
    "SCAN_RETRY": {
      "comment": "重新扫描",
      "type": "int",
      "value": 1
    },
    "SCAN_NORETRY": {
      "comment": "不重新扫描",
      "type": "int",
      "value": 0
    },
    "AFTER": {
      "comment": "后面位置",
      "type": "string",
      "value": "after"
    },
    "BEFORE": {
      "comment": "前面位置",
      "type": "string",
      "value": "before"
    }
  },
  "properties": [],
  "methods": {
    "__construct": {
      "access": "public",
      "comment": "创建一个redis客户端",
      "isStatic": false,
      "return": "",
      "example": "$redis = new Redis();",
      "parameters": []
    },
    "__destruct": {
      "access": "public",
      "comment": "析构方法",
      "isStatic": false,
      "return": "",
      "example": "",
      "parameters": []
    },
    "connect": {
      "access": "public",
      "comment": "连接redis服务器",
      "isStatic": false,
      "return": "bool",
      "example": "\n<pre>\n$redis->connect('127.0.0.1', 6379);\n$redis->connect('127.0.0.1');            \/\/ port 6379 by default\n$redis->connect('127.0.0.1', 6379, 2.5); \/\/ 2.5 sec timeout.\n$redis->connect('\/tmp\/redis.sock');      \/\/ unix domain socket.\n<\/pre>",
      "parameters": {
        "host": {
          "comment": "主机IP",
          "type": "string",
          "options": []
        },
        "port": {
          "comment": "端口",
          "type": "int",
          "options": []
        },
        "timeout": {
          "comment": "连接超时时间(以秒为单位)",
          "type": "float",
          "options": []
        },
        "reserved": {
          "comment": "当使用retry_interval时该值为NULL",
          "type": "mixed",
          "options": []
        },
        "retry_interval": {
          "comment": "重试间隔",
          "type": "int",
          "options": []
        },
        "read_timeout": {
          "comment": "读操作超时时间",
          "type": "float",
          "options": []
        }
      }
    },
    "pconnect": {
      "access": "public",
      "comment": "连接redis(长连接)，与connect用法一致",
      "isStatic": false,
      "return": "bool",
      "example": "\n<pre>\n$redis->pconnect('127.0.0.1', 6379);\n$redis->pconnect('127.0.0.1');            \/\/ port 6379 by default\n$redis->connect('127.0.0.1', 6379, 2.5); \/\/ 2.5 sec timeout.\n$redis->connect('\/tmp\/redis.sock');      \/\/ unix domain socket.\n<\/pre>",
      "parameters": {
        "host": {
          "comment": "主机IP",
          "type": "string",
          "options": []
        },
        "port": {
          "comment": "端口",
          "type": "int",
          "options": []
        },
        "timeout": {
          "comment": "连接超时时间(以秒为单位)",
          "type": "float",
          "options": []
        },
        "reserved": {
          "comment": "当使用retry_interval时该值为NULL",
          "type": "mixed",
          "options": []
        },
        "retry_interval": {
          "comment": "重试间隔",
          "type": "int",
          "options": []
        },
        "read_timeout": {
          "comment": "读操作超时时间",
          "type": "float",
          "options": []
        }
      }
    },
    "close": {
      "access": "public",
      "comment": "关闭redis连接(长连接除外)",
      "isStatic": false,
      "return": "",
      "example": "",
      "parameters": []
    },
    "ping": {
      "access": "public",
      "comment": "检查当前redis连接状态(成功时返回PONG)",
      "isStatic": false,
      "return": "string",
      "example": "",
      "parameters": []
    },
    "echo": {
      "access": "public",
      "comment": "向redis发送一个字符串，而且redis服务器将返回一个相同的字符串",
      "isStatic": false,
      "return": "string",
      "example": "",
      "parameters": {
        "str": {
          "comment": "发送的字符串",
          "type": "string",
          "options": []
        }
      }
    },
    "get": {
      "access": "public",
      "comment": "获取指定的key的值",
      "isStatic": false,
      "return": "string|bool",
      "example": "$redis->get('key');",
      "parameters": []
    },
    "set": {
      "access": "public",
      "comment": "给指定的键设置值",
      "isStatic": false,
      "return": "bool",
      "example": "直接设置：\n $redis->set('key', 'value');\n带有效期的设置:\n$redis->set('key','value', 10);\n当键不存在时，设置期有效期为10秒:\n$redis->set('key', 'value', Array('nx', 'ex'=>10));\n当键存在时，设置期有效期为1000毫秒:\n$redis->set('key', 'value', Array('xx', 'px'=>1000));\n",
      "parameters": {
        "key": {
          "comment": "设置的缓存键",
          "type": "string",
          "options": []
        },
        "value": {
          "comment": "设置的缓存值",
          "type": "string",
          "options": []
        },
        "options": {
          "comment": "附加项，可以是超时时间或者一个选项数组",
          "type": "int|array",
          "options": []
        }
      }
    },
    "setex": {
      "access": "public",
      "comment": "设置键值并设置有效期",
      "isStatic": false,
      "return": "bool",
      "example": "$redis->setex('key', 3600, 'value');",
      "parameters": {
        "key": {
          "comment": "设置的缓存键",
          "type": "string",
          "options": []
        },
        "value": {
          "comment": "设置的缓存值",
          "type": "string",
          "options": []
        },
        "ttl": {
          "comment": "有效期",
          "type": "int",
          "options": []
        }
      }
    },
    "psetex": {
      "access": "public",
      "comment": "设置键值并设置有效期(毫秒为单位)",
      "isStatic": false,
      "return": "",
      "example": "",
      "parameters": {
        "key": {
          "comment": "设置的缓存键",
          "type": "string",
          "options": []
        },
        "value": {
          "comment": "设置的缓存值",
          "type": "string",
          "options": []
        },
        "ttl": {
          "comment": "有效期(毫秒为单位)",
          "type": "int",
          "options": []
        }
      }
    },
    "setnx": {
      "access": "public",
      "comment": "当键不存在时设置其值",
      "isStatic": false,
      "return": "bool:",
      "example": "\n$redis->setnx('key', 'value');\n",
      "parameters": {
        "key": {
          "comment": "设置的缓存键",
          "type": "string",
          "options": []
        },
        "value": {
          "comment": "设置的缓存值",
          "type": "string",
          "options": []
        }
      }
    },
    "getSet": {
      "access": "public",
      "comment": "设置键的值，并返回它的旧的缓存值",
      "isStatic": false,
      "return": "string",
      "example": "\n<pre>\n$redis->set('x', '42');\n$exValue = $redis->getSet('x', 'lol');   \/\/ return '42', replaces x by 'lol'\n$newValue = $redis->get('x')'            \/\/ return 'lol'\n<\/pre>",
      "parameters": {
        "key": {
          "comment": "设置的缓存键",
          "type": "string",
          "options": []
        },
        "value": {
          "comment": "设置的缓存值",
          "type": "string",
          "options": []
        }
      }
    },
    "randomKey": {
      "access": "public",
      "comment": "返回一个随机的键",
      "isStatic": false,
      "return": "string",
      "example": "\n<pre>\n$key = $redis->randomKey();\n$surprise = $redis->get($key);  \/\/ who knows what's in there.\n<\/pre>",
      "parameters": []
    },
    "renameKey": {
      "access": "public",
      "comment": "给键重命名",
      "isStatic": false,
      "return": "boolean",
      "example": "",
      "parameters": {
        "srcKey": {
          "comment": "旧键名",
          "type": "string",
          "options": []
        },
        "dstKey": {
          "comment": "新键名",
          "type": "string",
          "options": []
        }
      }
    },
    "renameNx": {
      "access": "public",
      "comment": "当目标键名不存在时，给键重命名",
      "isStatic": false,
      "return": "boolean",
      "example": "",
      "parameters": {
        "srcKey": {
          "comment": "旧键名",
          "type": "string",
          "options": []
        },
        "dstKey": {
          "comment": "新键名",
          "type": "string",
          "options": []
        }
      }
    },
    "getMultiple": {
      "access": "public",
      "comment": "批量获取键值",
      "isStatic": false,
      "return": "array",
      "example": "\n<pre>\n$redis->set('key1', 'value1');\n$redis->set('key2', 'value2');\n$redis->set('key3', 'value3');\n$redis->getMultiple(array('key1', 'key2', 'key3')); \/\/ array('value1', 'value2', 'value3');\n$redis->getMultiple(array('key0', 'key1', 'key5')); \/\/ array(`FALSE`, 'value2', `FALSE`);\n<\/pre>",
      "parameters": {
        "keys": {
          "comment": "键名数组",
          "type": "array",
          "options": []
        }
      }
    },
    "exists": {
      "access": "public",
      "comment": "判断键是否存在",
      "isStatic": false,
      "return": "bool",
      "example": "\n<pre>\n$redis->set('key', 'value');\n$redis->exists('key');               \/\/  TRUE\n$redis->exists('NonExistingKey');    \/\/ FALSE\n<\/pre>",
      "parameters": {
        "key": {
          "comment": "键名",
          "type": "string",
          "options": []
        }
      }
    },
    "delete": {
      "access": "public",
      "comment": "删除一个或多个键",
      "isStatic": false,
      "return": "int",
      "example": "$redis->delete('key1', 'key2'); \n$redis->delete(array('key3', 'key4')); ",
      "parameters": {
        "keys": {
          "comment": "键名",
          "type": "array|string",
          "options": []
        }
      }
    },
    "incr": {
      "access": "public",
      "comment": "键值自增",
      "isStatic": false,
      "return": "int",
      "example": "\n<pre>\n$redis->incr('key1'); \/\/ key1 didn't exists, set to 0 before the increment and now has the value 1\n$redis->incr('key1'); \/\/ 2\n$redis->incr('key1'); \/\/ 3\n$redis->incr('key1'); \/\/ 4\n<\/pre>",
      "parameters": {
        "key": {
          "comment": "键名",
          "type": "string",
          "options": []
        }
      }
    },
    "incrBy": {
      "access": "public",
      "comment": "按指定步长自增",
      "isStatic": false,
      "return": "int",
      "example": "\n<pre>\n$redis->incr('key1');        \/\/ key1 didn't exists, set to 0 before the increment and now has the value 1\n$redis->incr('key1');        \/\/ 2\n$redis->incr('key1');        \/\/ 3\n$redis->incr('key1');        \/\/ 4\n$redis->incrBy('key1', 10);  \/\/ 14\n<\/pre>",
      "parameters": {
        "key": {
          "comment": "键名",
          "type": "string",
          "options": []
        },
        "step": {
          "comment": "自增步长",
          "type": "int",
          "options": []
        }
      }
    },
    "incrByFloat": {
      "access": "public",
      "comment": "按指定步长自增",
      "isStatic": false,
      "return": "float",
      "example": "\n<pre>\n$redis = new Redis();\n$redis->connect('127.0.0.1');\n$redis->set('x', 3);\nvar_dump( $redis->incrByFloat('x', 1.5) );   \/\/ float(4.5)\n\/\/ ! SIC\nvar_dump( $redis->get('x') );                \/\/ string(3) \"4.5\"\n<\/pre>",
      "parameters": {
        "key": {
          "comment": "键名",
          "type": "string",
          "options": []
        },
        "step": {
          "comment": "自增步长",
          "type": "float",
          "options": []
        }
      }
    },
    "decr": {
      "access": "public",
      "comment": "键值自减",
      "isStatic": false,
      "return": "int",
      "example": "\n<pre>\n$redis->decr('key1'); \/\/ key1 didn't exists, set to 0 before the increment and now has the value -1\n$redis->decr('key1'); \/\/ -2\n$redis->decr('key1'); \/\/ -3\n<\/pre>",
      "parameters": {
        "key": {
          "comment": "键名",
          "type": "string",
          "options": []
        }
      }
    },
    "decrBy": {
      "access": "public",
      "comment": "按指定步长自减",
      "isStatic": false,
      "return": "int",
      "example": "\n<pre>\n$redis->decr('key1');        \/\/ key1 didn't exists, set to 0 before the increment and now has the value -1\n$redis->decr('key1');        \/\/ -2\n$redis->decr('key1');        \/\/ -3\n$redis->decrBy('key1', 10);  \/\/ -13\n<\/pre>",
      "parameters": {
        "key": {
          "comment": "键名",
          "type": "string",
          "options": []
        },
        "step": {
          "comment": "自减步长",
          "type": "float",
          "options": []
        }
      }
    },
    "type": {
      "access": "public",
      "comment": "获取指定键的数据类型(需要根据常量匹配)",
      "isStatic": false,
      "return": "int",
      "example": "$redis->type('key');",
      "parameters": {
        "key": {
          "comment": "键名",
          "type": "string",
          "options": []
        }
      }
    },
    "append": {
      "access": "public",
      "comment": "将字符串追加到键值后(返回值的长度)",
      "isStatic": false,
      "return": "int",
      "example": "\n<pre>\n$redis->set('key', 'value1');\n$redis->append('key', 'value2'); \/\/ 12\n$redis->get('key');              \/\/ 'value1value2'\n<\/pre>",
      "parameters": {
        "key": {
          "comment": "键名",
          "type": "string",
          "options": []
        },
        "value": {
          "comment": "追加的值",
          "type": "string",
          "options": []
        }
      }
    },
    "getRange": {
      "access": "public",
      "comment": "获取一个键值的子字符串",
      "isStatic": false,
      "return": "string:",
      "example": "\n<pre>\n$redis->set('key', 'string value');\n$redis->getRange('key', 0, 5);   \/\/ 'string'\n$redis->getRange('key', -5, -1); \/\/ 'value'\n<\/pre>",
      "parameters": {
        "key": {
          "comment": "键名",
          "type": "string",
          "options": []
        },
        "start": {
          "comment": "开始位置",
          "type": "int",
          "options": []
        },
        "end": {
          "comment": "结束位置",
          "type": "int",
          "options": []
        }
      }
    },
    "setRange": {
      "access": "public",
      "comment": "修改某个键的某个位置的值",
      "isStatic": false,
      "return": "string",
      "example": "\n<pre>\n$redis->set('key', 'Hello world');\n$redis->setRange('key', 6, \"redis\"); \/\/ returns 11\n$redis->get('key');                  \/\/ \"Hello redis\"\n<\/pre>",
      "parameters": {
        "key": {
          "comment": "键名",
          "type": "string",
          "options": []
        },
        "offset": {
          "comment": "开始位置",
          "type": "int",
          "options": []
        },
        "value": {
          "comment": "被替换的子串的值",
          "type": "string",
          "options": []
        }
      }
    },
    "getBit": {
      "access": "public",
      "comment": "获取某个键的某个位置的位值",
      "isStatic": false,
      "return": "int",
      "example": "\n<pre>\n$redis->set('key', \"\\x7f\");  \/\/ this is 0111 1111\n$redis->getBit('key', 0);    \/\/ 0\n$redis->getBit('key', 1);    \/\/ 1\n<\/pre>",
      "parameters": {
        "key": {
          "comment": "键名",
          "type": "string",
          "options": []
        },
        "offset": {
          "comment": "所在位置",
          "type": "int",
          "options": []
        }
      }
    },
    "setBit": {
      "access": "public",
      "comment": "修改某个键的某个位置的位值",
      "isStatic": false,
      "return": "int",
      "example": "\n<pre>\n$redis->set('key', \"*\");     \/\/ ord(\"*\") = 42 = 0x2f = \"0010 1010\"\n$redis->setBit('key', 5, 1); \/\/ returns 0\n$redis->setBit('key', 7, 1); \/\/ returns 0\n$redis->get('key');          \/\/ chr(0x2f) = \"\/\" = b(\"0010 1111\")\n<\/pre>",
      "parameters": {
        "key": {
          "comment": "键名",
          "type": "string",
          "options": []
        },
        "offset": {
          "comment": "开始位置",
          "type": "int",
          "options": []
        },
        "value": {
          "comment": "新值",
          "type": "boolean|int",
          "options": []
        }
      }
    },
    "strlen": {
      "access": "public",
      "comment": "获取键值的长度",
      "isStatic": false,
      "return": "int",
      "example": "\n<pre>\n$redis->set('key', 'value');\n$redis->strlen('key'); \/\/ 5\n<\/pre>",
      "parameters": {
        "key": {
          "comment": "键名",
          "type": "string",
          "options": []
        }
      }
    },
    "getKeys": {
      "access": "public",
      "comment": "根据匹配模式获取键名(如*)",
      "isStatic": false,
      "return": "array",
      "example": "\n$allKeys = $redis->keys('*');\n$keyWithUserPrefix = $redis->keys('user*');",
      "parameters": {
        "pattern": {
          "comment": "匹配模式",
          "type": "string",
          "options": []
        }
      }
    },
    "sort": {
      "access": "public",
      "comment": "给列表、集合或有序集合的元素排序",
      "isStatic": false,
      "return": "An",
      "example": "\n<pre>\n$redis->delete('s');\n$redis->sadd('s', 5);\n$redis->sadd('s', 4);\n$redis->sadd('s', 2);\n$redis->sadd('s', 1);\n$redis->sadd('s', 3);\nvar_dump($redis->sort('s')); \/\/ 1,2,3,4,5\nvar_dump($redis->sort('s', array('sort' => 'desc'))); \/\/ 5,4,3,2,1\nvar_dump($redis->sort('s', array('sort' => 'desc', 'store' => 'out'))); \/\/ (int)5\n<\/pre>",
      "parameters": {
        "key": {
          "comment": "键名",
          "type": "string",
          "options": []
        },
        "options": {
          "comment": "排序参数,如：array('sort' => 'desc')",
          "type": "array",
          "options": []
        }
      }
    },
    "sortAsc": {
      "access": "public",
      "comment": "给列表、集合或有序集合的元素排序(自小到大顺序)",
      "isStatic": false,
      "return": "",
      "example": "",
      "parameters": {
        "key": {
          "comment": "键名",
          "type": "string",
          "options": []
        }
      }
    },
    "sortAscAlpha": {
      "access": "public",
      "comment": "给列表、集合或有序集合的元素排序(按字母顺序)",
      "isStatic": false,
      "return": "",
      "example": "",
      "parameters": {
        "key": {
          "comment": "键名",
          "type": "string",
          "options": []
        }
      }
    },
    "sortDesc": {
      "access": "public",
      "comment": "给列表、集合或有序集合的元素排序(自大到小顺序)",
      "isStatic": false,
      "return": "",
      "example": "",
      "parameters": {
        "key": {
          "comment": "键名",
          "type": "string",
          "options": []
        }
      }
    },
    "sortDescAlpha": {
      "access": "public",
      "comment": "给列表、集合或有序集合的元素排序(按字母顺序倒序)",
      "isStatic": false,
      "return": "",
      "example": "",
      "parameters": {
        "key": {
          "comment": "键名",
          "type": "string",
          "options": []
        }
      }
    },
    "lPush": {
      "access": "public",
      "comment": "从左侧(头部)向列表插入元素",
      "isStatic": false,
      "return": "int",
      "example": "\n<pre>\n$redis->lPush('l', 'v1', 'v2', 'v3', 'v4')   \/\/ int(4)\nvar_dump( $redis->lRange('l', 0, -1) );\n\/\/\/\/ Output:\n\/\/ array(4) {\n\/\/   [0]=> string(2) \"v4\"\n\/\/   [1]=> string(2) \"v3\"\n\/\/   [2]=> string(2) \"v2\"\n\/\/   [3]=> string(2) \"v1\"\n\/\/ }\n<\/pre>",
      "parameters": {
        "key": {
          "comment": "键名",
          "type": "string",
          "options": []
        },
        "value": {
          "comment": "元素值",
          "type": "string",
          "options": []
        }
      }
    },
    "rPush": {
      "access": "public",
      "comment": "从右侧(尾部)向列表插入元素",
      "isStatic": false,
      "return": "int",
      "example": "\n<pre>\n$redis->rPush('l', 'v1', 'v2', 'v3', 'v4');    \/\/ int(4)\nvar_dump( $redis->lRange('l', 0, -1) );\n\/\/\/\/ Output:\n\/\/ array(4) {\n\/\/   [0]=> string(2) \"v1\"\n\/\/   [1]=> string(2) \"v2\"\n\/\/   [2]=> string(2) \"v3\"\n\/\/   [3]=> string(2) \"v4\"\n\/\/ }\n<\/pre>",
      "parameters": {
        "key": {
          "comment": "键名",
          "type": "string",
          "options": []
        },
        "value": {
          "comment": "元素值",
          "type": "string",
          "options": []
        }
      }
    },
    "lPushx": {
      "access": "public",
      "comment": "如果列表存在，从左侧(头部)向列表插入元素",
      "isStatic": false,
      "return": "int",
      "example": "\n<pre>\n$redis->delete('key1');\n$redis->lPushx('key1', 'A');     \/\/ returns 0\n$redis->lPush('key1', 'A');      \/\/ returns 1\n$redis->lPushx('key1', 'B');     \/\/ returns 2\n$redis->lPushx('key1', 'C');     \/\/ returns 3\n\/\/ key1 now points to the following list: [ 'A', 'B', 'C' ]\n<\/pre>",
      "parameters": {
        "key": {
          "comment": "键名",
          "type": "string",
          "options": []
        },
        "value": {
          "comment": "元素值",
          "type": "string",
          "options": []
        }
      }
    },
    "rPushx": {
      "access": "public",
      "comment": "如果列表存在，从右侧(尾部)向列表插入元素",
      "isStatic": false,
      "return": "int",
      "example": "\n<pre>\n$redis->delete('key1');\n$redis->rPushx('key1', 'A'); \/\/ returns 0\n$redis->rPush('key1', 'A'); \/\/ returns 1\n$redis->rPushx('key1', 'B'); \/\/ returns 2\n$redis->rPushx('key1', 'C'); \/\/ returns 3\n\/\/ key1 now points to the following list: [ 'A', 'B', 'C' ]\n<\/pre>",
      "parameters": {
        "key": {
          "comment": "键名",
          "type": "string",
          "options": []
        },
        "value": {
          "comment": "元素值",
          "type": "string",
          "options": []
        }
      }
    },
    "lPop": {
      "access": "public",
      "comment": "从列表左侧删除一个元素",
      "isStatic": false,
      "return": "string",
      "example": "\n<pre>\n$redis->rPush('key1', 'A');\n$redis->rPush('key1', 'B');\n$redis->rPush('key1', 'C');  \/\/ key1 => [ 'A', 'B', 'C' ]\n$redis->lPop('key1');        \/\/ key1 => [ 'B', 'C' ]\n<\/pre>",
      "parameters": {
        "key": {
          "comment": "键名",
          "type": "string",
          "options": []
        }
      }
    },
    "rPop": {
      "access": "public",
      "comment": "从列表右侧删除一个元素",
      "isStatic": false,
      "return": "string",
      "example": "\n<pre>\n$redis->rPush('key1', 'A');\n$redis->rPush('key1', 'B');\n$redis->rPush('key1', 'C');  \/\/ key1 => [ 'A', 'B', 'C' ]\n$redis->rPop('key1');        \/\/ key1 => [ 'A', 'B' ]\n<\/pre>",
      "parameters": {
        "key": {
          "comment": "键名",
          "type": "string",
          "options": []
        }
      }
    },
    "blPop": {
      "access": "public",
      "comment": "是一个阻塞lPop原语。 如果至少有一个列表包含至少一个元素，则该元素将从列表头部弹出并返回给调用者。 如果所有通过参数传递的键标识的列表都是空的，blPop将在指定的超时期间阻塞，直到元素被推送到其中一个列表。 这个元素将被弹出。",
      "isStatic": false,
      "return": "array",
      "example": "\n<pre>\n\/\/ Non blocking feature\n$redis->lPush('key1', 'A');\n$redis->delete('key2');\n$redis->blPop('key1', 'key2', 10); \/\/ array('key1', 'A')\n\/\/ OR\n$redis->blPop(array('key1', 'key2'), 10); \/\/ array('key1', 'A')\n$redis->brPop('key1', 'key2', 10); \/\/ array('key1', 'A')\n\/\/ OR\n$redis->brPop(array('key1', 'key2'), 10); \/\/ array('key1', 'A')\n\/\/ Blocking feature\n\/\/ process 1\n$redis->delete('key1');\n$redis->blPop('key1', 10);\n\/\/ blocking for 10 seconds\n\/\/ process 2\n$redis->lPush('key1', 'A');\n\/\/ process 1\n\/\/ array('key1', 'A') is returned\n<\/pre>",
      "parameters": {
        "key": {
          "comment": "键名",
          "type": "string|...|array",
          "options": []
        },
        "timeout": {
          "comment": "超时时间",
          "type": "int",
          "options": []
        }
      }
    },
    "brPop": {
      "access": "public",
      "comment": "是一个阻塞rPop原语。 如果至少有一个列表包含至少一个元素，则该元素将从列表尾部弹出并返回给调用者。 如果所有通过参数传递的键标识的列表都是空的，brPop将在指定的超时期间阻塞，直到元素被推送到其中一个列表。 这个元素将被弹出。",
      "isStatic": false,
      "return": "array",
      "example": "\n<pre>\n\/\/ Non blocking feature\n$redis->lPush('key1', 'A');\n$redis->delete('key2');\n$redis->blPop('key1', 'key2', 10); \/\/ array('key1', 'A')\n\/\/ OR\n$redis->blPop(array('key1', 'key2'), 10); \/\/ array('key1', 'A')\n$redis->brPop('key1', 'key2', 10); \/\/ array('key1', 'A')\n\/\/ OR\n$redis->brPop(array('key1', 'key2'), 10); \/\/ array('key1', 'A')\n\/\/ Blocking feature\n\/\/ process 1\n$redis->delete('key1');\n$redis->blPop('key1', 10);\n\/\/ blocking for 10 seconds\n\/\/ process 2\n$redis->lPush('key1', 'A');\n\/\/ process 1\n\/\/ array('key1', 'A') is returned\n<\/pre>",
      "parameters": {
        "key": {
          "comment": "键名",
          "type": "string|...|array",
          "options": []
        },
        "timeout": {
          "comment": "超时时间",
          "type": "int",
          "options": []
        }
      }
    },
    "lSize": {
      "access": "public",
      "comment": "返回列表的长度",
      "isStatic": false,
      "return": "long | bool",
      "example": "",
      "parameters": {
        "key": {
          "comment": "键名",
          "type": "string|...|array",
          "options": []
        }
      }
    },
    "lRemove": {
      "access": "public",
      "comment": "从列表中删除指定值的元素。 如果count为零，则删除所有匹配的元素。 如果计数是负数，则元素从尾部移到头部。",
      "isStatic": false,
      "return": "long | bool",
      "example": "",
      "parameters": {
        "key": {
          "comment": "键名",
          "type": "string",
          "options": []
        },
        "value": {
          "comment": "元素值",
          "type": "string",
          "options": []
        },
        "count": {
          "comment": "删除的个数",
          "type": "int",
          "options": []
        }
      }
    },
    "listTrim": {
      "access": "public",
      "comment": "删除指定范围外的其他元素",
      "isStatic": false,
      "return": "array | boolean",
      "example": "",
      "parameters": {
        "key": {
          "comment": "键名",
          "type": "string",
          "options": []
        },
        "start": {
          "comment": "开始索引",
          "type": "int",
          "options": []
        },
        "end": {
          "comment": "结束索引",
          "type": "int",
          "options": []
        }
      }
    },
    "lGet": {
      "access": "public",
      "comment": "获取列表中指定索引的值",
      "isStatic": false,
      "return": "string | boolean",
      "example": "",
      "parameters": {
        "key": {
          "comment": "键名",
          "type": "string",
          "options": []
        },
        "index": {
          "comment": "索引值",
          "type": "int",
          "options": []
        }
      }
    },
    "lGetRange": {
      "access": "public",
      "comment": "获取列表指定范围的值",
      "isStatic": false,
      "return": "array",
      "example": "",
      "parameters": {
        "key": {
          "comment": "键名",
          "type": "string",
          "options": []
        },
        "start": {
          "comment": "索引开始值",
          "type": "int",
          "options": []
        },
        "end": {
          "comment": "索引结束值",
          "type": "int",
          "options": []
        }
      }
    },
    "lSet": {
      "access": "public",
      "comment": "给列表指定位置设置新值",
      "isStatic": false,
      "return": "boolean",
      "example": "\n<pre>\n$redis->rPush('key1', 'A');\n$redis->rPush('key1', 'B');\n$redis->rPush('key1', 'C');  \/\/ key1 => [ 'A', 'B', 'C' ]\n$redis->lGet('key1', 0);     \/\/ 'A'\n$redis->lSet('key1', 0, 'X');\n$redis->lGet('key1', 0);     \/\/ 'X'\n<\/pre>",
      "parameters": {
        "key": {
          "comment": "键名",
          "type": "string",
          "options": []
        },
        "index": {
          "comment": "索引值",
          "type": "int",
          "options": []
        },
        "value": {
          "comment": "新值",
          "type": "string",
          "options": []
        }
      }
    },
    "lInsert": {
      "access": "public",
      "comment": "在列表中，在某个元素的前面或后面插入一个新值",
      "isStatic": false,
      "return": "int",
      "example": "\n<pre>\n$redis->delete('key1');\n$redis->lInsert('key1', Redis::AFTER, 'A', 'X');     \/\/ 0\n$redis->lPush('key1', 'A');\n$redis->lPush('key1', 'B');\n$redis->lPush('key1', 'C');\n$redis->lInsert('key1', Redis::BEFORE, 'C', 'X');    \/\/ 4\n$redis->lRange('key1', 0, -1);                       \/\/ array('A', 'B', 'X', 'C')\n$redis->lInsert('key1', Redis::AFTER, 'C', 'Y');     \/\/ 5\n$redis->lRange('key1', 0, -1);                       \/\/ array('A', 'B', 'X', 'C', 'Y')\n$redis->lInsert('key1', Redis::AFTER, 'W', 'value'); \/\/ -1\n<\/pre>",
      "parameters": {
        "key": {
          "comment": "键名",
          "type": "string",
          "options": []
        },
        "position": {
          "comment": "位置(前面或后面,使用Redis::BEFORE | Redis::AFTER)",
          "type": "string",
          "options": []
        },
        "element": {
          "comment": "元素",
          "type": "string",
          "options": []
        },
        "value": {
          "comment": "新值",
          "type": "string",
          "options": []
        }
      }
    },
    "sAdd": {
      "access": "public",
      "comment": "给集合添加元素",
      "isStatic": false,
      "return": "int",
      "example": "\n<pre>\n$redis->sAdd('k', 'v1');                \/\/ int(1)\n$redis->sAdd('k', 'v1', 'v2', 'v3');    \/\/ int(2)\n<\/pre>",
      "parameters": {
        "key": {
          "comment": "键名",
          "type": "string",
          "options": []
        },
        "value": {
          "comment": "元素值",
          "type": "string",
          "options": []
        }
      }
    },
    "sAddArray": {
      "access": "public",
      "comment": "给集合批量添加元素",
      "isStatic": false,
      "return": "",
      "example": "",
      "parameters": {
        "key": {
          "comment": "键名",
          "type": "string",
          "options": []
        },
        "value": {
          "comment": "元素值",
          "type": "array",
          "options": []
        }
      }
    },
    "sSize": {
      "access": "public",
      "comment": "返回集合的元素个数",
      "isStatic": false,
      "return": "long",
      "example": "",
      "parameters": {
        "key": {
          "comment": "键名",
          "type": "string",
          "options": []
        }
      }
    },
    "sRemove": {
      "access": "public",
      "comment": "删除集合元素",
      "isStatic": false,
      "return": "long",
      "example": "",
      "parameters": {
        "key": {
          "comment": "键名",
          "type": "string",
          "options": []
        },
        "member": {
          "comment": "成员",
          "type": "string|...",
          "options": []
        }
      }
    },
    "sMove": {
      "access": "public",
      "comment": "将某个集合中的元素移动到另外一个集合中",
      "isStatic": false,
      "return": "bool",
      "example": "\n<pre>\n$redis->sAdd('key1' , 'set11');\n$redis->sAdd('key1' , 'set12');\n$redis->sAdd('key1' , 'set13');          \/\/ 'key1' => {'set11', 'set12', 'set13'}\n$redis->sAdd('key2' , 'set21');\n$redis->sAdd('key2' , 'set22');          \/\/ 'key2' => {'set21', 'set22'}\n$redis->sMove('key1', 'key2', 'set13');  \/\/ 'key1' =>  {'set11', 'set12'}\n\/\/ 'key2' =>  {'set21', 'set22', 'set13'}\n<\/pre>",
      "parameters": {
        "srcKey": {
          "comment": "原集合键名",
          "type": "string",
          "options": []
        },
        "dstKey": {
          "comment": "目标集合键名",
          "type": "string",
          "options": []
        },
        "member": {
          "comment": "成员",
          "type": "string",
          "options": []
        }
      }
    },
    "sPop": {
      "access": "public",
      "comment": "随机删除元素的某个或某些成员，并返回这个删除的成员.",
      "isStatic": false,
      "return": "string | bool",
      "example": "\n<pre>\n$redis->sAdd('key1' , 'set1');\n$redis->sAdd('key1' , 'set2');\n$redis->sAdd('key1' , 'set3');   \/\/ 'key1' => {'set3', 'set1', 'set2'}\n$redis->sPop('key1');            \/\/ 'set1', 'key1' => {'set3', 'set2'}\n$redis->sPop('key1');            \/\/ 'set3', 'key1' => {'set2'}\n<\/pre>",
      "parameters": {
        "key": {
          "comment": "键名",
          "type": "string",
          "options": []
        },
        "count": {
          "comment": "删除个数",
          "type": "int",
          "options": []
        }
      }
    },
    "sRandMember": {
      "access": "public",
      "comment": "随机返回一个集合的元素(不会删除它)",
      "isStatic": false,
      "return": "string | bool",
      "example": "\n<pre>\n$redis->sAdd('key1' , 'one');\n$redis->sAdd('key1' , 'two');\n$redis->sAdd('key1' , 'three');              \/\/ 'key1' => {'one', 'two', 'three'}\nvar_dump( $redis->sRandMember('key1') );     \/\/ 'key1' => {'one', 'two', 'three'}\n\/\/ string(5) \"three\"\nvar_dump( $redis->sRandMember('key1', 2) );  \/\/ 'key1' => {'one', 'two', 'three'}\n\/\/ array(2) {\n\/\/   [0]=> string(2) \"one\"\n\/\/   [1]=> string(2) \"three\"\n\/\/ }\n<\/pre>",
      "parameters": {
        "key": {
          "comment": "键名",
          "type": "string",
          "options": []
        }
      }
    },
    "sContains": {
      "access": "public",
      "comment": "是否包含某个成员",
      "isStatic": false,
      "return": "boolean",
      "example": "",
      "parameters": {
        "key": {
          "comment": "键名",
          "type": "string",
          "options": []
        },
        "member": {
          "comment": "成员值",
          "type": "string",
          "options": []
        }
      }
    },
    "sMembers": {
      "access": "public",
      "comment": "返回集合的所有成员",
      "isStatic": false,
      "return": "array",
      "example": "\n<pre>\n$redis->delete('s');\n$redis->sAdd('s', 'a');\n$redis->sAdd('s', 'b');\n$redis->sAdd('s', 'a');\n$redis->sAdd('s', 'c');\nvar_dump($redis->sMembers('s'));\n\/\/array(3) {\n\/\/  [0]=>\n\/\/  string(1) \"c\"\n\/\/  [1]=>\n\/\/  string(1) \"a\"\n\/\/  [2]=>\n\/\/  string(1) \"b\"\n\/\/}\n\/\/ The order is random and corresponds to redis' own internal representation of the set structure.\n<\/pre>",
      "parameters": {
        "key": {
          "comment": "键名",
          "type": "string",
          "options": []
        }
      }
    },
    "sInter": {
      "access": "public",
      "comment": "获取两个集合的交集",
      "isStatic": false,
      "return": "array | boolean",
      "example": "\n<pre>\n$redis->sAdd('key1', 'val1');\n$redis->sAdd('key1', 'val2');\n$redis->sAdd('key1', 'val3');\n$redis->sAdd('key1', 'val4');\n$redis->sAdd('key2', 'val3');\n$redis->sAdd('key2', 'val4');\n$redis->sAdd('key3', 'val3');\n$redis->sAdd('key3', 'val4');\nvar_dump($redis->sInter('key1', 'key2', 'key3'));\n\/\/array(2) {\n\/\/  [0]=>\n\/\/  string(4) \"val4\"\n\/\/  [1]=>\n\/\/  string(4) \"val3\"\n\/\/}\n<\/pre>",
      "parameters": {
        "key1": {
          "comment": "键名1",
          "type": "string",
          "options": []
        },
        "key2": {
          "comment": "键名2",
          "type": "string",
          "options": []
        }
      }
    },
    "sInterStore": {
      "access": "public",
      "comment": "获取多个集合的交集，并将结果存入到另外一个集合中",
      "isStatic": false,
      "return": "int",
      "example": "\n<pre>\n$redis->sAdd('key1', 'val1');\n$redis->sAdd('key1', 'val2');\n$redis->sAdd('key1', 'val3');\n$redis->sAdd('key1', 'val4');\n$redis->sAdd('key2', 'val3');\n$redis->sAdd('key2', 'val4');\n$redis->sAdd('key3', 'val3');\n$redis->sAdd('key3', 'val4');\nvar_dump($redis->sInterStore('output', 'key1', 'key2', 'key3'));\nvar_dump($redis->sMembers('output'));\n\/\/int(2)\n\/\/\n\/\/array(2) {\n\/\/  [0]=>\n\/\/  string(4) \"val4\"\n\/\/  [1]=>\n\/\/  string(4) \"val3\"\n\/\/}\n<\/pre>",
      "parameters": {
        "dstKey": {
          "comment": "目标键，存放结果的键",
          "type": "string",
          "options": []
        },
        "key1": {
          "comment": "键名1",
          "type": "string",
          "options": []
        },
        "key2": {
          "comment": "键名2",
          "type": "string",
          "options": []
        },
        "keyN": {
          "comment": "键名n",
          "type": "string|...",
          "options": []
        }
      }
    },
    "sUnion": {
      "access": "public",
      "comment": "获取集合的并集",
      "isStatic": false,
      "return": "array",
      "example": "\n<pre>\n$redis->delete('s0', 's1', 's2');\n$redis->sAdd('s0', '1');\n$redis->sAdd('s0', '2');\n$redis->sAdd('s1', '3');\n$redis->sAdd('s1', '1');\n$redis->sAdd('s2', '3');\n$redis->sAdd('s2', '4');\nvar_dump($redis->sUnion('s0', 's1', 's2'));\narray(4) {\n\/\/  [0]=>\n\/\/  string(1) \"3\"\n\/\/  [1]=>\n\/\/  string(1) \"4\"\n\/\/  [2]=>\n\/\/  string(1) \"1\"\n\/\/  [3]=>\n\/\/  string(1) \"2\"\n\/\/}\n<\/pre>",
      "parameters": {
        "key1": {
          "comment": "键名1",
          "type": "string",
          "options": []
        },
        "key2": {
          "comment": "键名2",
          "type": "string|...",
          "options": []
        }
      }
    },
    "sUnionStore": {
      "access": "public",
      "comment": "获取多个集合的并集，并将结果存入到另外一个集合中",
      "isStatic": false,
      "return": "int",
      "example": "\n<pre>\n$redis->delete('s0', 's1', 's2');\n$redis->sAdd('s0', '1');\n$redis->sAdd('s0', '2');\n$redis->sAdd('s1', '3');\n$redis->sAdd('s1', '1');\n$redis->sAdd('s2', '3');\n$redis->sAdd('s2', '4');\nvar_dump($redis->sUnionStore('dst', 's0', 's1', 's2'));\nvar_dump($redis->sMembers('dst'));\n\/\/int(4)\n\/\/array(4) {\n\/\/  [0]=>\n\/\/  string(1) \"3\"\n\/\/  [1]=>\n\/\/  string(1) \"4\"\n\/\/  [2]=>\n\/\/  string(1) \"1\"\n\/\/  [3]=>\n\/\/  string(1) \"2\"\n\/\/}\n<\/pre>",
      "parameters": {
        "dstKey": {
          "comment": "目标键，存放结果的键",
          "type": "string",
          "options": []
        },
        "key1": {
          "comment": "键名1",
          "type": "string",
          "options": []
        },
        "key2": {
          "comment": "键名2",
          "type": "string",
          "options": []
        },
        "keyN": {
          "comment": "键名n",
          "type": "string|...",
          "options": []
        }
      }
    },
    "sDiff": {
      "access": "public",
      "comment": "获取多个集合的差集",
      "isStatic": false,
      "return": "array",
      "example": "\n<pre>\n$redis->delete('s0', 's1', 's2');\n$redis->sAdd('s0', '1');\n$redis->sAdd('s0', '2');\n$redis->sAdd('s0', '3');\n$redis->sAdd('s0', '4');\n$redis->sAdd('s1', '1');\n$redis->sAdd('s2', '3');\nvar_dump($redis->sDiff('s0', 's1', 's2'));\n\/\/array(2) {\n\/\/  [0]=>\n\/\/  string(1) \"4\"\n\/\/  [1]=>\n\/\/  string(1) \"2\"\n\/\/}\n<\/pre>",
      "parameters": {
        "key1": {
          "comment": "键名1",
          "type": "string",
          "options": []
        },
        "key2": {
          "comment": "键名2",
          "type": "string|...",
          "options": []
        }
      }
    },
    "sDiffStore": {
      "access": "public",
      "comment": "获取多个集合的差集，并将结果存入到一个新的集合中",
      "isStatic": false,
      "return": "int",
      "example": "\n<pre>\n$redis->delete('s0', 's1', 's2');\n$redis->sAdd('s0', '1');\n$redis->sAdd('s0', '2');\n$redis->sAdd('s0', '3');\n$redis->sAdd('s0', '4');\n$redis->sAdd('s1', '1');\n$redis->sAdd('s2', '3');\nvar_dump($redis->sDiffStore('dst', 's0', 's1', 's2'));\nvar_dump($redis->sMembers('dst'));\n\/\/int(2)\n\/\/array(2) {\n\/\/  [0]=>\n\/\/  string(1) \"4\"\n\/\/  [1]=>\n\/\/  string(1) \"2\"\n\/\/}\n<\/pre>",
      "parameters": {
        "dstKey": {
          "comment": "目标键，存放结果的键",
          "type": "string",
          "options": []
        },
        "key1": {
          "comment": "键名1",
          "type": "string",
          "options": []
        },
        "key2": {
          "comment": "键名2",
          "type": "string",
          "options": []
        },
        "keyN": {
          "comment": "键名n",
          "type": "string|...",
          "options": []
        }
      }
    },
    "setTimeout": {
      "access": "public",
      "comment": "设置键的有效期",
      "isStatic": false,
      "return": "boolean",
      "example": "",
      "parameters": {
        "key": {
          "comment": "键名",
          "type": "string",
          "options": []
        },
        "ttl": {
          "comment": "有效期(秒数)",
          "type": "int",
          "options": []
        }
      }
    },
    "save": {
      "access": "public",
      "comment": "将数据同步到硬盘上",
      "isStatic": false,
      "return": "boolean",
      "example": "$redis->save();",
      "parameters": []
    },
    "bgSave": {
      "access": "public",
      "comment": "将数据存入到硬盘上(异步操作)",
      "isStatic": false,
      "return": "",
      "example": "",
      "parameters": []
    },
    "lastSave": {
      "access": "public",
      "comment": "获取上次数据同步到硬盘的时间",
      "isStatic": false,
      "return": "int",
      "example": "$redis->lastSave();",
      "parameters": []
    },
    "flushDB": {
      "access": "public",
      "comment": "删除当前数据库的所有键",
      "isStatic": false,
      "return": "bool",
      "example": "$redis->flushDB();",
      "parameters": []
    },
    "flushAll": {
      "access": "public",
      "comment": "删除当前实例的所有键",
      "isStatic": false,
      "return": "bool",
      "example": "$redis->flushAll();",
      "parameters": []
    },
    "dbSize": {
      "access": "public",
      "comment": "获取当前数据库的键的个数",
      "isStatic": false,
      "return": "int",
      "example": "\n<pre>\n$count = $redis->dbSize();\necho \"Redis has $count keys\\n\";\n<\/pre>",
      "parameters": []
    },
    "auth": {
      "access": "public",
      "comment": "设置连接的认证密码",
      "isStatic": false,
      "return": "bool:",
      "example": "$redis->auth('foobared');",
      "parameters": {
        "password": {
          "comment": "认证密码",
          "type": "string",
          "options": []
        }
      }
    },
    "ttl": {
      "access": "public",
      "comment": "返回指定键的有效时间(秒)",
      "isStatic": false,
      "return": "long",
      "example": "$redis->ttl('key');",
      "parameters": {
        "key": {
          "comment": "键名",
          "type": "string",
          "options": []
        }
      }
    },
    "pttl": {
      "access": "public",
      "comment": "返回指定键的有效时间(毫秒)",
      "isStatic": false,
      "return": "long",
      "example": "$redis->pttl('key');",
      "parameters": {
        "key": {
          "comment": "键名",
          "type": "string",
          "options": []
        }
      }
    },
    "persist": {
      "access": "public",
      "comment": "移除指定键的有效期，让它永久有效",
      "isStatic": false,
      "return": "bool:",
      "example": "$redis->persist('key');",
      "parameters": {
        "key": {
          "comment": "键名",
          "type": "string",
          "options": []
        }
      }
    },
    "info": {
      "access": "public",
      "comment": "获取Redis服务器的信息和统计数据",
      "isStatic": false,
      "return": "array",
      "example": "\n<pre>\n$redis->info();\nor\n$redis->info(\"COMMANDSTATS\"); \/\/Information on the commands that have been run (>=2.6 only)\n$redis->info(\"CPU\"); \/\/ just CPU information from Redis INFO\n<\/pre>",
      "parameters": []
    },
    "select": {
      "access": "public",
      "comment": "切换数据库",
      "isStatic": false,
      "return": "bool",
      "example": "\n<pre>\n$redis->select(0);       \/\/ switch to DB 0\n$redis->set('x', '42');  \/\/ write 42 to x\n$redis->move('x', 1);    \/\/ move to DB 1\n$redis->select(1);       \/\/ switch to DB 1\n$redis->get('x');        \/\/ will return 42\n<\/pre>",
      "parameters": {
        "dbIndex": {
          "comment": "数据库编号",
          "type": "int",
          "options": []
        }
      }
    },
    "move": {
      "access": "public",
      "comment": "将某个键移动到其他数据库中",
      "isStatic": false,
      "return": "bool",
      "example": "\n<pre>\n$redis->select(0);       \/\/ switch to DB 0\n$redis->set('x', '42');  \/\/ write 42 to x\n$redis->move('x', 1);    \/\/ move to DB 1\n$redis->select(1);       \/\/ switch to DB 1\n$redis->get('x');        \/\/ will return 42\n<\/pre>",
      "parameters": {
        "key": {
          "comment": "键名",
          "type": "string",
          "options": []
        },
        "dbIndex": {
          "comment": "数据库编号",
          "type": "int",
          "options": []
        }
      }
    },
    "bgrewriteaof": {
      "access": "public",
      "comment": "开启后台写AOF日志操作",
      "isStatic": false,
      "return": "bool",
      "example": "$redis->bgrewriteaof();",
      "parameters": []
    },
    "slaveof": {
      "access": "public",
      "comment": "修改从服务状态(参数为空时，表示停止当前从属关系)",
      "isStatic": false,
      "return": "bool:",
      "example": "\n<pre>\n$redis->slaveof('10.0.1.7', 6379);\n\/\/ ...\n$redis->slaveof();\n<\/pre>",
      "parameters": {
        "host": {
          "comment": "服务器",
          "type": "string",
          "options": []
        },
        "port": {
          "comment": "端口号",
          "type": "int",
          "options": []
        }
      }
    },
    "object": {
      "access": "public",
      "comment": "获取某个键的对象信息",
      "isStatic": false,
      "return": "string",
      "example": "\n<pre>\n$redis->object(\"encoding\", \"l\"); \/\/ → ziplist\n$redis->object(\"refcount\", \"l\"); \/\/ → 1\n$redis->object(\"idletime\", \"l\"); \/\/ → 400 (in seconds, with a precision of 10 seconds).\n<\/pre>",
      "parameters": {
        "info": {
          "comment": "获取的信息指标名称(有 encoding、refcount 、idletime 3种可选择)",
          "type": "string",
          "options": []
        },
        "key": {
          "comment": "键名",
          "type": "string",
          "options": []
        }
      }
    },
    "bitop": {
      "access": "public",
      "comment": "多个键的位操作，并将结果存入到指定的键中",
      "isStatic": false,
      "return": "long",
      "example": "",
      "parameters": {
        "operation": {
          "comment": "操作(有 AND, OR, NOT, XOR 4种可选择)",
          "type": "string",
          "options": []
        },
        "dstKey": {
          "comment": "目标键",
          "type": "string",
          "options": []
        },
        "key1": {
          "comment": "键名1",
          "type": "string",
          "options": []
        },
        "key2": {
          "comment": "键名2",
          "type": "string",
          "options": []
        },
        "keyN": {
          "comment": "键名N",
          "type": "string|...",
          "options": []
        }
      }
    },
    "bitcount": {
      "access": "public",
      "comment": "统计字符串的位数",
      "isStatic": false,
      "return": "long",
      "example": "",
      "parameters": {
        "key": {
          "comment": "键名",
          "type": "string",
          "options": []
        }
      }
    },
    "bitpos": {
      "access": "public",
      "comment": "获取指定位置的位值",
      "isStatic": false,
      "return": "function",
      "example": "\n<pre>\n$redis->set('key', '\\xff\\xff');\n$redis->bitpos('key', 1); \/\/ int(0)\n$redis->bitpos('key', 1, 1); \/\/ int(8)\n$redis->bitpos('key', 1, 3); \/\/ int(-1)\n$redis->bitpos('key', 0); \/\/ int(16)\n$redis->bitpos('key', 0, 1); \/\/ int(16)\n$redis->bitpos('key', 0, 1, 5); \/\/ int(-1)\n<\/pre>",
      "parameters": {
        "key": {
          "comment": "键名",
          "type": "string",
          "options": []
        },
        "bit": {
          "comment": "位值",
          "type": "int",
          "options": []
        },
        "start": {
          "comment": "开始位置",
          "type": "int",
          "options": []
        },
        "end": {
          "comment": "结束位置",
          "type": "int",
          "options": []
        }
      }
    },
    "mset": {
      "access": "public",
      "comment": "批量设置值",
      "isStatic": false,
      "return": "bool",
      "example": "\n<pre>\n$redis->mset(array('key0' => 'value0', 'key1' => 'value1'));\nvar_dump($redis->get('key0'));\nvar_dump($redis->get('key1'));\n\/\/ Output:\n\/\/ string(6) \"value0\"\n\/\/ string(6) \"value1\"\n<\/pre>",
      "parameters": {
        "values": {
          "comment": "要设置的键值对",
          "type": "array",
          "options": []
        }
      }
    },
    "msetnx": {
      "access": "public",
      "comment": "批量设置值(当不存在时设置)",
      "isStatic": false,
      "return": "bool",
      "example": "\n<pre>\n$redis->mset(array('key0' => 'value0', 'key1' => 'value1'));\nvar_dump($redis->get('key0'));\nvar_dump($redis->get('key1'));\n\/\/ Output:\n\/\/ string(6) \"value0\"\n\/\/ string(6) \"value1\"\n<\/pre>",
      "parameters": {
        "values": {
          "comment": "要设置的键值对",
          "type": "array",
          "options": []
        }
      }
    },
    "rpoplpush": {
      "access": "public",
      "comment": "从一个队列的队尾删除一个元素，并将该元素插入到另一个队列的头部",
      "isStatic": false,
      "return": "string",
      "example": "\n<pre>\n$redis->delete('x', 'y');\n$redis->lPush('x', 'abc');\n$redis->lPush('x', 'def');\n$redis->lPush('y', '123');\n$redis->lPush('y', '456');\n\/\/ move the last of x to the front of y.\nvar_dump($redis->rpoplpush('x', 'y'));\nvar_dump($redis->lRange('x', 0, -1));\nvar_dump($redis->lRange('y', 0, -1));\n\/\/Output:\n\/\/\n\/\/string(3) \"abc\"\n\/\/array(1) {\n\/\/  [0]=>\n\/\/  string(3) \"def\"\n\/\/}\n\/\/array(3) {\n\/\/  [0]=>\n\/\/  string(3) \"abc\"\n\/\/  [1]=>\n\/\/  string(3) \"456\"\n\/\/  [2]=>\n\/\/  string(3) \"123\"\n\/\/}\n<\/pre>",
      "parameters": {
        "srcKey": {
          "comment": "要删除元素的队列键名",
          "type": "string",
          "options": []
        },
        "dstKey": {
          "comment": "要插入元素的队列的键名",
          "type": "string",
          "options": []
        }
      }
    },
    "brpoplpush": {
      "access": "public",
      "comment": "阻塞执行rpoplpush",
      "isStatic": false,
      "return": "string",
      "example": "",
      "parameters": {
        "srcKey": {
          "comment": "要删除元素的队列键名",
          "type": "string",
          "options": []
        },
        "dstKey": {
          "comment": "要插入元素的队列的键名",
          "type": "string",
          "options": []
        }
      }
    },
    "zAdd": {
      "access": "public",
      "comment": "向有序集合插入元素",
      "isStatic": false,
      "return": "int",
      "example": "\n<pre>\n<pre>\n$redis->zAdd('z', 1, 'v2', 2, 'v2', 3, 'v3', 4, 'v4' );  \/\/ int(2)\n$redis->zRem('z', 'v2', 'v3');                           \/\/ int(2)\nvar_dump( $redis->zRange('z', 0, -1) );\n\/\/\/\/ Output:\n\/\/ array(2) {\n\/\/   [0]=> string(2) \"v1\"\n\/\/   [1]=> string(2) \"v4\"\n\/\/ }\n<\/pre>\n<\/pre>",
      "parameters": {
        "key": {
          "comment": "集合键名",
          "type": "string",
          "options": []
        },
        "score": {
          "comment": "排序值",
          "type": "double",
          "options": []
        },
        "value": {
          "comment": "元素值",
          "type": "string",
          "options": []
        }
      }
    },
    "zDelete": {
      "access": "public",
      "comment": "删除有序集合中的某个成员",
      "isStatic": false,
      "return": "int",
      "example": "",
      "parameters": {
        "key": {
          "comment": "集合键名",
          "type": "string",
          "options": []
        },
        "member": {
          "comment": "成员值",
          "type": "string",
          "options": []
        }
      }
    },
    "zRange": {
      "access": "public",
      "comment": "获取有序集合中指定范围的成员",
      "isStatic": false,
      "return": "array",
      "example": "\n<pre>\n$redis->zAdd('key1', 0, 'val0');\n$redis->zAdd('key1', 2, 'val2');\n$redis->zAdd('key1', 10, 'val10');\n$redis->zRange('key1', 0, -1); \/\/ array('val0', 'val2', 'val10')\n\/\/ with scores\n$redis->zRange('key1', 0, -1, true); \/\/ array('val0' => 0, 'val2' => 2, 'val10' => 10)\n<\/pre>",
      "parameters": {
        "key": {
          "comment": "集合键名",
          "type": "string",
          "options": []
        },
        "start": {
          "comment": "索引开始值",
          "type": "long",
          "options": []
        },
        "end": {
          "comment": "索引结束值",
          "type": "long",
          "options": []
        },
        "withScores": {
          "comment": "是否返回成员的排序值",
          "type": "boolean",
          "options": []
        }
      }
    },
    "zRevRange": {
      "access": "public",
      "comment": "获取有序集合中指定范围的成员(倒序排列)",
      "isStatic": false,
      "return": "array",
      "example": "\n<pre>\n$redis->zAdd('key', 0, 'val0');\n$redis->zAdd('key', 2, 'val2');\n$redis->zAdd('key', 10, 'val10');\n$redis->zRevRange('key', 0, -1); \/\/ array('val10', 'val2', 'val0')\n\/\/ with scores\n$redis->zRevRange('key', 0, -1, true); \/\/ array('val10' => 10, 'val2' => 2, 'val0' => 0)\n<\/pre>",
      "parameters": {
        "key": {
          "comment": "集合键名",
          "type": "string",
          "options": []
        },
        "start": {
          "comment": "索引开始值",
          "type": "long",
          "options": []
        },
        "end": {
          "comment": "索引结束值",
          "type": "long",
          "options": []
        },
        "withScores": {
          "comment": "是否返回成员的排序值",
          "type": "boolean",
          "options": []
        }
      }
    },
    "zRangeByScore": {
      "access": "public",
      "comment": "获取有序集合中指定范围的成员(按排序值排列)",
      "isStatic": false,
      "return": "array",
      "example": "\n<pre>\n$redis->zAdd('key', 0, 'val0');\n$redis->zAdd('key', 2, 'val2');\n$redis->zAdd('key', 10, 'val10');\n$redis->zRangeByScore('key', 0, 3);                                          \/\/ array('val0', 'val2')\n$redis->zRangeByScore('key', 0, 3, array('withscores' => TRUE);              \/\/ array('val0' => 0, 'val2' => 2)\n$redis->zRangeByScore('key', 0, 3, array('limit' => array(1, 1));                        \/\/ array('val2' => 2)\n$redis->zRangeByScore('key', 0, 3, array('limit' => array(1, 1));                        \/\/ array('val2')\n$redis->zRangeByScore('key', 0, 3, array('withscores' => TRUE, 'limit' => array(1, 1));  \/\/ array('val2' => 2)\n<\/pre>",
      "parameters": {
        "key": {
          "comment": "集合键名",
          "type": "string",
          "options": []
        },
        "start": {
          "comment": "索引开始值",
          "type": "long",
          "options": []
        },
        "end": {
          "comment": "索引结束值",
          "type": "long",
          "options": []
        },
        "options": {
          "comment": "附加选项(可以是：withscores => TRUE, and limit => array($offset, $count))",
          "type": "array",
          "options": []
        }
      }
    },
    "zRevRangeByScore": {
      "access": "public",
      "comment": "获取有序集合中指定范围的成员(按排序值倒序排列)",
      "isStatic": false,
      "return": "array",
      "example": "\n<pre>\n$redis->zAdd('key', 0, 'val0');\n$redis->zAdd('key', 2, 'val2');\n$redis->zAdd('key', 10, 'val10');\n$redis->zRangeByScore('key', 0, 3);                                          \/\/ array('val0', 'val2')\n$redis->zRangeByScore('key', 0, 3, array('withscores' => TRUE);              \/\/ array('val0' => 0, 'val2' => 2)\n$redis->zRangeByScore('key', 0, 3, array('limit' => array(1, 1));                        \/\/ array('val2' => 2)\n$redis->zRangeByScore('key', 0, 3, array('limit' => array(1, 1));                        \/\/ array('val2')\n$redis->zRangeByScore('key', 0, 3, array('withscores' => TRUE, 'limit' => array(1, 1));  \/\/ array('val2' => 2)\n<\/pre>",
      "parameters": {
        "key": {
          "comment": "集合键名",
          "type": "string",
          "options": []
        },
        "start": {
          "comment": "索引开始值",
          "type": "long",
          "options": []
        },
        "end": {
          "comment": "索引结束值",
          "type": "long",
          "options": []
        },
        "options": {
          "comment": "附加选项(可以是：withscores => TRUE, and limit => array($offset, $count))",
          "type": "array",
          "options": []
        }
      }
    },
    "zRangeByLex": {
      "access": "public",
      "comment": "按字母字典的顺序返回成员",
      "isStatic": false,
      "return": "array",
      "example": "\n<pre>\nforeach (array('a', 'b', 'c', 'd', 'e', 'f', 'g') as $char) {\n$redis->zAdd('key', $char);\n}\n$redis->zRangeByLex('key', '-', '[c'); \/\/ array('a', 'b', 'c')\n$redis->zRangeByLex('key', '-', '(c'); \/\/ array('a', 'b')\n$redis->zRangeByLex('key', '-', '[c'); \/\/ array('b', 'c')\n<\/pre>",
      "parameters": {
        "key": {
          "comment": "集合键名",
          "type": "string",
          "options": []
        },
        "min": {
          "comment": "最小的字母",
          "type": "long",
          "options": []
        },
        "max": {
          "comment": "最大的字母",
          "type": "long",
          "options": []
        },
        "offset": {
          "comment": "索引开始值",
          "type": "long",
          "options": []
        },
        "limit": {
          "comment": "成员数",
          "type": "long",
          "options": []
        }
      }
    },
    "zRevRangeByLex": {
      "access": "public",
      "comment": "按字母字典的顺序返回成员（倒序排序）",
      "isStatic": false,
      "return": "",
      "example": "",
      "parameters": {
        "key": {
          "comment": "集合键名",
          "type": "string",
          "options": []
        },
        "min": {
          "comment": "最小的字母",
          "type": "long",
          "options": []
        },
        "max": {
          "comment": "最大的字母",
          "type": "long",
          "options": []
        },
        "offset": {
          "comment": "索引开始值",
          "type": "long",
          "options": []
        },
        "limit": {
          "comment": "成员数",
          "type": "long",
          "options": []
        }
      }
    },
    "zLexCount": {
      "access": "public",
      "comment": "获取指定字母范围的成员数",
      "isStatic": false,
      "return": "int",
      "example": "",
      "parameters": {
        "key": {
          "comment": "集合键名",
          "type": "string",
          "options": []
        },
        "min": {
          "comment": "最小的字母",
          "type": "long",
          "options": []
        },
        "max": {
          "comment": "最大的字母",
          "type": "long",
          "options": []
        }
      }
    },
    "zRemRangeByLex": {
      "access": "public",
      "comment": "删除指定字母范围的成员",
      "isStatic": false,
      "return": "long",
      "example": "",
      "parameters": {
        "key": {
          "comment": "集合键名",
          "type": "string",
          "options": []
        },
        "min": {
          "comment": "最小的字母",
          "type": "long",
          "options": []
        },
        "max": {
          "comment": "最大的字母",
          "type": "long",
          "options": []
        }
      }
    },
    "zCount": {
      "access": "public",
      "comment": "获取指定排序范围的成员数.",
      "isStatic": false,
      "return": "int",
      "example": "\n<pre>\n$redis->zAdd('key', 0, 'val0');\n$redis->zAdd('key', 2, 'val2');\n$redis->zAdd('key', 10, 'val10');\n$redis->zCount('key', 0, 3); \/\/ 2, corresponding to array('val0', 'val2')\n<\/pre>",
      "parameters": {
        "key": {
          "comment": "集合键名",
          "type": "string",
          "options": []
        },
        "start": {
          "comment": "开始排序值",
          "type": "double",
          "options": []
        },
        "end": {
          "comment": "结束排序值",
          "type": "double",
          "options": []
        }
      }
    },
    "zDeleteRangeByScore": {
      "access": "public",
      "comment": "根据排序值范围来删除成员",
      "isStatic": false,
      "return": "long",
      "example": "",
      "parameters": {
        "key": {
          "comment": "集合键名",
          "type": "string",
          "options": []
        },
        "start": {
          "comment": "开始排序值",
          "type": "double",
          "options": []
        },
        "end": {
          "comment": "结束排序值",
          "type": "double",
          "options": []
        }
      }
    },
    "zDeleteRangeByRank": {
      "access": "public",
      "comment": "根据排序范围删除成员",
      "isStatic": false,
      "return": "int",
      "example": "\n<pre>\n$redis->zAdd('key', 1, 'one');\n$redis->zAdd('key', 2, 'two');\n$redis->zAdd('key', 3, 'three');\n$redis->zRemRangeByRank('key', 0, 1); \/\/ 2\n$redis->zRange('key', 0, -1, array('withscores' => TRUE)); \/\/ array('three' => 3)\n<\/pre>",
      "parameters": {
        "key": {
          "comment": "集合键名",
          "type": "string",
          "options": []
        },
        "start": {
          "comment": "开始排序值",
          "type": "double",
          "options": []
        },
        "end": {
          "comment": "结束排序值",
          "type": "double",
          "options": []
        }
      }
    },
    "zCard": {
      "access": "public",
      "comment": "获取有序集合的成员数",
      "isStatic": false,
      "return": "int",
      "example": "\n<pre>\n$redis->zAdd('key', 0, 'val0');\n$redis->zAdd('key', 2, 'val2');\n$redis->zAdd('key', 10, 'val10');\n$redis->zCard('key');            \/\/ 3\n<\/pre>",
      "parameters": {
        "key": {
          "comment": "集合键名",
          "type": "string",
          "options": []
        }
      }
    },
    "zScore": {
      "access": "public",
      "comment": "获取指定成员的排序值(分数)",
      "isStatic": false,
      "return": "double",
      "example": "\n<pre>\n$redis->zAdd('key', 2.5, 'val2');\n$redis->zScore('key', 'val2'); \/\/ 2.5\n<\/pre>",
      "parameters": {
        "key": {
          "comment": "集合键名",
          "type": "string",
          "options": []
        },
        "member": {
          "comment": "成员值",
          "type": "string",
          "options": []
        }
      }
    },
    "zRank": {
      "access": "public",
      "comment": "获取成员的排序值",
      "isStatic": false,
      "return": "int",
      "example": "\n<pre>\n$redis->delete('z');\n$redis->zAdd('key', 1, 'one');\n$redis->zAdd('key', 2, 'two');\n$redis->zRank('key', 'one');     \/\/ 0\n$redis->zRank('key', 'two');     \/\/ 1\n$redis->zRevRank('key', 'one');  \/\/ 1\n$redis->zRevRank('key', 'two');  \/\/ 0\n<\/pre>",
      "parameters": {
        "key": {
          "comment": "集合键名",
          "type": "string",
          "options": []
        },
        "member": {
          "comment": "成员值",
          "type": "string",
          "options": []
        }
      }
    },
    "zRevRank": {
      "access": "public",
      "comment": "获取成员的排位值(倒数)",
      "isStatic": false,
      "return": "int",
      "example": "",
      "parameters": {
        "key": {
          "comment": "集合键名",
          "type": "string",
          "options": []
        },
        "member": {
          "comment": "成员值",
          "type": "string",
          "options": []
        }
      }
    },
    "zInter": {
      "access": "public",
      "comment": "将两个有序集合的交集存入到一个指定的键中",
      "isStatic": false,
      "return": "int",
      "example": "\n<pre>\n$redis->delete('k1');\n$redis->delete('k2');\n$redis->delete('k3');\n$redis->delete('ko1');\n$redis->delete('ko2');\n$redis->delete('ko3');\n$redis->delete('ko4');\n$redis->zAdd('k1', 0, 'val0');\n$redis->zAdd('k1', 1, 'val1');\n$redis->zAdd('k1', 3, 'val3');\n$redis->zAdd('k2', 2, 'val1');\n$redis->zAdd('k2', 3, 'val3');\n$redis->zInter('ko1', array('k1', 'k2'));               \/\/ 2, 'ko1' => array('val1', 'val3')\n$redis->zInter('ko2', array('k1', 'k2'), array(1, 1));  \/\/ 2, 'ko2' => array('val1', 'val3')\n\/\/ Weighted zInter\n$redis->zInter('ko3', array('k1', 'k2'), array(1, 5), 'min'); \/\/ 2, 'ko3' => array('val1', 'val3')\n$redis->zInter('ko4', array('k1', 'k2'), array(1, 5), 'max'); \/\/ 2, 'ko4' => array('val3', 'val1')\n<\/pre>",
      "parameters": {
        "dstKey": {
          "comment": "目标集合键名",
          "type": "string",
          "options": []
        },
        "zsetKeys": {
          "comment": "集合键名",
          "type": "array",
          "options": []
        },
        "zsetKeysWeight": {
          "comment": "集合键对应的权重",
          "type": "array",
          "options": []
        },
        "aggregateFunction": {
          "comment": "合并使用的函数(SUM, MIN, 或 MAX)",
          "type": "string",
          "options": []
        }
      }
    },
    "zUnion": {
      "access": "public",
      "comment": "将两个有序集合的并集存入到一个指定的键中",
      "isStatic": false,
      "return": "int",
      "example": "\n<pre>\n$redis->delete('k1');\n$redis->delete('k2');\n$redis->delete('k3');\n$redis->delete('ko1');\n$redis->delete('ko2');\n$redis->delete('ko3');\n$redis->zAdd('k1', 0, 'val0');\n$redis->zAdd('k1', 1, 'val1');\n$redis->zAdd('k2', 2, 'val2');\n$redis->zAdd('k2', 3, 'val3');\n$redis->zUnion('ko1', array('k1', 'k2')); \/\/ 4, 'ko1' => array('val0', 'val1', 'val2', 'val3')\n\/\/ Weighted zUnion\n$redis->zUnion('ko2', array('k1', 'k2'), array(1, 1)); \/\/ 4, 'ko2' => array('val0', 'val1', 'val2', 'val3')\n$redis->zUnion('ko3', array('k1', 'k2'), array(5, 1)); \/\/ 4, 'ko3' => array('val0', 'val2', 'val3', 'val1')\n<\/pre>",
      "parameters": {
        "dstKey": {
          "comment": "目标集合键名",
          "type": "string",
          "options": []
        },
        "zsetKeys": {
          "comment": "集合键名",
          "type": "array",
          "options": []
        },
        "zsetKeysWeight": {
          "comment": "集合键对应的权重",
          "type": "array",
          "options": []
        },
        "aggregateFunction": {
          "comment": "合并使用的函数(SUM, MIN, 或 MAX)",
          "type": "string",
          "options": []
        }
      }
    },
    "zIncrBy": {
      "access": "public",
      "comment": "给有序集合成员增加排序值",
      "isStatic": false,
      "return": "float",
      "example": "\n<pre>\n$redis->delete('key');\n$redis->zIncrBy('key', 2.5, 'member1');  \/\/ key or member1 didn't exist, so member1's score is to 0\n\/\/ before the increment and now has the value 2.5\n$redis->zIncrBy('key', 1, 'member1');    \/\/ 3.5\n<\/pre>",
      "parameters": {
        "key": {
          "comment": "目标集合键名",
          "type": "string",
          "options": []
        },
        "step": {
          "comment": "增加的步长",
          "type": "double",
          "options": []
        },
        "member": {
          "comment": "成员",
          "type": "string",
          "options": []
        }
      }
    },
    "expireAt": {
      "access": "public",
      "comment": "为某个键设置有效期为某个时间点",
      "isStatic": false,
      "return": "bool:",
      "example": "\n<pre>\n$redis->set('x', '42');\n$now = time(NULL);               \/\/ current timestamp\n$redis->expireAt('x', $now + 3); \/\/ x will disappear in 3 seconds.\nsleep(5);                        \/\/ wait 5 seconds\n$redis->get('x');                \/\/ will return `FALSE`, as 'x' has expired.\n<\/pre>",
      "parameters": {
        "key": {
          "comment": "键名",
          "type": "string",
          "options": []
        },
        "expireTime": {
          "comment": "到期时间",
          "type": "int",
          "options": []
        }
      }
    },
    "pexpire": {
      "access": "public",
      "comment": "设置键的有效期(毫秒为单位)",
      "isStatic": false,
      "return": "boolean",
      "example": "",
      "parameters": {
        "key": {
          "comment": "键名",
          "type": "string",
          "options": []
        },
        "ttl": {
          "comment": "有效期(毫秒数)",
          "type": "int",
          "options": []
        }
      }
    },
    "pexpireAt": {
      "access": "public",
      "comment": "为某个键设置有效期为某个时间点(精确到毫秒)",
      "isStatic": false,
      "return": "bool:",
      "example": "\n<pre>\n$redis->set('x', '42');\n$now = time(NULL);               \/\/ current timestamp\n$redis->expireAt('x', $now + 3); \/\/ x will disappear in 3 seconds.\nsleep(5);                        \/\/ wait 5 seconds\n$redis->get('x');                \/\/ will return `FALSE`, as 'x' has expired.\n<\/pre>",
      "parameters": {
        "key": {
          "comment": "键名",
          "type": "string",
          "options": []
        },
        "expireTime": {
          "comment": "到期时间",
          "type": "int",
          "options": []
        }
      }
    },
    "hGet": {
      "access": "public",
      "comment": "获取字典的某个字段的值",
      "isStatic": false,
      "return": "string",
      "example": "",
      "parameters": {
        "key": {
          "comment": "键名",
          "type": "string",
          "options": []
        },
        "field": {
          "comment": "字段名",
          "type": "string",
          "options": []
        }
      }
    },
    "hSet": {
      "access": "public",
      "comment": "为字典的字段设置值",
      "isStatic": false,
      "return": "long",
      "example": "\n<pre>\n$redis->delete('h')\n$redis->hSet('h', 'key1', 'hello');  \/\/ 1, 'key1' => 'hello' in the hash at \"h\"\n$redis->hGet('h', 'key1');           \/\/ returns \"hello\"\n$redis->hSet('h', 'key1', 'plop');   \/\/ 0, value was replaced.\n$redis->hGet('h', 'key1');           \/\/ returns \"plop\"\n<\/pre>",
      "parameters": {
        "key": {
          "comment": "键名",
          "type": "string",
          "options": []
        },
        "field": {
          "comment": "字段名",
          "type": "string",
          "options": []
        },
        "value": {
          "comment": "字段值",
          "type": "string",
          "options": []
        }
      }
    },
    "hSetNx": {
      "access": "public",
      "comment": "当字典的字段不存在时，为其设置值",
      "isStatic": false,
      "return": "bool",
      "example": "\n<pre>\n$redis->delete('h')\n$redis->hSetNx('h', 'key1', 'hello'); \/\/ TRUE, 'key1' => 'hello' in the hash at \"h\"\n$redis->hSetNx('h', 'key1', 'world'); \/\/ FALSE, 'key1' => 'hello' in the hash at \"h\". No change since the field\nwasn't replaced.\n<\/pre>",
      "parameters": {
        "key": {
          "comment": "键名",
          "type": "string",
          "options": []
        },
        "field": {
          "comment": "字段名",
          "type": "string",
          "options": []
        },
        "value": {
          "comment": "字段值",
          "type": "string",
          "options": []
        }
      }
    },
    "hDel": {
      "access": "public",
      "comment": "删除字典的某个或某些字段",
      "isStatic": false,
      "return": "int",
      "example": "\n<pre>\n$redis->hMSet('h',\narray(\n'f1' => 'v1',\n'f2' => 'v2',\n'f3' => 'v3',\n'f4' => 'v4',\n));\nvar_dump( $redis->hDel('h', 'f1') );        \/\/ int(1)\nvar_dump( $redis->hDel('h', 'f2', 'f3') );  \/\/ int(2)\ns\nvar_dump( $redis->hGetAll('h') );\n\/\/\/\/ Output:\n\/\/  array(1) {\n\/\/    [\"f4\"]=> string(2) \"v4\"\n\/\/  }\n<\/pre>",
      "parameters": {
        "key": {
          "comment": "键名",
          "type": "string",
          "options": []
        },
        "fields": {
          "comment": "字段名",
          "type": "string|array",
          "options": []
        }
      }
    },
    "hLen": {
      "access": "public",
      "comment": "获取字典的字段个数",
      "isStatic": false,
      "return": "int",
      "example": "\n<pre>\n$redis->delete('h')\n$redis->hSet('h', 'key1', 'hello');\n$redis->hSet('h', 'key2', 'plop');\n$redis->hLen('h'); \/\/ returns 2\n<\/pre>",
      "parameters": {
        "key": {
          "comment": "键名",
          "type": "string",
          "options": []
        }
      }
    },
    "hKeys": {
      "access": "public",
      "comment": "获取字典的字段名称列表.",
      "isStatic": false,
      "return": "array",
      "example": "\n<pre>\n$redis->delete('h');\n$redis->hSet('h', 'a', 'x');\n$redis->hSet('h', 'b', 'y');\n$redis->hSet('h', 'c', 'z');\n$redis->hSet('h', 'd', 't');\nvar_dump($redis->hKeys('h'));\n\/\/ Output:\n\/\/ array(4) {\n\/\/ [0]=>\n\/\/ string(1) \"a\"\n\/\/ [1]=>\n\/\/ string(1) \"b\"\n\/\/ [2]=>\n\/\/ string(1) \"c\"\n\/\/ [3]=>\n\/\/ string(1) \"d\"\n\/\/ }\n\/\/ The order is random and corresponds to redis' own internal representation of the set structure.\n<\/pre>",
      "parameters": {
        "key": {
          "comment": "键名",
          "type": "string",
          "options": []
        }
      }
    },
    "hVals": {
      "access": "public",
      "comment": "获取字典的字段值列表",
      "isStatic": false,
      "return": "array",
      "example": "\n<pre>\n$redis->delete('h');\n$redis->hSet('h', 'a', 'x');\n$redis->hSet('h', 'b', 'y');\n$redis->hSet('h', 'c', 'z');\n$redis->hSet('h', 'd', 't');\nvar_dump($redis->hVals('h'));\n\/\/ Output\n\/\/ array(4) {\n\/\/   [0]=>\n\/\/   string(1) \"x\"\n\/\/   [1]=>\n\/\/   string(1) \"y\"\n\/\/   [2]=>\n\/\/   string(1) \"z\"\n\/\/   [3]=>\n\/\/   string(1) \"t\"\n\/\/ }\n\/\/ The order is random and corresponds to redis' own internal representation of the set structure.\n<\/pre>",
      "parameters": {
        "key": {
          "comment": "键名",
          "type": "string",
          "options": []
        }
      }
    },
    "hGetAll": {
      "access": "public",
      "comment": "获取字典所有字段键值对",
      "isStatic": false,
      "return": "array",
      "example": "\n<pre>\n$redis->delete('h');\n$redis->hSet('h', 'a', 'x');\n$redis->hSet('h', 'b', 'y');\n$redis->hSet('h', 'c', 'z');\n$redis->hSet('h', 'd', 't');\nvar_dump($redis->hGetAll('h'));\n\/\/ Output:\n\/\/ array(4) {\n\/\/   [\"a\"]=>\n\/\/   string(1) \"x\"\n\/\/   [\"b\"]=>\n\/\/   string(1) \"y\"\n\/\/   [\"c\"]=>\n\/\/   string(1) \"z\"\n\/\/   [\"d\"]=>\n\/\/   string(1) \"t\"\n\/\/ }\n\/\/ The order is random and corresponds to redis' own internal representation of the set structure.\n<\/pre>",
      "parameters": {
        "key": {
          "comment": "键名",
          "type": "string",
          "options": []
        }
      }
    },
    "hExists": {
      "access": "public",
      "comment": "判断字典的某个字段是否存在.",
      "isStatic": false,
      "return": "bool",
      "example": "\n<pre>\n$redis->hSet('h', 'a', 'x');\n$redis->hExists('h', 'a');               \/\/  TRUE\n$redis->hExists('h', 'NonExistingKey');  \/\/ FALSE\n<\/pre>",
      "parameters": {
        "key": {
          "comment": "键名",
          "type": "string",
          "options": []
        },
        "field": {
          "comment": "字段名",
          "type": "string",
          "options": []
        }
      }
    },
    "hIncrBy": {
      "access": "public",
      "comment": "为指定字段增加指定的值.",
      "isStatic": false,
      "return": "int",
      "example": "\n<pre>\n$redis->delete('h');\n$redis->hIncrBy('h', 'x', 2); \/\/ returns 2: h[x] = 2 now.\n$redis->hIncrBy('h', 'x', 1); \/\/ h[x] ← 2 + 1. Returns 3\n<\/pre>",
      "parameters": {
        "key": {
          "comment": "键名",
          "type": "string",
          "options": []
        },
        "field": {
          "comment": "字段名",
          "type": "string",
          "options": []
        },
        "step": {
          "comment": "自增步长",
          "type": "int",
          "options": []
        }
      }
    },
    "hIncrByFloat": {
      "access": "public",
      "comment": "为指定字段增加指定的值",
      "isStatic": false,
      "return": "",
      "example": "\n<pre>\n$redis = new Redis();\n$redis->connect('127.0.0.1');\n$redis->hset('h', 'float', 3);\n$redis->hset('h', 'int',   3);\nvar_dump( $redis->hIncrByFloat('h', 'float', 1.5) ); \/\/ float(4.5)\nvar_dump( $redis->hGetAll('h') );\n\/\/ Output\narray(2) {\n[\"float\"]=>\nstring(3) \"4.5\"\n[\"int\"]=>\nstring(1) \"3\"\n}\n<\/pre>",
      "parameters": {
        "key": {
          "comment": "键名",
          "type": "string",
          "options": []
        },
        "field": {
          "comment": "字段名",
          "type": "string",
          "options": []
        },
        "step": {
          "comment": "自增步长",
          "type": "double",
          "options": []
        }
      }
    },
    "hMset": {
      "access": "public",
      "comment": "批量设置字典字段的值",
      "isStatic": false,
      "return": "boolean",
      "example": "\n<pre>\n$redis->delete('user:1');\n$redis->hMset('user:1', array('name' => 'Joe', 'salary' => 2000));\n$redis->hIncrBy('user:1', 'salary', 100); \/\/ Joe earns 100 more now.\n<\/pre>",
      "parameters": {
        "key": {
          "comment": "键名",
          "type": "string",
          "options": []
        },
        "fields": {
          "comment": "字段键值对",
          "type": "array",
          "options": []
        }
      }
    },
    "hMget": {
      "access": "public",
      "comment": "批量获取字典的字段值",
      "isStatic": false,
      "return": "array",
      "example": "",
      "parameters": {
        "key": {
          "comment": "键名",
          "type": "string",
          "options": []
        },
        "fields": {
          "comment": "字段名列表",
          "type": "array",
          "options": []
        }
      }
    },
    "multi": {
      "access": "public",
      "comment": "开始一个事务.",
      "isStatic": false,
      "return": "",
      "example": "\n<pre>\n$ret = $redis->multi()\n->set('key1', 'val1')\n->get('key1')\n->set('key2', 'val2')\n->get('key2')\n->exec();\n\/\/$ret == array (\n\/\/    0 => TRUE,\n\/\/    1 => 'val1',\n\/\/    2 => TRUE,\n\/\/    3 => 'val2');\n<\/pre>",
      "parameters": []
    },
    "discard": {
      "access": "public",
      "comment": "取消事务",
      "isStatic": false,
      "return": "",
      "example": "",
      "parameters": []
    },
    "exec": {
      "access": "public",
      "comment": "执行事务",
      "isStatic": false,
      "return": "",
      "example": "",
      "parameters": []
    },
    "pipeline": {
      "access": "public",
      "comment": "开启一个管道",
      "isStatic": false,
      "return": "",
      "example": "",
      "parameters": []
    },
    "watch": {
      "access": "public",
      "comment": "观察某个键在其他客户端的变化情况.",
      "isStatic": false,
      "return": "",
      "example": "\n<pre>\n$redis->watch('x');\n\/\/ long code here during the execution of which other clients could well modify `x`\n$ret = $redis->multi()\n->incr('x')\n->exec();\n\/\/ $ret = FALSE if x has been modified between the call to WATCH and the call to EXEC.\n<\/pre>",
      "parameters": {
        "keys": {
          "comment": "键名",
          "type": "string|array",
          "options": []
        }
      }
    },
    "unwatch": {
      "access": "public",
      "comment": "取消观察某个键在其他客户端的变化情况",
      "isStatic": false,
      "return": "",
      "example": "",
      "parameters": {
        "keys": {
          "comment": "键名",
          "type": "string|array",
          "options": []
        }
      }
    },
    "publish": {
      "access": "public",
      "comment": "将消息发布到消息通道(队列).",
      "isStatic": false,
      "return": "int",
      "example": "$redis->publish('chan-1', 'hello, world!'); \/\/ send message.",
      "parameters": {
        "channel": {
          "comment": "消息频道",
          "type": "string",
          "options": []
        },
        "message": {
          "comment": "消息",
          "type": "string",
          "options": []
        }
      }
    },
    "subscribe": {
      "access": "public",
      "comment": "订阅消息",
      "isStatic": false,
      "return": "mixed",
      "example": "\n<pre>\nfunction f($redis, $chan, $msg) {\nswitch($chan) {\ncase 'chan-1':\n...\nbreak;\ncase 'chan-2':\n...\nbreak;\ncase 'chan-2':\n...\nbreak;\n}\n}\n$redis->subscribe(array('chan-1', 'chan-2', 'chan-3'), 'f'); \/\/ subscribe to 3 chans\n<\/pre>",
      "parameters": {
        "channels": {
          "comment": "订阅的消息频道",
          "type": "array",
          "options": []
        },
        "callback": {
          "comment": "回调函数名称",
          "type": "string|array",
          "options": []
        },
        "value": {
          "comment": "返回值",
          "type": "mixed",
          "options": []
        }
      }
    },
    "psubscribe": {
      "access": "public",
      "comment": "通过匹配模式来订阅这些匹配的消息频道",
      "isStatic": false,
      "return": "",
      "example": "\n<pre>\nfunction psubscribe($redis, $pattern, $chan, $msg) {\necho \"Pattern: $pattern\\n\";\necho \"Channel: $chan\\n\";\necho \"Payload: $msg\\n\";\n}\n<\/pre>",
      "parameters": {
        "patterns": {
          "comment": "匹配模式",
          "type": "array",
          "options": []
        },
        "callback": {
          "comment": "回调函数名称",
          "type": "string|array",
          "options": []
        },
        "value": {
          "comment": "返回值",
          "type": "mixed",
          "options": []
        }
      }
    },
    "unsubscribe": {
      "access": "public",
      "comment": "取消订阅",
      "isStatic": false,
      "return": "",
      "example": "",
      "parameters": {
        "channels": {
          "comment": "订阅的消息频道",
          "type": "array",
          "options": []
        }
      }
    },
    "punsubscribe": {
      "access": "public",
      "comment": "通过匹配模式来取消订阅这些匹配的消息频道",
      "isStatic": false,
      "return": "",
      "example": "",
      "parameters": {
        "patterns": {
          "comment": "匹配模式",
          "type": "array",
          "options": []
        }
      }
    },
    "time": {
      "access": "public",
      "comment": "返回当前redis服务器时间.",
      "isStatic": false,
      "return": "int",
      "example": "\n<pre>\nvar_dump( $redis->time() );\n\/\/ array(2) {\n\/\/   [0] => string(10) \"1342364352\"\n\/\/   [1] => string(6) \"253002\"\n\/\/ }\n<\/pre>",
      "parameters": []
    },
    "role": {
      "access": "public",
      "comment": "返回当前连接的服务器的角色，如master、alone、slave、sentinel",
      "isStatic": false,
      "return": "string",
      "example": "",
      "parameters": []
    },
    "script": {
      "access": "public",
      "comment": "在脚本子系统上执行redis命令",
      "isStatic": false,
      "return": "",
      "example": "\n<pre>\n$redis->script('load', $script);\n$redis->script('flush');\n$redis->script('kill');\n$redis->script('exists', $script1, [$script2, $script3, ...]);\n<\/pre>\nSCRIPT LOAD will return the SHA1 hash of the passed script on success, and FALSE on failure.\nSCRIPT FLUSH should always return TRUE\nSCRIPT KILL will return true if a script was able to be killed and false if not\nSCRIPT EXISTS will return an array with TRUE or FALSE for each passed script",
      "parameters": {
        "command": {
          "comment": "redis命令",
          "type": "string",
          "options": []
        },
        "script": {
          "comment": "脚本",
          "type": "string|...",
          "options": []
        }
      }
    },
    "debug": {
      "access": "public",
      "comment": "调试命令(不建议使用)",
      "isStatic": false,
      "return": "",
      "example": "",
      "parameters": []
    },
    "dump": {
      "access": "public",
      "comment": "将某个键导出为一个二进制数据.",
      "isStatic": false,
      "return": "string",
      "example": "\n<pre>\n$redis->set('foo', 'bar');\n$val = $redis->dump('foo'); \/\/ $val will be the Redis encoded key value\n<\/pre>",
      "parameters": {
        "key": {
          "comment": "键名",
          "type": "string",
          "options": []
        }
      }
    },
    "restore": {
      "access": "public",
      "comment": "将dump导出的二进制数据恢复到可读的字符串.",
      "isStatic": false,
      "return": "",
      "example": "\n<pre>\n$redis->set('foo', 'bar');\n$val = $redis->dump('foo');\n$redis->restore('bar', 0, $val); \/\/ The key 'bar', will now be equal to the key 'foo'\n<\/pre>",
      "parameters": {
        "key": {
          "comment": "键名",
          "type": "string",
          "options": []
        },
        "ttl": {
          "comment": "有效期",
          "type": "int",
          "options": []
        },
        "value": {
          "comment": "dump导出的二进制数据",
          "type": "string",
          "options": []
        }
      }
    },
    "migrate": {
      "access": "public",
      "comment": "将某个键迁移到其他的Redis实例中",
      "isStatic": false,
      "return": "",
      "example": "\n<pre>\n$redis->migrate('backup', 6379, 'foo', 0, 3600);\n<\/pre>",
      "parameters": {
        "host": {
          "comment": "目标主机",
          "type": "string",
          "options": []
        },
        "port": {
          "comment": "目标主机端口",
          "type": "int",
          "options": []
        },
        "keys": {
          "comment": "迁移的键",
          "type": "string|array",
          "options": []
        },
        "database": {
          "comment": "目标数据库",
          "type": "int",
          "options": []
        },
        "timeout": {
          "comment": "超时时间",
          "type": "int",
          "options": []
        },
        "copy": {
          "comment": "是否复制",
          "type": "boolean",
          "options": []
        },
        "replace": {
          "comment": "是否替换",
          "type": "boolean",
          "options": []
        }
      }
    },
    "getLastError": {
      "access": "public",
      "comment": "获取上次错误信息",
      "isStatic": false,
      "return": "string",
      "example": "\n<pre>\n$redis->eval('this-is-not-lua');\n$err = $redis->getLastError();\n\/\/ \"ERR Error compiling script (new function): user_script:1: '=' expected near '-'\"\n<\/pre>",
      "parameters": []
    },
    "clearLastError": {
      "access": "public",
      "comment": "清除上次错误信息",
      "isStatic": false,
      "return": "bool",
      "example": "\n<pre>\n$redis->set('x', 'a');\n$redis->incr('x');\n$err = $redis->getLastError();\n\/\/ \"ERR value is not an integer or out of range\"\n$redis->clearLastError();\n$err = $redis->getLastError();\n\/\/ NULL\n<\/pre>",
      "parameters": []
    },
    "_prefix": {
      "access": "public",
      "comment": "设置键前缀",
      "isStatic": false,
      "return": "string",
      "example": "\n<pre>\n$redis->setOption(Redis::OPT_PREFIX, 'my-prefix:');\n$redis->_prefix('my-value'); \/\/ Will return 'my-prefix:my-value'\n<\/pre>",
      "parameters": {
        "prefix": {
          "comment": "前缀",
          "type": "string",
          "options": []
        }
      }
    },
    "_serialize": {
      "access": "public",
      "comment": "用于手动序列化.",
      "isStatic": false,
      "return": "",
      "example": "\n<pre>\n$redis->setOption(Redis::OPT_SERIALIZER, Redis::SERIALIZER_NONE);\n$redis->_serialize(\"foo\"); \/\/ returns \"foo\"\n$redis->_serialize(Array()); \/\/ Returns \"Array\"\n$redis->_serialize(new stdClass()); \/\/ Returns \"Object\"\n$redis->setOption(Redis::OPT_SERIALIZER, Redis::SERIALIZER_PHP);\n$redis->_serialize(\"foo\"); \/\/ Returns 's:3:\"foo\";'\n<\/pre>",
      "parameters": {
        "value": {
          "comment": "被序列化的值",
          "type": "string",
          "options": []
        }
      }
    },
    "_unserialize": {
      "access": "public",
      "comment": "反序列化方法.",
      "isStatic": false,
      "return": "",
      "example": "\n<pre>\n$redis->setOption(Redis::OPT_SERIALIZER, Redis::SERIALIZER_PHP);\n$redis->_unserialize('a:3:{i:0;i:1;i:1;i:2;i:2;i:3;}'); \/\/ Will return Array(1,2,3)\n<\/pre>",
      "parameters": {
        "value": {
          "comment": "被反序列化的值",
          "type": "string",
          "options": []
        }
      }
    },
    "client": {
      "access": "public",
      "comment": "获取客户端相关参数或进行相关操作",
      "isStatic": false,
      "return": "",
      "example": "",
      "parameters": {
        "command": {
          "comment": "命令(CLIENT LIST\nCLIENT GETNAME\nCLIENT SETNAME [name]\nCLIENT KILL [ip:port]\n)",
          "type": "string",
          "options": []
        },
        "args": {
          "comment": "参数",
          "type": "string",
          "options": []
        }
      }
    },
    "command": {
      "access": "public",
      "comment": "获取所有命令列表",
      "isStatic": false,
      "return": "array",
      "example": "",
      "parameters": []
    },
    "scan": {
      "access": "public",
      "comment": "扫描键空间.",
      "isStatic": false,
      "return": "array",
      "example": "\n<pre>\n$iterator = null;\nwhile($keys = $redis->scan($iterator)) {\nforeach($keys as $key) {\necho $key . PHP_EOL;\n}\n}\n<\/pre>",
      "parameters": {
        "i_iterator": {
          "comment": "迭代器",
          "type": "Long|NULL",
          "options": []
        },
        "str_pattern": {
          "comment": "匹配的模式",
          "type": "string",
          "options": []
        },
        "i_count": {
          "comment": "每次迭代的长度",
          "type": "int",
          "options": []
        }
      }
    },
    "hscan": {
      "access": "public",
      "comment": "扫描hash的键",
      "isStatic": false,
      "return": "",
      "example": "",
      "parameters": {
        "str_key": {
          "comment": "键值",
          "type": "string",
          "options": []
        },
        "i_iterator": {
          "comment": "迭代器",
          "type": "Long|NULL",
          "options": []
        },
        "str_pattern": {
          "comment": "匹配的模式",
          "type": "string",
          "options": []
        },
        "i_count": {
          "comment": "每次迭代的长度",
          "type": "int",
          "options": []
        }
      }
    },
    "zscan": {
      "access": "public",
      "comment": "扫描有序集合的键",
      "isStatic": false,
      "return": "",
      "example": "",
      "parameters": {
        "str_key": {
          "comment": "键值",
          "type": "string",
          "options": []
        },
        "i_iterator": {
          "comment": "迭代器",
          "type": "Long|NULL",
          "options": []
        },
        "str_pattern": {
          "comment": "匹配的模式",
          "type": "string",
          "options": []
        },
        "i_count": {
          "comment": "每次迭代的长度",
          "type": "int",
          "options": []
        }
      }
    },
    "sscan": {
      "access": "public",
      "comment": "扫描集合的键",
      "isStatic": false,
      "return": "",
      "example": "",
      "parameters": {
        "str_key": {
          "comment": "键值",
          "type": "string",
          "options": []
        },
        "i_iterator": {
          "comment": "迭代器",
          "type": "Long|NULL",
          "options": []
        },
        "str_pattern": {
          "comment": "匹配的模式",
          "type": "string",
          "options": []
        },
        "i_count": {
          "comment": "每次迭代的长度",
          "type": "int",
          "options": []
        }
      }
    },
    "pfadd": {
      "access": "public",
      "comment": "将所有元素参数添加到 HyperLogLog 数据结构中",
      "isStatic": false,
      "return": "",
      "example": "",
      "parameters": {
        "key": {
          "comment": "键名",
          "type": "string",
          "options": []
        },
        "element": {
          "comment": "元素",
          "type": "string|array|...",
          "options": []
        }
      }
    },
    "pfcount": {
      "access": "public",
      "comment": "返回给定 HyperLogLog 的基数估算值",
      "isStatic": false,
      "return": "",
      "example": "",
      "parameters": {
        "keys": {
          "comment": "键名",
          "type": "string|array",
          "options": []
        }
      }
    },
    "pfmerge": {
      "access": "public",
      "comment": "将多个 HyperLogLog 合并为一个 HyperLogLog ，合并后的 HyperLogLog 的基数估算值是通过对所有 给定 HyperLogLog 进行并集计算得出的",
      "isStatic": false,
      "return": "",
      "example": "",
      "parameters": {
        "dstKey": {
          "comment": "目标键名",
          "type": "string|array",
          "options": []
        },
        "sourceKeys": {
          "comment": "源键名",
          "type": "string|array",
          "options": []
        }
      }
    },
    "getOption": {
      "access": "public",
      "comment": "获取客户端选项",
      "isStatic": false,
      "return": "int",
      "example": "\n\/\/ return Redis::SERIALIZER_NONE, Redis::SERIALIZER_PHP, or Redis::SERIALIZER_IGBINARY.\n$redis->getOption(Redis::OPT_SERIALIZER);",
      "parameters": {
        "optionName": {
          "comment": "选项名",
          "type": "string",
          "options": []
        }
      }
    },
    "setOption": {
      "access": "public",
      "comment": "设置客户端选项.",
      "isStatic": false,
      "return": "bool:",
      "example": "\n<pre>\n$redis->setOption(Redis::OPT_SERIALIZER, Redis::SERIALIZER_NONE);        \/\/ don't serialize data\n$redis->setOption(Redis::OPT_SERIALIZER, Redis::SERIALIZER_PHP);         \/\/ use built-in serialize\/unserialize\n$redis->setOption(Redis::OPT_SERIALIZER, Redis::SERIALIZER_IGBINARY);    \/\/ use igBinary serialize\/unserialize\n$redis->setOption(Redis::OPT_PREFIX, 'myAppName:');                      \/\/ use custom prefix on all keys\n<\/pre>",
      "parameters": {
        "optionName": {
          "comment": "选项名",
          "type": "string",
          "options": []
        },
        "optionValue": {
          "comment": "选项值",
          "type": "string",
          "options": []
        }
      }
    },
    "config": {
      "access": "public",
      "comment": "获取或设置配置项.",
      "isStatic": false,
      "return": "array",
      "example": "\n<pre>\n$redis->config(\"GET\", \"*max-*-entries*\");\n$redis->config(\"SET\", \"dir\", \"\/var\/run\/redis\/dumps\/\");\n<\/pre>",
      "parameters": {
        "operation": {
          "comment": "操作(SET或GET)",
          "type": "string",
          "options": []
        },
        "key": {
          "comment": "配置项或配置项匹配模式",
          "type": "string",
          "options": []
        },
        "value": {
          "comment": "配置值",
          "type": "string",
          "options": []
        }
      }
    },
    "slowlog": {
      "access": "public",
      "comment": "获取慢操作日志",
      "isStatic": false,
      "return": "",
      "example": "",
      "parameters": {
        "command": {
          "comment": "执行的命令",
          "type": "string",
          "options": []
        },
        "length": {
          "comment": "获取条目数",
          "type": "int",
          "options": []
        }
      }
    },
    "rawcommand": {
      "access": "public",
      "comment": "在redis服务器上执行命令",
      "isStatic": false,
      "return": "",
      "example": "",
      "parameters": {
        "command": {
          "comment": "执行的命令",
          "type": "string",
          "options": []
        },
        "args": {
          "comment": "参数",
          "type": "string|array",
          "options": []
        }
      }
    },
    "getHost": {
      "access": "public",
      "comment": "获取当前连接HOST",
      "isStatic": false,
      "return": "",
      "example": "",
      "parameters": []
    },
    "getPort": {
      "access": "public",
      "comment": "获取当前连接的端口",
      "isStatic": false,
      "return": "",
      "example": "",
      "parameters": []
    },
    "getDBNum": {
      "access": "public",
      "comment": "获取数据库的数量",
      "isStatic": false,
      "return": "",
      "example": "",
      "parameters": []
    },
    "getTimeout": {
      "access": "public",
      "comment": "获取连接超时时间",
      "isStatic": false,
      "return": "",
      "example": "",
      "parameters": []
    },
    "getReadTimeout": {
      "access": "public",
      "comment": "获取读操作超时暗",
      "isStatic": false,
      "return": "",
      "example": "",
      "parameters": []
    },
    "getPersistentID": {
      "access": "public",
      "comment": "获取当前正在使用的持久化操作的ID",
      "isStatic": false,
      "return": "",
      "example": "",
      "parameters": []
    },
    "getAuth": {
      "access": "public",
      "comment": "获取验证的字符串",
      "isStatic": false,
      "return": "string",
      "example": "",
      "parameters": []
    },
    "isConnected": {
      "access": "public",
      "comment": "是否连接成功",
      "isStatic": false,
      "return": "bool",
      "example": "",
      "parameters": []
    },
    "getMode": {
      "access": "public",
      "comment": "获取运行模式，如 ATOMIC\/MULTI\/PIPELINE",
      "isStatic": false,
      "return": "int",
      "example": "$redis->getMode();",
      "parameters": []
    },
    "wait": {
      "access": "public",
      "comment": "该命令将阻止当前客户端，直到所有先前的写入命令成功传输并至少由指定数量的从节点进行确认",
      "isStatic": false,
      "return": "context",
      "example": "$redis->wait(2, 1000);",
      "parameters": {
        "count": {
          "comment": "从节点数量",
          "type": "int",
          "options": []
        },
        "timeout": {
          "comment": "超时时间",
          "type": "int",
          "options": []
        }
      }
    },
    "pubsub": {
      "access": "public",
      "comment": "查看订阅与发布系统状态，它由数个不同格式的子命令组成.",
      "isStatic": false,
      "return": "array|int",
      "example": "\n<pre>\n$redis->pubsub('channels'); \/\/ All channels\n$redis->pubsub('channels', '*pattern*'); \/\/ Just channels matching your pattern\n$redis->pubsub('numsub', array('chan1', 'chan2')); \/\/ Get subscriber counts for 'chan1' and 'chan2'\n$redis->pubsub('numpat'); \/\/ Get the number of pattern subscribers\n<\/pre>",
      "parameters": {
        "subcommand": {
          "comment": "子命令(可以是channels, numsub, numpat)",
          "type": "string",
          "options": []
        },
        "args": {
          "comment": "参数",
          "type": "string|array",
          "options": []
        }
      }
    },
    "open": {
      "access": "public",
      "comment": "连接redis服务器或打开一个已经连接的redis服务器",
      "isStatic": false,
      "return": "",
      "example": "",
      "parameters": {
        "host": {
          "comment": "主机IP",
          "type": "string",
          "options": []
        },
        "port": {
          "comment": "端口",
          "type": "int",
          "options": []
        },
        "timeout": {
          "comment": "连接超时时间(以秒为单位)",
          "type": "float",
          "options": []
        },
        "reserved": {
          "comment": "当使用retry_interval时该值为NULL",
          "type": "mixed",
          "options": []
        },
        "retry_interval": {
          "comment": "重试间隔",
          "type": "int",
          "options": []
        },
        "read_timeout": {
          "comment": "读操作超时时间",
          "type": "float",
          "options": []
        }
      }
    },
    "popen": {
      "access": "public",
      "comment": "连接redis服务器或打开一个已经连接的redis服务器(长连接)",
      "isStatic": false,
      "return": "",
      "example": "",
      "parameters": {
        "host": {
          "comment": "主机IP",
          "type": "string",
          "options": []
        },
        "port": {
          "comment": "端口",
          "type": "int",
          "options": []
        },
        "timeout": {
          "comment": "连接超时时间(以秒为单位)",
          "type": "float",
          "options": []
        },
        "reserved": {
          "comment": "当使用retry_interval时该值为NULL",
          "type": "mixed",
          "options": []
        },
        "retry_interval": {
          "comment": "重试间隔",
          "type": "int",
          "options": []
        },
        "read_timeout": {
          "comment": "读操作超时时间",
          "type": "float",
          "options": []
        }
      }
    },
    "lLen": {
      "access": "public",
      "comment": "返回列表的长度",
      "isStatic": false,
      "return": "long | bool",
      "example": "",
      "parameters": {
        "key": {
          "comment": "键名",
          "type": "string|...|array",
          "options": []
        }
      }
    },
    "sGetMembers": {
      "access": "public",
      "comment": "返回集合的所有成员",
      "isStatic": false,
      "return": "array",
      "example": "\n<pre>\n$redis->delete('s');\n$redis->sAdd('s', 'a');\n$redis->sAdd('s', 'b');\n$redis->sAdd('s', 'a');\n$redis->sAdd('s', 'c');\nvar_dump($redis->sMembers('s'));\n\/\/array(3) {\n\/\/  [0]=>\n\/\/  string(1) \"c\"\n\/\/  [1]=>\n\/\/  string(1) \"a\"\n\/\/  [2]=>\n\/\/  string(1) \"b\"\n\/\/}\n\/\/ The order is random and corresponds to redis' own internal representation of the set structure.\n<\/pre>",
      "parameters": {
        "key": {
          "comment": "键名",
          "type": "string",
          "options": []
        }
      }
    },
    "mget": {
      "access": "public",
      "comment": "批量获取键名",
      "isStatic": false,
      "return": "",
      "example": "\n<pre>\n$redis->delete('x', 'y', 'z', 'h');\t\/\/ remove x y z\n$redis->mset(array('x' => 'a', 'y' => 'b', 'z' => 'c'));\n$redis->hset('h', 'field', 'value');\nvar_dump($redis->mget(array('x', 'y', 'z', 'h')));\n\/\/ Output:\n\/\/ array(3) {\n\/\/ [0]=>\n\/\/ string(1) \"a\"\n\/\/ [1]=>\n\/\/ string(1) \"b\"\n\/\/ [2]=>\n\/\/ string(1) \"c\"\n\/\/ [3]=>\n\/\/ bool(false)\n\/\/ }\n<\/pre>",
      "parameters": {
        "keys": {
          "comment": "键名数组",
          "type": "array",
          "options": []
        }
      }
    },
    "expire": {
      "access": "public",
      "comment": "设置键的有效期",
      "isStatic": false,
      "return": "boolean",
      "example": "",
      "parameters": {
        "key": {
          "comment": "键名",
          "type": "string",
          "options": []
        },
        "ttl": {
          "comment": "有效期(秒数)",
          "type": "int",
          "options": []
        }
      }
    },
    "zunionstore": {
      "access": "public",
      "comment": "将两个有序集合的并集存入到一个指定的键中",
      "isStatic": false,
      "return": "int",
      "example": "\n<pre>\n$redis->delete('k1');\n$redis->delete('k2');\n$redis->delete('k3');\n$redis->delete('ko1');\n$redis->delete('ko2');\n$redis->delete('ko3');\n$redis->zAdd('k1', 0, 'val0');\n$redis->zAdd('k1', 1, 'val1');\n$redis->zAdd('k2', 2, 'val2');\n$redis->zAdd('k2', 3, 'val3');\n$redis->zUnion('ko1', array('k1', 'k2')); \/\/ 4, 'ko1' => array('val0', 'val1', 'val2', 'val3')\n\/\/ Weighted zUnion\n$redis->zUnion('ko2', array('k1', 'k2'), array(1, 1)); \/\/ 4, 'ko2' => array('val0', 'val1', 'val2', 'val3')\n$redis->zUnion('ko3', array('k1', 'k2'), array(5, 1)); \/\/ 4, 'ko3' => array('val0', 'val2', 'val3', 'val1')\n<\/pre>",
      "parameters": {
        "dstKey": {
          "comment": "目标集合键名",
          "type": "string",
          "options": []
        },
        "zsetKeys": {
          "comment": "集合键名",
          "type": "array",
          "options": []
        },
        "zsetKeysWeight": {
          "comment": "集合键对应的权重",
          "type": "array",
          "options": []
        },
        "aggregateFunction": {
          "comment": "合并使用的函数(SUM, MIN, 或 MAX)",
          "type": "string",
          "options": []
        }
      }
    },
    "zinterstore": {
      "access": "public",
      "comment": "将两个有序集合的交集存入到一个指定的键中",
      "isStatic": false,
      "return": "int",
      "example": "\n<pre>\n$redis->delete('k1');\n$redis->delete('k2');\n$redis->delete('k3');\n$redis->delete('ko1');\n$redis->delete('ko2');\n$redis->delete('ko3');\n$redis->delete('ko4');\n$redis->zAdd('k1', 0, 'val0');\n$redis->zAdd('k1', 1, 'val1');\n$redis->zAdd('k1', 3, 'val3');\n$redis->zAdd('k2', 2, 'val1');\n$redis->zAdd('k2', 3, 'val3');\n$redis->zInter('ko1', array('k1', 'k2'));               \/\/ 2, 'ko1' => array('val1', 'val3')\n$redis->zInter('ko2', array('k1', 'k2'), array(1, 1));  \/\/ 2, 'ko2' => array('val1', 'val3')\n\/\/ Weighted zInter\n$redis->zInter('ko3', array('k1', 'k2'), array(1, 5), 'min'); \/\/ 2, 'ko3' => array('val1', 'val3')\n$redis->zInter('ko4', array('k1', 'k2'), array(1, 5), 'max'); \/\/ 2, 'ko4' => array('val3', 'val1')\n<\/pre>",
      "parameters": {
        "dstKey": {
          "comment": "目标集合键名",
          "type": "string",
          "options": []
        },
        "zsetKeys": {
          "comment": "集合键名",
          "type": "array",
          "options": []
        },
        "zsetKeysWeight": {
          "comment": "集合键对应的权重",
          "type": "array",
          "options": []
        },
        "aggregateFunction": {
          "comment": "合并使用的函数(SUM, MIN, 或 MAX)",
          "type": "string",
          "options": []
        }
      }
    },
    "zRemove": {
      "access": "public",
      "comment": "删除有序集合中的某个成员",
      "isStatic": false,
      "return": "int",
      "example": "",
      "parameters": {
        "key": {
          "comment": "集合键名",
          "type": "string",
          "options": []
        },
        "member": {
          "comment": "成员值",
          "type": "string",
          "options": []
        }
      }
    },
    "zRem": {
      "access": "public",
      "comment": "删除有序集合中的某个成员",
      "isStatic": false,
      "return": "int",
      "example": "",
      "parameters": {
        "key": {
          "comment": "集合键名",
          "type": "string",
          "options": []
        },
        "member": {
          "comment": "成员值",
          "type": "string",
          "options": []
        }
      }
    },
    "zRemoveRangeByScore": {
      "access": "public",
      "comment": "根据排序值范围来删除成员",
      "isStatic": false,
      "return": "long",
      "example": "",
      "parameters": {
        "key": {
          "comment": "集合键名",
          "type": "string",
          "options": []
        },
        "start": {
          "comment": "开始排序值",
          "type": "double",
          "options": []
        },
        "end": {
          "comment": "结束排序值",
          "type": "double",
          "options": []
        }
      }
    },
    "zRemRangeByScore": {
      "access": "public",
      "comment": "根据排序值范围来删除成员",
      "isStatic": false,
      "return": "long",
      "example": "",
      "parameters": {
        "key": {
          "comment": "集合键名",
          "type": "string",
          "options": []
        },
        "start": {
          "comment": "开始排序值",
          "type": "double",
          "options": []
        },
        "end": {
          "comment": "结束排序值",
          "type": "double",
          "options": []
        }
      }
    },
    "zRemRangeByRank": {
      "access": "public",
      "comment": "根据排序范围删除成员",
      "isStatic": false,
      "return": "int",
      "example": "\n<pre>\n$redis->zAdd('key', 1, 'one');\n$redis->zAdd('key', 2, 'two');\n$redis->zAdd('key', 3, 'three');\n$redis->zRemRangeByRank('key', 0, 1); \/\/ 2\n$redis->zRange('key', 0, -1, array('withscores' => TRUE)); \/\/ array('three' => 3)\n<\/pre>",
      "parameters": {
        "key": {
          "comment": "集合键名",
          "type": "string",
          "options": []
        },
        "start": {
          "comment": "开始排序值",
          "type": "double",
          "options": []
        },
        "end": {
          "comment": "结束排序值",
          "type": "double",
          "options": []
        }
      }
    },
    "zSize": {
      "access": "public",
      "comment": "获取有序集合的成员数",
      "isStatic": false,
      "return": "int",
      "example": "\n<pre>\n$redis->zAdd('key', 0, 'val0');\n$redis->zAdd('key', 2, 'val2');\n$redis->zAdd('key', 10, 'val10');\n$redis->zCard('key');            \/\/ 3\n<\/pre>",
      "parameters": {
        "key": {
          "comment": "集合键名",
          "type": "string",
          "options": []
        }
      }
    },
    "substr": {
      "access": "public",
      "comment": "获取一个键值的子字符串",
      "isStatic": false,
      "return": "string:",
      "example": "\n<pre>\n$redis->set('key', 'string value');\n$redis->getRange('key', 0, 5);   \/\/ 'string'\n$redis->getRange('key', -5, -1); \/\/ 'value'\n<\/pre>",
      "parameters": {
        "key": {
          "comment": "键名",
          "type": "string",
          "options": []
        },
        "start": {
          "comment": "开始位置",
          "type": "int",
          "options": []
        },
        "end": {
          "comment": "结束位置",
          "type": "int",
          "options": []
        }
      }
    },
    "rename": {
      "access": "public",
      "comment": "给键重命名",
      "isStatic": false,
      "return": "boolean",
      "example": "",
      "parameters": {
        "srcKey": {
          "comment": "旧键名",
          "type": "string",
          "options": []
        },
        "dstKey": {
          "comment": "新键名",
          "type": "string",
          "options": []
        }
      }
    },
    "del": {
      "access": "public",
      "comment": "删除一个或多个键",
      "isStatic": false,
      "return": "int",
      "example": "$redis->delete('key1', 'key2'); \n$redis->delete(array('key3', 'key4')); ",
      "parameters": {
        "keys": {
          "comment": "键名",
          "type": "array|string",
          "options": []
        }
      }
    },
    "keys": {
      "access": "public",
      "comment": "根据匹配模式获取键名(如*)",
      "isStatic": false,
      "return": "array",
      "example": "\n$allKeys = $redis->keys('*');\n$keyWithUserPrefix = $redis->keys('user*');",
      "parameters": {
        "pattern": {
          "comment": "匹配模式",
          "type": "string",
          "options": []
        }
      }
    },
    "lrem": {
      "access": "public",
      "comment": "从列表中删除指定值的元素。 如果count为零，则删除所有匹配的元素。 如果计数是负数，则元素从尾部移到头部。",
      "isStatic": false,
      "return": "long | bool",
      "example": "",
      "parameters": {
        "key": {
          "comment": "键名",
          "type": "string",
          "options": []
        },
        "value": {
          "comment": "元素值",
          "type": "string",
          "options": []
        },
        "count": {
          "comment": "删除的个数",
          "type": "int",
          "options": []
        }
      }
    },
    "ltrim": {
      "access": "public",
      "comment": "删除指定范围外的其他元素",
      "isStatic": false,
      "return": "array | boolean",
      "example": "",
      "parameters": {
        "key": {
          "comment": "键名",
          "type": "string",
          "options": []
        },
        "start": {
          "comment": "开始索引",
          "type": "int",
          "options": []
        },
        "end": {
          "comment": "结束索引",
          "type": "int",
          "options": []
        }
      }
    },
    "lindex": {
      "access": "public",
      "comment": "获取列表中指定索引的值",
      "isStatic": false,
      "return": "string | boolean",
      "example": "",
      "parameters": {
        "key": {
          "comment": "键名",
          "type": "string",
          "options": []
        },
        "index": {
          "comment": "索引值",
          "type": "int",
          "options": []
        }
      }
    },
    "lrange": {
      "access": "public",
      "comment": "获取列表指定范围的值",
      "isStatic": false,
      "return": "array",
      "example": "",
      "parameters": {
        "key": {
          "comment": "键名",
          "type": "string",
          "options": []
        },
        "start": {
          "comment": "索引开始值",
          "type": "int",
          "options": []
        },
        "end": {
          "comment": "索引结束值",
          "type": "int",
          "options": []
        }
      }
    },
    "scard": {
      "access": "public",
      "comment": "返回集合的元素个数",
      "isStatic": false,
      "return": "long",
      "example": "",
      "parameters": {
        "key": {
          "comment": "键名",
          "type": "string",
          "options": []
        }
      }
    },
    "srem": {
      "access": "public",
      "comment": "删除集合元素",
      "isStatic": false,
      "return": "long",
      "example": "",
      "parameters": {
        "key": {
          "comment": "键名",
          "type": "string",
          "options": []
        },
        "member": {
          "comment": "成员",
          "type": "string|...",
          "options": []
        }
      }
    },
    "sismember": {
      "access": "public",
      "comment": "是否包含某个成员",
      "isStatic": false,
      "return": "boolean",
      "example": "",
      "parameters": {
        "key": {
          "comment": "键名",
          "type": "string",
          "options": []
        },
        "member": {
          "comment": "成员值",
          "type": "string",
          "options": []
        }
      }
    },
    "zReverseRange": {
      "access": "public",
      "comment": "获取有序集合中指定范围的成员(倒序排列)",
      "isStatic": false,
      "return": "array",
      "example": "\n<pre>\n$redis->zAdd('key', 0, 'val0');\n$redis->zAdd('key', 2, 'val2');\n$redis->zAdd('key', 10, 'val10');\n$redis->zRevRange('key', 0, -1); \/\/ array('val10', 'val2', 'val0')\n\/\/ with scores\n$redis->zRevRange('key', 0, -1, true); \/\/ array('val10' => 10, 'val2' => 2, 'val0' => 0)\n<\/pre>",
      "parameters": {
        "key": {
          "comment": "集合键名",
          "type": "string",
          "options": []
        },
        "start": {
          "comment": "索引开始值",
          "type": "long",
          "options": []
        },
        "end": {
          "comment": "索引结束值",
          "type": "long",
          "options": []
        },
        "withScores": {
          "comment": "是否返回成员的排序值",
          "type": "boolean",
          "options": []
        }
      }
    },
    "sendEcho": {
      "access": "public",
      "comment": "向redis发送一个字符串，而且redis服务器将返回一个相同的字符串",
      "isStatic": false,
      "return": "string",
      "example": "",
      "parameters": {
        "str": {
          "comment": "发送的字符串",
          "type": "string",
          "options": []
        }
      }
    },
    "evaluate": {
      "access": "public",
      "comment": "执行lua脚本",
      "isStatic": false,
      "return": "mixed",
      "example": "",
      "parameters": {
        "script": {
          "comment": "脚本",
          "type": "string",
          "options": []
        },
        "args": {
          "comment": "脚本参数",
          "type": "array",
          "options": []
        },
        "num_keys": {
          "comment": "应该进入KEYS数组的参数个数",
          "type": "int",
          "options": []
        }
      }
    },
    "eval": {
      "access": "public",
      "comment": "执行lua脚本",
      "isStatic": false,
      "return": "mixed",
      "example": "",
      "parameters": {
        "script": {
          "comment": "脚本",
          "type": "string",
          "options": []
        },
        "args": {
          "comment": "脚本参数",
          "type": "array",
          "options": []
        },
        "num_keys": {
          "comment": "应该进入KEYS数组的参数个数",
          "type": "int",
          "options": []
        }
      }
    },
    "evaluateSha": {
      "access": "public",
      "comment": "从脚本的SHA1散列而不是脚本本身执行LUA脚本",
      "isStatic": false,
      "return": "",
      "example": "$script = 'return 1';\n$sha = $redis->script('load', $script);\n$redis->evalSha($sha); \/\/ Returns 1",
      "parameters": {
        "script_sha": {
          "comment": "脚本的散列值",
          "type": "string",
          "options": []
        },
        "args": {
          "comment": "脚本参数",
          "type": "array",
          "options": []
        },
        "num_keys": {
          "comment": "应该进入KEYS数组的参数个数",
          "type": "int",
          "options": []
        }
      }
    },
    "evalSha": {
      "access": "public",
      "comment": "从脚本的SHA1散列而不是脚本本身执行LUA脚本",
      "isStatic": false,
      "return": "",
      "example": "$script = 'return 1';\n$sha = $redis->script('load', $script);\n$redis->evalSha($sha); \/\/ Returns 1",
      "parameters": {
        "script_sha": {
          "comment": "脚本的散列值",
          "type": "string",
          "options": []
        },
        "args": {
          "comment": "脚本参数",
          "type": "array",
          "options": []
        },
        "num_keys": {
          "comment": "应该进入KEYS数组的参数个数",
          "type": "int",
          "options": []
        }
      }
    }
  }
}