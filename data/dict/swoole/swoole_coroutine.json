{"object":{"name":"Swoole\\Coroutine"},"comment":"swoole内置协程(协程可以理解为纯用户态的线程，其通过协作而不是抢占来进行切换。相对于进程或者线程，协程所有的操作都可以在用户态完成，创建和切换的消耗更低。Swoole可以为每一个请求创建对应的协程，根据IO的状态来合理的调度协程)","namespace":"Swoole","interfaces":[],"consts":[],"properties":[],"methods":{"create":{"access":"public","comment":"创建一个新的协程，并立即执行","isStatic":true,"return":"bool","example":"","parameters":{"func":{"comment":"协程执行的代码","type":"callable","options":[]}}},"set":{"access":"public","comment":"设置选项","isStatic":true,"return":"","example":"","parameters":{"options":{"comment":"选项","type":"array","options":[]}}},"cli_wait":{"access":"public","comment":"获取等待的协程数量","isStatic":true,"return":"int","example":"","parameters":[]},"suspend":{"access":"public","comment":"挂起当前协程","isStatic":true,"return":"","example":"","parameters":{"uid":{"comment":"要挂起协程的ID","type":"string","options":[]}}},"resume":{"access":"public","comment":"恢复某个协程，使其继续运行","isStatic":true,"return":"","example":"","parameters":{"uid":{"comment":"为要恢复的协程ID，在协程内可以使用getuid获取到协程的ID","type":"string","options":[]}}},"getuid":{"access":"public","comment":"获取当前协程的唯一ID","isStatic":true,"return":"int","example":"","parameters":[]},"sleep":{"access":"public","comment":"进入等待状态。相当于PHP的sleep函数，不同的是Coroutine::sleep是协程调度器实现的，底层会yield当前协程，让出时间片，并添加一个异步定时器，当超时时间到达时重新resume当前协程，恢复运行。使用sleep接口可以方便地实现超时等待功能。","isStatic":true,"return":"","example":"","parameters":{"seconds":{"comment":"为睡眠的时间，单位为秒，支持浮点型，最小精度为毫秒","type":"float","options":[]}}},"fgets":{"access":"public","comment":"协程方式按行读取文件内容","isStatic":true,"return":"","example":"","parameters":{"handle":{"comment":"文件句柄(文件流)","type":"resource","options":[]}}},"fread":{"access":"public","comment":"协程读取文件","isStatic":true,"return":"","example":"","parameters":{"handle":{"comment":"文件句柄(文件流)","type":"resource","options":[]},"length":{"comment":"读取的长度","type":"int","options":[]}}},"readFile":{"access":"public","comment":"协程读取文件","isStatic":true,"return":"","example":"","parameters":{"filename":{"comment":"文件名称","type":"string","options":[]}}},"fwrite":{"access":"public","comment":"协程写入文件","isStatic":true,"return":"","example":"","parameters":{"handle":{"comment":"文件句柄","type":"resource","options":[]},"string":{"comment":"写入的数据","type":"string","options":[]},"length":{"comment":"写入的数据长度","type":"int","options":[]}}},"writeFile":{"access":"public","comment":"协程写入文件","isStatic":true,"return":"bool","example":"","parameters":{"filename":{"comment":"文件名","type":"string","options":[]},"content":{"comment":"写入的数据","type":"string","options":[]},"flags":{"comment":"为写入的选项，可以使用FILE_APPEND表示追加到文件末尾，默认会清空当前文件内容","type":"int","options":[]}}},"gethostbyname":{"access":"public","comment":"将域名解析为IP，基于同步的线程池模拟实现。底层自动进行协程调度","isStatic":true,"return":"","example":"","parameters":{"domain_name":{"comment":"域名或IP","type":"string","options":[]},"family":{"comment":"使用的协议族","type":"int","options":[]}}},"getaddrinfo":{"access":"public","comment":"进行DNS解析，查询域名对应的IP地址，与gethostbyname不同，getaddrinfo支持更多参数设置，而且会返回多个IP结果。","isStatic":true,"return":"array | bool","example":"","parameters":{"hostname":{"comment":"主机名","type":"string","options":[]},"family":{"comment":"协议族","type":"int","options":[]},"socktype":{"comment":"socket类型","type":"int","options":[]},"protocol":{"comment":"使用的协议","type":"int","options":[]},"service":{"comment":"服务","type":"string","options":[]}}},"exec":{"access":"public","comment":"执行一条shell指令。底层自动进行协程调度","isStatic":true,"return":"array","example":"","parameters":{"cmd":{"comment":"要执行的shell指令","type":"string","options":[]}}},"listCoroutines":{"access":"public","comment":"遍历当前进程内的所有协程","isStatic":true,"return":"\\Swoole\\Coroutine\\Iterator","example":"$coros = Coroutine::listCoroutines();\nforeach($coros as $cid)\n{\n    var_dump(Coroutine::getBackTrace($cid));\n}","parameters":[]},"getBackTrace":{"access":"public","comment":"将域名解析为IP，基于同步的线程池模拟实现。底层自动进行协程调度","isStatic":true,"return":"array|bool","example":"","parameters":{"cid":{"comment":"协程的ID，默认为当前协程","type":"int","options":[]},"options":{"comment":"设置选项(DEBUG_BACKTRACE_PROVIDE_OBJECT: 是否填充object的索引;DEBUG_BACKTRACE_IGNORE_ARGS: 是否忽略args的索引，包括所有的 function\/method 的参数，能够节省内存开销)","type":"int","options":[]},"limit":{"comment":"限制返回堆栈帧的数量","type":"int","options":[]}}}}}