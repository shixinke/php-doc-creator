{"object":{"name":"swoole_process_pool"},"comment":"进程池，基于Server的Manager模块实现。可管理多个工作进程。该模块的核心功能为进程管理，相比Process实现多进程，Process\\Pool更加简单，封装层次更高，开发者无需编写过多代码即可实现进程管理功能","namespace":"","interfaces":[],"consts":[],"properties":[],"methods":{"__construct":{"access":"public","comment":"创建进程池","isStatic":false,"return":"","example":"","parameters":{"worker_num":{"comment":"工作进程数量","type":"int","options":[]},"ipc_type":{"comment":"进程间通信的模式，默认为0表示不使用任何进程间通信特性(\n设置为0时必须设置onWorkerStart回调，并且必须在onWorkerStart中实现循环逻辑，当onWorkerStart函数退出时工作进程会立即退出;\n设置为SWOOLE_IPC_QUEUE表示使用系统消息队列通信，可设置$msgqueue_key指定消息队列的KEY，未设置消息队列KEY，将申请私有队列;设置为SWOOLE_IPC_SOCKET表示使用Socket进行通信，需要使用listen方法指定监听的地址和端口;\n使用非0设置时，必须设置onMessage回调，onWorkerStart变更为可选)","type":"int","value":0,"options":[]},"msgqueue_key":{"comment":"消息队列的键","type":"int","value":0,"options":[]}}},"__destruct":{"access":"public","comment":"析构函数","isStatic":false,"return":"","example":"","parameters":[]},"on":{"access":"public","comment":"设置进程池回调函数","isStatic":false,"return":"","example":"","parameters":{"event_name":{"comment":"事件名称(为workerStart\/workerStop\/message三个事件)","type":"string","options":[]},"callback":{"comment":"回调函数(回调函数onWorkerStart\/onWorkerStop，接受2个参数：Pool对象;WorkerId当前工作进程的编号，底层会对子进程进行标号，范围是[0-$worker_num);回调函数onMessage有两个参数：Pool对象,消息数据内容data)","type":"callable","options":[]}}},"listen":{"access":"public","comment":"监听SOCKET，必须在$ipc_mode为SWOOLE_IPC_SOCKET时才能使用","isStatic":false,"return":"bool","example":"","parameters":{"host":{"comment":"监听的地址，支持TCP和UnixSocket两种类型。127.0.0.1表示监听TCP地址，需要指定$port。unix:\/tmp\/php.sock监听UnixSocket地址","type":"string","options":[]},"port":{"comment":"监听的端口，在TCP模式下需要指定","type":"int","value":0,"options":[]},"backlog":{"comment":"监听的队列长度","type":"int","value":2048,"options":[]}}},"write":{"access":"public","comment":"向对端写入数据，必须在$ipc_mode为SWOOLE_IPC_SOCKET时才能使用(此方法为内存操作，没有IO消耗;发送数据操作是同步阻塞IO)","isStatic":false,"return":"","example":"$pool = new Swoole\\Process\\Pool(2, SWOOLE_IPC_SOCKET);\n$pool->on(\"Message\", function ($pool, $message) {echo \"Message: {$message}\n\";\n$pool->write(\"hello \");\n$pool->write(\"world \");\n$pool->write(\"\\n\");\n});\n$pool->listen('127.0.0.1', 8089);\n$pool->start();\n","parameters":{"data":{"comment":"写入的数据内容。可多次调用write，底层会在onMessage函数退出后将数据全部写入socket中，并close连接","type":"string","options":[]}}},"start":{"access":"public","comment":"启动工作进程","isStatic":false,"return":"bool","example":"","parameters":[]},"getProcess":{"access":"public","comment":"获取当前工作进程对象","isStatic":false,"return":"\\Swoole\\Process","example":"$workerNum = 10;\n$pool = new Swoole\\Process\\Pool($workerNum);\n$pool->on(\"WorkerStart\", function ($pool, $workerId) {\n$process = $pool->getProcess();\n$process->exec(\"\/bin\/sh\", [\"ls\", '-l']);\n});","parameters":[]}}}