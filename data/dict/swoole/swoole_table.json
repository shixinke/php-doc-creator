{"object":{"name":"swoole_table"},"comment":"个基于共享内存和锁实现的超高性能，并发数据结构。用于解决多进程\/多线程数据共享和同步加锁问题","namespace":"","consts":{"TYPE_INT":{"comment":"整型","type":"int","value":1},"TYPE_STRING":{"comment":"字符串","type":"int","value":7},"TYPE_FLOAT":{"comment":"浮点型","type":"int","value":6}},"properties":[],"methods":{"__construct":{"access":"public","comment":"创建内存表","isStatic":false,"return":"","example":"","parameters":{"table_size":{"comment":"定表格的最大行数，如果$size不是为2的N次方，如1024、8192,65536等，底层会自动调整为接近的一个数字","type":"int","options":[]},"conflict_proportion":{"comment":"预留作为hash冲突的比例","type":"float","options":[]}}},"column":{"access":"public","comment":"内存表增加一列","isStatic":false,"return":"bool","example":"","parameters":{"name":{"comment":"指定字段的名称","type":"string","options":[]},"type":{"comment":"指定字段类型，支持3种类型，Swoole\\Table::TYPE_INT, Swoole\\Table::TYPE_FLOAT, Swoole\\Table::TYPE_STRING","type":"int","options":[]},"size":{"comment":"指定字符串字段的最大长度，单位为字节","type":"int","options":[]}}},"create":{"access":"public","comment":"创建内存表(在使用column创建内存表结构时执行)","isStatic":false,"return":"","example":"","parameters":[]},"destroy":{"access":"public","comment":"销毁内存表","isStatic":false,"return":"","example":"","parameters":[]},"set":{"access":"public","comment":"设置行的数据","isStatic":false,"return":"","example":"$table->set('hello@qq.com', array('id' => 189, 'name' => 'rango3', 'num' => 3.1415));","parameters":{"key":{"comment":"数据的key，相同的$key对应同一行数据，如果set同一个key，会覆盖上一次的数据","type":"string","options":[]},"value":{"comment":"必须是一个数组，必须与字段定义的$name完全相同","type":"array","options":[]}}},"get":{"access":"public","comment":"获取一行数据","isStatic":false,"return":"","example":"","parameters":{"key":{"comment":"设置的key值","type":"string","options":[]},"field":{"comment":"字段值","type":"string","options":[]}}},"count":{"access":"public","comment":"获取数据行数","isStatic":false,"return":"int","example":"","parameters":[]},"del":{"access":"public","comment":"删除数据","isStatic":false,"return":"","example":"","parameters":{"key":{"comment":"要删除的键","type":"string","options":[]}}},"exist":{"access":"public","comment":"检查table中是否存在某一个key","isStatic":false,"return":"","example":"","parameters":{"key":{"comment":"","type":[],"options":[]}}},"incr":{"access":"public","comment":"原子自增操作","isStatic":false,"return":"","example":"","parameters":{"key":{"comment":"指定数据的key，如果$key对应的行不存在，默认列的值为0","type":"string","options":[]},"column":{"comment":"指定列名，仅支持浮点型和整型字段","type":"string","options":[]},"incrby":{"comment":"增量，默认为1。如果列为整形，$incrby必须为int型，如果列为浮点型，$incrby必须为float类型失败返回false，成功返回最终的结果数值","type":"mixed","options":[]}}},"decr":{"access":"public","comment":"原子自减操作","isStatic":false,"return":"","example":"","parameters":{"key":{"comment":"指定数据的key，如果$key对应的行不存在，默认列的值为0","type":"string","options":[]},"column":{"comment":"指定列名，仅支持浮点型和整型字段","type":"string","options":[]},"decrby":{"comment":"减量，默认为1。如果列为整形，$decrby必须为int型，如果列为浮点型，$decrby必须为float类型失败返回false，成功返回最终的结果数值","type":"mixed","options":[]}}},"getMemorySize":{"access":"public","comment":"获取table占用的内存大小","isStatic":false,"return":"int","example":"","parameters":[]},"offsetExists":{"access":"public","comment":"检查一个偏移位置是否存在","isStatic":false,"return":"","example":"","parameters":{"offset":{"comment":"偏移量","type":"int","options":[]}}},"offsetGet":{"access":"public","comment":"取一个偏移位置的值","isStatic":false,"return":"","example":"","parameters":{"offset":{"comment":"偏移量","type":"int","options":[]}}},"offsetSet":{"access":"public","comment":"设置一个偏移位置的值(来自ArrayAccess接口)","isStatic":false,"return":"","example":"","parameters":{"offset":{"comment":"偏移量","type":"int","options":[]},"value":{"comment":"需要设置的值","type":"mixed","options":[]}}},"offsetUnset":{"access":"public","comment":"复位一个偏移位置的值","isStatic":false,"return":"","example":"","parameters":{"offset":{"comment":"偏移量","type":"int","options":[]}}},"__sleep":{"access":"public","comment":"序列化函数调用的魔术方法(在PHP进行序列化时，serialize() 检查类中是否有 __sleep() ,如果有，则该函数将在任何序列化之前运行。该函数必须返回一个需要进行序列化保存的成员属性数组，并且只序列化该函数返回的这些成员属性. 该函数有两个作用: 第一. 在序列化之前,关闭对象可能具有的任何数据库连接等. 第二. 指定对象中需要被序列化的成员属性,如果某个属性比较大而不需要储存下来,可以不把它写进__sleep要返回的数组中,这样该属性就不会被序列化)","isStatic":false,"return":"","example":"","parameters":[]},"__wakeup":{"access":"public","comment":"反序列化函数调用的魔术方法(unserialize() 从字节流中创建了一个对象之后,马上检查是否具有__wakeup 的函数的存在。如果存在，__wakeup 立刻被调用。使用 __wakeup 的目的是重建在序列化中可能丢失的任何数据库连接以及处理其它重新初始化的任务)","isStatic":false,"return":"","example":"","parameters":[]},"rewind":{"access":"public","comment":"返回到迭代器的第一个元素","isStatic":false,"return":"","example":"","parameters":[]},"next":{"access":"public","comment":"向前移动到下一个元素(此方法在 foreach 循环之后被调用)","isStatic":false,"return":"","example":"","parameters":[]},"current":{"access":"public","comment":"返回迭代器当前元素","isStatic":false,"return":"","example":"","parameters":[]},"key":{"access":"public","comment":"返回当前元素的键","isStatic":false,"return":"mixed","example":"","parameters":[]},"valid":{"access":"public","comment":"检查当前位置是否有效(迭代器方法，此方法在 Iterator::rewind() 和 Iterator::next() 方法之后被调用以此用来检查当前位置是否有效)","isStatic":false,"return":"boolean","example":"","parameters":[]}}}