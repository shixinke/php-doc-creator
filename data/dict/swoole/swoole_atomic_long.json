{"object":{"name":"swoole_atomic_long"},"comment":"swoole对64位有符号长整型原子计数的支持","namespace":"","consts":[],"properties":[],"methods":{"__construct":{"access":"public","comment":"创建一个64位的长整型原子计数对象","isStatic":false,"return":"","example":"","parameters":{"value":{"comment":"初始化数值","type":"int","options":[]}}},"add":{"access":"public","comment":"增加计数","isStatic":false,"return":"mixed","example":"","parameters":{"add_value":{"comment":"要增加的数值，默认为1,必须为正整数","type":"int","options":[]}}},"sub":{"access":"public","comment":"减少计数","isStatic":false,"return":"","example":"","parameters":{"sub_value":{"comment":"要减少的数值，默认为1","type":"int","options":[]}}},"get":{"access":"public","comment":"获取当前计数的值","isStatic":false,"return":"","example":"","parameters":[]},"set":{"access":"public","comment":"将当前值设置为指定的数字","isStatic":false,"return":"","example":"","parameters":{"value":{"comment":"指定要设置的目标数值","type":"int","options":[]}}},"cmpset":{"access":"public","comment":"如果当前数值等于参数1，则将当前数值设置为参数2","isStatic":false,"return":"","example":"","parameters":{"cmp_value":{"comment":"用于比较的值","type":"int","options":[]},"new_value":{"comment":"用于设置的新值","type":"int","options":[]}}},"__sleep":{"access":"public","comment":"序列化函数调用的魔术方法(在PHP进行序列化时，serialize() 检查类中是否有 __sleep() ,如果有，则该函数将在任何序列化之前运行。该函数必须返回一个需要进行序列化保存的成员属性数组，并且只序列化该函数返回的这些成员属性. 该函数有两个作用: 第一. 在序列化之前,关闭对象可能具有的任何数据库连接等. 第二. 指定对象中需要被序列化的成员属性,如果某个属性比较大而不需要储存下来,可以不把它写进__sleep要返回的数组中,这样该属性就不会被序列化)","isStatic":false,"return":"","example":"","parameters":[]},"__wakeup":{"access":"public","comment":"反序列化函数调用的魔术方法(unserialize() 从字节流中创建了一个对象之后,马上检查是否具有__wakeup 的函数的存在。如果存在，__wakeup 立刻被调用。使用 __wakeup 的目的是重建在序列化中可能丢失的任何数据库连接以及处理其它重新初始化的任务)","isStatic":false,"return":"","example":"","parameters":[]}}}